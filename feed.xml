<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  

  <id>https://2-45.pm/</id>
  <title>2-45.pm – main feed</title>
  <updated>2024-03-09T12:45:00+01:00</updated>

  <author>
    <name>Ronan Limon Duparcmeur</name>
    <email>contact@2-45.pm</email>
  </author>

  <link href="https://2-45.pm/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://2-45.pm" />

  <rights> © Ronan Limon Duparcmeur - contact@2-45.pm </rights>

  
    <entry>
      <id>https://2-45.pm/blog/a-dash-of-milk/2024/03/09/issue-11.html</id>
      <title>A dash of milk #11</title>
      <updated>2024-03-09T12:45:00+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/a-dash-of-milk/2024/03/09/issue-11.html" />

      <published>2024-03-09T12:45:00+01:00</published>
      <content type="html">
        <![CDATA[<h3 id="tailwing-marketing-and-misinformation-engine"><a href="https://nuejs.org/blog/tailwind-misinformation-engine/">Tailwing marketing and misinformation engine</a></h3>

<p>When the Tailwind hype train arrived at my station, back in 2018 I believe, I missed it because it was
relying on <a href="https://lesscss.org">Less</a>, and setting it up was a pain – back then I was more of a
<a href="https://sass-lang.com">Sass</a> guy. Years later, not only do I not get the appeal of this framework (or any
CSS framework for that matter) but I&rsquo;m glad not to be part of what looks, from the outside, like a cult.
Tailwind has a lot in common with Scientology: it is based on ridiculous beliefs, it inexplicably draws
talented people, and its mob will <a href="https://front-end.social/@SaraSoueidan/112037610627710724">hunt you down</a>
if you speak against it.</p>

<h3 id="a-conspiracy-to-kill-ie6"><a href="https://blog.chriszacharias.com/a-conspiracy-to-kill-ie6">A Conspiracy To Kill IE6</a></h3>

<p>Delightful story. I love the irresponsible dauntlessness of the dev team, compared to the aimless inertia
within the company that allowed them to pull it off. A fine example of begging for forgiveness instead of
asking for permission.</p>

<h3 id="jeannette-ng-was-right-john-w-campbell-was-a-fascist"><a href="https://locusmag.com/2019/11/cory-doctorow-jeannette-ng-was-right-john-w-campbell-was-a-fascist/">Jeannette Ng Was Right: John W. Campbell Was a Fascist</a></h3>

<p>I should really read more of Doctorow&rsquo;s. Everything by him that I read or listen to hits the mark. I had no
idea who John W. Campbell was, I still don&rsquo;t know who Jeannette Ng is, and I&rsquo;m only vaguely aware of the
controversy surrounding the Hugo Awards. But, in our age of Balkanized strife, it feels good to read calls
to nuance – <em>“Life is not a ledger. Your sins can’t be paid off through good deeds. Your good deeds are not
cancelled by your sins.”</em></p>

<h3 id="ruby-koans---mountains-are-merely-mountains"><a href="https://koans.idogawa.com">Ruby Koans - Mountains are merely mountains</a></h3>

<p>I had fun doing the <a href="https://www.rubykoans.com">Ruby koans</a> in my terminal back in the day. (OK, to be fair,
I didn&rsquo;t go through them all.) Having them in a web browser in not that useful, but it&rsquo;s a good display of
what <a href="https://webassembly.org">Wasm</a> can do.</p>

<h3 id="performance-impact-of-the-memoization-idiom-on-modern-ruby"><a href="https://railsatscale.com/2023-10-24-memoization-pattern-and-object-shapes/">Performance impact of the memoization idiom on modern Ruby</a></h3>

<p>From the depths of my notes, this great article by <a href="https://ruby.social/@byroot">Jean Boussier</a> about one of
the most over-used technique I&rsquo;ve seen in past 3 years. Now, this article is more about Ruby&rsquo;s <em>object
shapes</em> – an optimization trick that I&rsquo;m not particularly attracted to. (It&rsquo;s the kind of very specialized
tool that&rsquo;s good to know about, but most people will never need – and therefore should never use.) But I&rsquo;d
be happy if the concluding advice is broadly heard: please don&rsquo;t over-use memoization.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/blog/a-dash-of-milk/2024/01/03/issue-10.html</id>
      <title>A dash of milk #10</title>
      <updated>2024-01-08T10:45:00+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/a-dash-of-milk/2024/01/03/issue-10.html" />

      <published>2024-01-08T10:45:00+01:00</published>
      <content type="html">
        <![CDATA[<h3 id="bruce-sterling-and-jon-lebkowsky-state-of-the-world-2024"><a href="https://people.well.com/conf/inkwell.vue/topics/540/Bruce-Sterling-and-Jon-Lebkowsky-page01.html">Bruce Sterling and Jon Lebkowsky: State of the World 2024</a></h3>

<p>A yearly ritual by people used to thinking about the future, in a virtual space that is also a time capsule of the 
early web. The Well&rsquo;s UI is clunky like old mailing lists archives, but the ideas are rich, the analysis sharp, 
if also bleak.</p>

<h3 id="stop-saying-technical-debt"><a href="https://stackoverflow.blog/2023/12/27/stop-saying-technical-debt">Stop saying “technical debt”</a></h3>

<p>I used to love the “technical debt” metaphor. Now I&rsquo;m very suspicious whenever someone uses it. At the very least, 
I ask them if they really mean technical <em>debt</em>, or rather <a href="https://avdi.codes/the-coding-wasteland/">technical <em>waste</em></a>. 
(I&rsquo;ve shared this blog post <em>a lot</em> in the recent years – once more thing to thank Avdi Grimm for.) For now on, 
I&rsquo;ll probably share this article, too.</p>

<h3 id="alchemy"><a href="https://alchemyrpg.com">Alchemy</a></h3>

<p>“Component” is probably my most loathed word of 2023: it is everywhere and doesn&rsquo;t mean anything anymore. Yet, this 
article lays down a great explanation of what <em>web</em> components are (spoiler: many different but related things at 
once), nicely illustrated by actual working code.</p>

<h3 id="goodbye-clean-code"><a href="https://overreacted.io/goodbye-clean-code/">Goodbye, Clean Code</a></h3>

<p>A good lesson on the difference between <em>looking good</em> and <em>good-looking</em>. “Style over substance” is great when 
playing <a href="https://2-45.pm/blog/2023/12/10/chrome-shift.html">Cyberpunk RED</a>; not to much when writing real-life software.</p>

<h3 id="semantic-versioning-is-a-terrible-mistake"><a href="https://reprog.wordpress.com/2023/12/27/semantic-versioning-is-a-terrible-mistake/">Semantic Versioning is a terrible mistake</a></h3>

<p>I agree with the feeling that some ecosystems have a careless YOLO attitude towards breaking changes. I&rsquo;m really 
happy with the way Rails handle things in this regard; the major upgrades can be significant (ask any grognard of 
about their war stories of Rails 2-to-Rails 3 upgrade), and you do not want to stay behind, but they are released 
once a year at worst.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/blog/a-dash-of-milk/2023/12/27/issue-9.html</id>
      <title>A dash of milk #9</title>
      <updated>2023-12-27T11:45:00+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/a-dash-of-milk/2023/12/27/issue-9.html" />

      <published>2023-12-27T11:45:00+01:00</published>
      <content type="html">
        <![CDATA[<p>December was rather busy for me, but as often, the last week of the year is rather quiet, and I&rsquo;m 
finally able to pop and shift from my overflowing reading list.</p>

<h3 id="the-three-body-problem-the-imperative-of-survival-and-the-misogyny-of-reactionary-rhetoric"><a href="https://madeinchinajournal.com/2023/12/11/the-three-body-problem-the-imperative-of-survival-and-the-misogyny-of-reactionary-rhetoric">The ‘Three-Body Problem’, the Imperative of Survival, and the Misogyny of Reactionary Rhetoric</a></h3>

<p>Fascinating take of the <em>Three-Body Problem</em> trilogy and its underlying ideology. I haven&rsquo;t read the whole trilogy, 
since I found the first novel a drag – quite frankly, I still don&rsquo;t understand its appeal. I remember feeling a bit 
unsettled by the overall atmosphere of the book, without being able to pinpoint why. Maybe it has something to do 
with the issues raised by Chenchen Zhang in this essay?</p>

<h3 id="apparently-the-thing-i-call-tdd-might-not-be-quite-tdd"><a href="https://ronjeffries.com/articles/-y023/python/-9w290/292/">Apparently the thing I call TDD might not be quite TDD</a></h3>

<p>Well, my practice of TDD is closer to Ron Jeffries&rsquo; than Kent Beck&rsquo;s, so I guess that I am not doing TDD either. 
Or <em>Canon TDD</em>, at least.</p>

<h3 id="web-components"><a href="https://12daysofweb.dev/2023/web-components/">Web Components</a></h3>

<p>“Component” is probably my most loathed word of 2023: it is everywhere and doesn&rsquo;t mean anything anymore. Yet, this 
article lays down a great explanation of what <em>web</em> components are (spoiler: many different but related things at 
once), nicely illustrated by actual working code.</p>

<h3 id="goodbye-clean-code"><a href="https://overreacted.io/goodbye-clean-code/">Goodbye, Clean Code</a></h3>

<p>A good lesson on the difference between <em>looking good</em> and <em>good-looking</em>. “Style over substance” is great when 
playing <a href="https://2-45.pm/blog/2023/12/10/chrome-shift.html">Cyberpunk RED</a>; not to much when writing real-life software.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/2023/12/11/faxes-from-a-late-career-developer.html</id>
      <title>Faxes from a late-career developer</title>
      <updated>2023-12-11T20:40:55+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/2023/12/11/faxes-from-a-late-career-developer.html" />

      <published>2023-12-11T20:40:55+01:00</published>
      <content type="html">
        <![CDATA[<p>Helvetic Ruby was a great conference. I missed the time window to write about how 
much I enjoyed, but thankfully <a href="https://dimiterpetrov.com/blog/helvetic-ruby-2023-personal-retrospective/">other</a> 
<a href="https://www.rorvswild.com/blog/2023/helvetic-ruby">people</a> 
<a href="https://karenjex.blogspot.com/2023/12/postgresql-meets-ruby-in-switzerland.html">did</a>. However, I did take 
notes with the intent to share my thoughts, and there is 
<a href="https://helvetic-ruby.ch/talks/#harriet-oughton-postcards-from-an-early-career-developers-first-months">one talk</a> 
in particular for which I took a lot of notes (comparatively).</p>

<p><strong>Disclaimer:</strong> I really enjoyed Harriet Oughton&rsquo;s presentation, and I certainly don&rsquo;t want to critizise her 
work. Still, I couldn&rsquo;t help but disagree on several points, and hopefully my 
opinions will enrich the conversion and bring even more support to early-career developers 
and more experienced ones.</p>

<h3 id="til-ecd-the-term">TIL: ECD (the term)</h3>

<p>First of all, I strongly encourage you to <a href="https://www.youtube.com/watch?v=jNY4CViM76U">watch Harriet&rsquo;s talk</a> 
on <a href="https://www.youtube.com/@HelveticRuby">Helvetic Ruby&rsquo;s YouTube channel</a>. It is titled <em>“Postcards from 
an Early-Career Developer&rsquo;s First Months”</em>, and aims to <em>“remind most of us of the common things 
that new developers learn, grapple with and celebrate in the first few months on the job, and for the 
juniors themselves, to expose how common these struggles are (and hopefully provide some pointers along 
the way!)”</em>. It is a delightful talk, carefully crafted, very well written, and filled with humor; I may disagree 
with some of the advice given, but I cannot deny the relevance of the issues raised.</p>

<p>Harriet has more teaching experience than me, so I will not dare to go through her slides and add my comments 
in red ink in the margin like a would-be professor. Instead, I&rsquo;d like to deconstruct her different points, 
and from there send my own snail mail – “faxes from the old devs home”, maybe.</p>

<h3 id="fax-1-youre-not-the-only-one">Fax #1: you&rsquo;re not the only one.</h3>

<p>The first thing that tingled me when watching Harriet&rsquo;s talk is that most of the things that she talked about, 
and for which she gave sound advice, <strong>are not specific to early-career developers</strong>. Maybe that was the point, 
since one of her stated goals was to reassure Padawans on the commonality of their difficulties. Still, <em>everyone</em> 
who joins a new company can find it difficult to set up a working environment, get familiar with the team&rsquo;s workflow, 
or grasp the codebase, and the tips given – be patient, communicate clearly, document what you 
can and keep the documentation up-to-date – apply to/for developers of all level. Maybe I would have like these parts 
better if this had been stated upfront?</p>

<p>However, even though I subscribe to most of the pointers given to make onboardings easier, there was one piece of 
advice that I was very uncomfortable seeing, and it is: _“Use ChatGPT to explain code”. My advice for inexperienced devs is the 
opposite: <strong>stay away from generative AIs</strong> until you are able to distinguish the random bullshit from the relevant 
responses, and see obscure code as an opportunity to learn by yourselves, with or without a mentor – but a 
<strong>human</strong> one. No shortcuts allowed here, especially dangerous ones.</p>

<figure class="captioned-picture" role="group">
  <picture>
    <source type="image/webp" srcset="/assets/faxes-from-a-late-career-developer/fax-1-300.webp 300w, /assets/faxes-from-a-late-career-developer/fax-1-600.webp 600w" />
    <source type="image/jpeg" srcset="/assets/faxes-from-a-late-career-developer/fax-1-300.jpeg 300w, /assets/faxes-from-a-late-career-developer/fax-1-600.jpeg 600w" />
    <img src="/assets/faxes-from-a-late-career-developer/fax-1-600.jpeg" alt="Picture of a fake fax from Arasaka; content below." width="600" />
  </picture>
  <figcaption>
    <p>re: “Everything is new and there is a lot of it; I'm feeling lost and lose my self-confidence.”</p>
    <ul>
      <li>
        <strong>If you're the ECD or the newcomer:</strong> that's normal and happens to everyone. Be honest 
        about everything you don't understand yet, and ask around for the difficulties that old-timers faced 
        when they joined, this should boost both your ego and your acclimatization. Be patient and stay focused!
      </li>
      <li>
        <strong>If you're the old folk:</strong> prepare the onboarding beforehand, decide what should be learned in priority, 
        and communicate it clearly. Be patient and help them stay focused!
      </li>
    </ul>
  </figcaption>
</figure>

<h3 id="fax-2-its-fine-to-have-a-small-toolbox">Fax #2: it&rsquo;s fine to have a small toolbox</h3>

<p>Beyond ChatGPT, several of the pieces of advice given were about tooling, and encouraged leveraging lots of them, 
but rather blindly: installing VSCode extensions, copy-pasting Git aliases, etc.</p>

<p>I have issues with this approach. In fact, I would encourage people with little experience to do the opposite: 
focus on a small set of tools, and be confortable with not using them to their full potential at first. Yes, 
Git aliases are a good way to work faster – but only if you understand what they do, and how they work. And the 
best way to learn that is to take the long road at first, typing the full commands until you understand them well, 
in all their hair-pulling madness. Start simple. The same goes for all your tools. Eventually, I&rsquo;ll need to know 
your text editor by heart, but it will be easier to get there if you learn features gradually, instead of rushing 
to have the badassest setup faster than your peers. Stick to the defaults. Go through the menus instead of 
reusing the keyboard macros of someone else. It&rsquo;s like learning an instrument: if you want to be as fast 
a shredder as a <a href="https://www.youtube.com/@ichika_nito/videos">Japanese bedroom guitarist</a>, you must first 
practice slowly.</p>

<p>However, going slow doesn&rsquo;t mean that you should not try out a lot of different things. This is my second issue 
with these tips: by pointing towards specific tools (VSCode, GitHub, etc.) they contribute to the creation of a 
monoculture. When it comes to tooling, my advice to beginners is: don&rsquo;t settle on anything yet. Start with VSCode, 
learn its basic, then try out Vim, while your mind is still malleable and you haven&rsquo;t settled on any habits. And 
then try out a big IDE like RubyMine. Standard-issue equipment is fine for cannon fodder, but experts have their 
own bespoke stuff, and to understand your own preferences, you&rsquo;ll have to try different things.</p>

<p>Plus, I would hate to see everyone use the same tools and techniques, and I would hate even more to live in a 
world where a single company provides them all.</p>

<figure class="captioned-picture" role="group">
  <picture>
    <source type="image/webp" srcset="/assets/faxes-from-a-late-career-developer/fax-2-300.webp 300w, /assets/faxes-from-a-late-career-developer/fax-2-600.webp 600w" />
    <source type="image/jpeg" srcset="/assets/faxes-from-a-late-career-developer/fax-2-300.jpeg 300w, /assets/faxes-from-a-late-career-developer/fax-2-600.jpeg 600w" />
    <img src="/assets/faxes-from-a-late-career-developer/fax-2-600.jpeg" alt="Picture of a fake fax from Biotechnica; content below." width="600" />
  </picture>
  <figcaption>
    <p>re: “I feel the need to be as well-equiped as my senior peers, and clone their setup all the time.”</p>
    <ul>
      <li>
        <strong>To the ECD:</strong> What you need is not to build a killer setup, it is to discover yourself and 
        what you like and dislike in a setup, so that you can _then_ build a killer one. Change your IDE every 6 
        months, and refrain from customizing any until you've circled back to it. Focus on simple things, and 
        don't let you ego drive you – it's OK not to be a power user.
      </li>
      <li>
        <strong>To the old folks:</strong> Don't show off too much with your Vim-fu. It's cool to keep the 
        beginners curious and tease them with the glorious productivity gains that await them once they've 
        mastered the basics, but don't pressure them into skipping steps, or following in _your_ footsteps.
      </li>
    </ul>
  </figcaption>
</figure>

<h3 id="fax-3-its-all-about-the-pons-anisorum-but-you-can-cross-it">Fax #3: it&rsquo;s all about the pons anisorum, but you can cross it</h3>

<p>I keep saying that the best thing about Ruby is its community and my dear MINASWAN. However, there is such a 
thing as too much kindness, and besides, it&rsquo;s easy to mistake kindness for weakness when you&rsquo;re obsessed with 
being kind enough.</p>

<p>In “Postcards from an ECD”, a lot of the tips for the experienced devs boil down to being kind, preparing things 
in advance for the ECDs, and giving generous praise. Things I one-hundred percent agree with… within reason. 
Of course team members should be kind to one another, but I see no reason why this should be more the case with 
beginners – they may be less experienced but they&rsquo;re not more brittle than anyone else. The same goes for support 
or praise. It&rsquo;s important to build trust, confidence and self-confidence; but it&rsquo;s even more important to put 
in place the conditions for all this to build itself, and that is with clear expectations and achievable, but 
not negligible, goals.</p>

<p>What beginners need most of all, and especially if they are out of a bootcamp, is their own 
<a href="https://www.oxfordreference.com/display/10.1093/oi/authority.20110803100336488">bridge of asses</a> to cross. 
Something that poses a challenge, and will reward them with extra confidence once they&rsquo;ve crossed it. This trick 
is to find the right bridge for each ECD. <a href="https://blog.codinghorror.com/the-two-types-of-programmers/">Not all programmers are driven and talented</a>, 
but “alphas” and “vocationals” alike deserve to be given the right opportunities to grow, and that takes some 
effort, which must be tailored to the challenger, and their team; something that is not easy, but achievable, 
and has real value. The bridge of asses has to lead somewhere for its crossing to be worth anything! Everyone 
deserves kindness and praise help, but these things are means, not an end – the end is getting better by 
successfully doing difficult things.</p>

<figure class="captioned-picture" role="group">
  <picture>
    <source type="image/webp" srcset="/assets/faxes-from-a-late-career-developer/fax-3-300.webp 300w, /assets/faxes-from-a-late-career-developer/fax-3-600.webp 600w" />
    <source type="image/jpeg" srcset="/assets/faxes-from-a-late-career-developer/fax-3-300.jpeg 300w, /assets/faxes-from-a-late-career-developer/fax-3-600.jpeg 600w" />
    <img src="/assets/faxes-from-a-late-career-developer/fax-3-600.jpeg" alt="Picture of a fake fax from Zhirafa; content below." width="600" />
  </picture>
  <figcaption>
    <p>re: “I feel like an idiot at best, a fraud at worst.”</p>
    <ul>
      <li>
        <strong>To the ECD:</strong> That's because you haven't earned your first laurels yet. Look for a 
        difficult, but not too difficult, task in the backlog and stick with it until you've completed it 
        well. You know you're doing well if you have to push through. Then look behind you a see how far 
        you've already progressed.
      </li>
      <li>
        <strong>To the old folks:</strong> Give the ECDs actual responsibilities, but scoped to a specific 
        field you need them to get better at. Support them as much as they need, but only from the sidelines.
      </li>
    </ul>
  </figcaption>
</figure>

<h3 id="fax-4-the-important-work-is-in-the-tests">Fax #4: the important work is in the tests</h3>

<p>This last bit is more specific than the others, and may be a complete rebuttal of the final postcard in 
the presentation: “This is testing my code and my patience”. This part of the talk starts with “Lots of early-
career developers finds testing a new and unknown frontier. As chances are, they will have been concentrating more 
on the basics of making working, nice-looking software when starting out, instead of protecting it against the 
ninety-third obscure edge case that some product manager dreamed up over the cereal that morning.” I disagree with 
a lot of things in this statement, so if you&rsquo;ll excuse me I&rsquo;m climb on my soapbox and go preaching a bit.</p>

<p>It may very well be that, indeed, bootcamp graduates aren&rsquo;t being taught how and why they should test, but that 
would be a very big mistake on the bootcamp&rsquo;s part. Testing is not an add-on to the writing software, it is not 
an extra assignment for bonus points, and it is certainly not for the benefits of product managers. <strong>Tests are 
what drives the design of the software.</strong> “Nice-looking” is meaningless; what matters is <em>well-designed</em>, and 
tests help tremendously the design. (And as it happens, well-designed code also looks nice – tests included.)</p>

<p>This is one of the others things that the Ruby community does unusually well: care for the tests. I would hate to 
see this crucial part of our culture go because of misguided bootcamps, if they are indeed responsible.</p>

<p>Tests should be cared for as much, if not more, than the rest of the code base. Therefore, the same good practices 
should <em>usually</em> be followed: don&rsquo;t copy-and-paste, never write anything you don&rsquo;t understand, do not over-DRY, 
optimize for human happiness through legibility and simplicity, etc. If TDD is not a hard requirement, do it 
anyway – if the others aren&rsquo;t doing it, it&rsquo;s them who are wrong. Granted, the tests in question may be large 
integration tests<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, but that&rsquo;s not important. What matters is to get into the habit of writing the tests 
first, as a way to conceptualize your understanding of the problem to solve, and drive yourself towards a sound 
solution.</p>

<p>And if you don&rsquo;t know how to write tests, well, you have probably found your pons anisorum. Good for you!</p>

<figure class="captioned-picture" role="group">
  <picture>
    <source type="image/webp" srcset="/assets/faxes-from-a-late-career-developer/fax-4-300.webp 300w, /assets/faxes-from-a-late-career-developer/fax-4-600.webp 600w" />
    <source type="image/jpeg" srcset="/assets/faxes-from-a-late-career-developer/fax-4-300.jpeg 300w, /assets/faxes-from-a-late-career-developer/fax-4-600.jpeg 600w" />
    <img src="/assets/faxes-from-a-late-career-developer/fax-4-600.jpeg" alt="Picture of a fake fax from Militech; content below." width="600" />
  </picture>
  <figcaption>
    <p>re: “Tests are pointless, I want to do real work”</p>
    <ul>
      <li>
        <strong>To the ECD:</strong> Tests are real work. Learn to love them, and never skip them. Never. Only 
        when you are more experienced will you know when to do without tests, but until then: write your tests, 
        and write them first.
      </li>
      <li>
        <strong>To the old folks:</strong> Mentor the shit out of this. Teach the culture of testing. The test 
        pyramid, the difference between integration and unit tests, the phases of a test, everything. Pair with 
        the beginners on the writing of the tests, and then leave them alone, if you want, for the actual 
        implementation.
      </li>
    </ul>
  </figcaption>
</figure>

<h3 id="error-out-of-paper">Error: out of paper</h3>

<p>It&rsquo;s easy to give advice, especially from the comfort of my old-timer rocking chair, and I may very well have 
forgotten how it is to begin. I hope that my addendum, sometimes contrarian, to Harriet Oughton&rsquo;s talk, will 
not sound <em>too</em> arrogant or judgmental. It is a really nice talk, and giving it required a lot more thoughts 
and courage than writing a blog post about it afterwards. Besides, it is an important topic, about which I do 
care. Hopefully, I can help a bit, too.</p>

<p>To conclude, there is one thing I think we should focus on, too, when talking about newcomers on the scene, 
especially people with very little experience and education (i.e. bootcampees), and that is: the value they 
can bring.</p>

<p>It is very common to hear calls to hire early-career developers, and injuctions to help them, invest time and 
energy in them, etc. But I wouldn&rsquo;t be surprised if, hearing all this, companies paused before hiring these 
newcomers. If ECDs require so much investment, if there is so much extra training to give them, why not hire 
more experienced people instead? Why bother?</p>

<p>Harriet does touch a little bit on this at the end of her talk, and I have several arguments to give in favor 
of bootcampees and other beginners, but I believe that there is room for more discussions and presentation 
about that. Let&rsquo;s try to focus more on what these youngsters can give, and less on what they need.</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Or <em>system tests</em>, in Rails jargon.&nbsp;<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/blog/2023/12/10/chrome-shift.html</id>
      <title>Chrome Shift</title>
      <updated>2023-12-10T16:26:01+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/2023/12/10/chrome-shift.html" />

      <published>2023-12-10T16:26:01+01:00</published>
      <content type="html">
        <![CDATA[<p>I am now four sessions deep into my <a href="https://rtalsoriangames.com/cyberpunk/#:~:text=Cyberpunk%20Red">Cyberpunk RED</a> 
campaign, codenamed <em>Chrome Shift</em>, and it seems like the group has found its rhythm, which is great. As we&rsquo;re 
reaching the end of the first scenario, here is a summary of the story so far, and my GM commentary track.</p>

<h3 id="saving-customers-with-extreme-prejudice">Saving customers with extreme prejudice</h3>

<p>The dystopian future of Cyberpunk RED is a dangerous place. In Night City, in 2045, violence is everywhere, from 
the combat zones to the executive enclaves, from the crater left by the nuke that blew up the corporate center to 
the rooftops of the skyscrapers erected during the reconstruction. Therefore, those who can afford it subscribe to 
privatized emergency services: teams of medics and paramilitary agents, half paramedics and half SWAT teams, who 
will rush to their wounded customers in their flying ambulance and carry them to a hospital, dealing with opposing 
resistance without restraint nor discrimination.</p>

<p>The best in this field are <strong>Trauma Team</strong> – they have the means, the gear, the reputation, the glamour of 
modern paladins, and they charge accordingly. The protagonists of <em>Chrome Shift</em> do <strong>not</strong> work for Trauma Team. 
Instead, they are contractors for <strong>REO MeatWagon</strong>, the under-staffed, unscrupulous, and a bit shady rival of 
Trauma Team.</p>

<p>The story started when the party, after an bad day, took on a last and unexpected intervention: MeatWagon&rsquo;s 
dispatch AI had intercepted an emergency call to Trauma Team, and there was a window of opportunity to steal 
this customer from them. After a brief firefight in an abandoned metro station<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> to get rid of two gangs 
exchanging fire, the <a href="https://cyberpunk.fandom.com/wiki/Brainiacs">Brainiacs</a> and the 
<a href="https://cyberpunk.fandom.com/wiki/Inquisitors">Inquisitors</a>, the party successfully extracted the unfortunate 
customer caught in the crossfire, as well as his husband, and then evaded a very pissed off Trauma Team squad. 
Even more importantly, the party&rsquo;s solo<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> managed to get hold of an unknown device left on the scene – some 
kind of unmarked black box.</p>

<p>Once back to the MeatWagon HQ and medical center, the party was welcomed by their manager, <strong>Inglès</strong>, something as 
infrequent as him not slotting in his Cary Grant personality chip. The party then disbanded, only to be contacted 
by menacing members of the Brainiacs; the gang demanded the return of the device, which they claimed to have 
fairly bought from their still unidentified customer.</p>

<p>Unfortunately, the party soon discovered that Inglès had stolen the device from the locker where it had been left, 
and then precipitously vanished. Leveraging the resources at their disposal at MeatWagon HQ, the party eventually 
localized their manager on the territory of a local posergang<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>, the <strong>Tomb Raiders</strong>. Clever negociations 
granted them access an altered Inglès, detained in a state of primitive rage and seemingly unable to recoginize 
anyone. Unfortunately, it was quickly obvious that the Tomb Raiders had taken possession of the device, and 
would not let it go for free.</p>

<p>The party then moved their attention to the presumed seller of the device. His identity was soon revealed: nicknamed 
<strong><a href="https://cyberpunk.fandom.com/wiki/3-Piece">3-Piece</a></strong>, this fixer had a certain renown, and a specialty in 
tech-related ventures. Tactfully approached, 3-Piece proved to be friendly and accomodating, and warned the party 
that being in possession of the device could attract dangerous attention, and especially that of a rival named 
<strong>Armalite</strong>, from whom 3-piece initially acquired it.</p>

<p>Intrigued but steadfast, the party worked on broking a meeting between the Tomb Raiders and one of their most 
dangerous rivals, the <strong><a href="https://cyberpunk.fandom.com/wiki/Slaughterhouse">Slaughterhouse</a></strong>. The deal granted 
them the ownership of the mysterious device, but as the party was leaving the abandonned skyscraper where it took 
place, shrieks and gunshots made clear that something had gone sideways in the negociations…</p>

<h3 id="gms-notes">GM&rsquo;s notes</h3>

<p>Overall, I&rsquo;m pretty happy with this introductory scenario so far. Except for a Kult one-shot a couple of months 
ago and two sessions of old-school Rolemaster dungeon dwelling the year before, I hadn&rsquo;t GM&rsquo;ed anything in 
years. And our group is still not very well-organized for remote play – we haven&rsquo;t found a VTT we all like, 
there is always a problem with someone&rsquo;s audio setup, and most players aren&rsquo;t confortable showing their faces 
on camera.</p>

<p>For this reason, and because Cyberpunk RED is a new game for everyone, and even a whole new genre for one of the 
players, I went for a very simple scenario. It is a McGuffin hunt, but it offers several hooks for mysteries, 
politics and intrigue (something the players said they were looking for). It also leans in on the backgrounds of 
the characters, at least some of them. (The lifepath system of Cyberpunk RED is really great for building rich 
backgrounds, and our session 0 was very inspiring.)</p>

<p>I used to play with this guys<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup> 20 years ago, but then life dragged me away from the gaming table. However, 
most of them managed to keeping playing, and it showed! I was positively surprised by their quick-thinking during 
the <em>development</em> beats, and their tactical sense during the <em>cliffhanger</em> beats, to reuse the game&rsquo;s terminology. 
Still, I had a hard time keeping everyone invested, even though the feedback I&rsquo;ve gathered is positive 
(<a href="https://cybernationuncensored.com">Rob Mulligan</a>&rsquo;s GM report card in 
<a href="https://rtalsoriangames.com/downloadable-content#:~:text=Listen%20%21%20to%20Rob">his DLC</a> is pretty great for 
that). I hope that with a better setup, and more familiarity with the rules and the setting, everyone will get 
into the flow of the game.</p>

<h3 id="house-rules-and-changes-to-the-setting">House rules and changes to the setting</h3>

<p>Like many GMs, I like to create my own campaign settings and imaginary worlds. Yet, I also like to stick to 
whatever a game offers: it is usually what the rules are tailored for, professional game designers are better 
at this than me, and it is easier for the players to be on the level with me if they have access to the same 
material. Cyberpunk RED is great, in that it lays down the groundwork, but leaves room for the GM to add their 
own spin on things. So <em>my</em> Cyberpunk RED is basically what you read in the core rulebook, plus stuff 
taken from Willian Gibson, George Alec Effinger or Walter Jon Williams. And I adjust some details as I see fit, 
like giving REO MeatWagon its own, modest-ish medical center on top of their ambulance service (making it easier 
to slot in the medtech character).</p>

<p>However, there is one thing I have issues with in the original setting, and that is the timeline. In order to 
maintain continuity with stuff written 30 years ago, and also with the video game, you need to somehow conceive 
a world that is very different from ours, where technology accelerated exponentially in the last decades of the 
20th century, but then somehow stalled from 2020 to 2077. It&rsquo;s a detail, but it irks me. So I&rsquo;ve blurred the 
timeline and keep the dates very ellusive. The campaign takes place in 2045. Some time ago, a tactical nuke 
blew up the center of Night City and this marked the end of the 4th corporate war. Was it in 2023? 2033? 2043? 
It doesn&rsquo;t matter. Let&rsquo;s move on.</p>

<p>Rules-wise, I&rsquo;ve always liked the simplicity of the Interlock system, and even more of its successor, 
<a href="https://rpggeek.com/rpgsystem/478/fuzion">Fuzion</a>. I was a bit disappointed to see that CP-RED had moved back 
to a revised Interlock, but it&rsquo;s still a solid, simple if a bit old-school system, and I see no reason to house 
rule anything. So far, the new stuff, like the critical injuries replacing the hits location, worked fine.</p>

<p>I did import the time table for skills from Fuzion: I find it easier to have a set list of possible durations 
for a given task, especially when “taking more time” is often the only way for the players to try again a 
failed attempt. But the most significant change I&rsquo;ve made so far relates to the Trauma Team (or MeatWagon) 
intervention time, and the consequences of dying.</p>

<p>In the rules as written, when called for help, Trauma Team arrives in less than 20 seconds. That is stretching 
the versimilitude a bit, but it makes sense from a game perspective, since the time window to save a dying 
character is rarely larger than that. To keep things a bit more realistic, while preventing constant character 
deaths, I have introduced the following changes:</p>

<ul>
  <li>Trauma Team, when called, arrives in 1d6 <em>minutes</em>, not <em>rounds</em>.</li>
  <li>But, as in Cyberpunk 2020, <em>death can be reverted</em>. This requireds a successful <strong>Surgery</strong> roll, whose 
difficulty is <strong>13 + the number of minutes elapsed since the character&rsquo;s death</strong> (rounded up). I like the idea 
that, in 2045, even death can be cured by technology.</li>
</ul>

<h3 id="tomorrow-people">Tomorrow people</h3>

<p>I have a stable(-ish) gaming group, a game with a rich setting and a lean system, experienced players with a 
taste for both narrative and tactical play, and strong characters to write scenarios around. Now all I need 
is better tooling for online play. I can&rsquo;t wait to see where the campaign goes!</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Night City used to have a very simple metro system named NCART, but in 2045 it is abandoned, its tunnels 
  and underground stations flooded and irremediably damaged by the aftershock of the nuke.&nbsp;<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>“Solo” is the generic name given to professional combatants: mercenaries, bodyguards, hit-men, etc. Think 
  <a href="https://williamgibson.fandom.com/wiki/Molly_Millions">Molly Millions</a> or Sarah in 
  <a href="http://speculiction.blogspot.com/2015/09/review-of-hardwired-by-walter-jon.html">Hardwired</a>.&nbsp;<a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>In Cyberpunk RED, posergangs are gangs whose members impersonate a specific personality or character, 
  often to the point of being biosculpted in order to resemble them physically and in persona.&nbsp;<a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>Yes, we&rsquo;re not a diverse group, unfortunately. The new generation is better at this than us grognards.&nbsp;<a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/blog/2023/12/06/i-wasn-t-meant-to-be-a-rock-star.html</id>
      <title>I wasn&#39;t meant to be a /rock ?star/</title>
      <updated>2023-12-06T09:30:34+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/2023/12/06/i-wasn-t-meant-to-be-a-rock-star.html" />

      <published>2023-12-06T09:30:34+01:00</published>
      <content type="html">
        <![CDATA[<p>Even since I heard about it, I&rsquo;ve been fond of the <a href="https://codewithrockstar.com">Rockstar</a> programming language. 
Or, more precisely, I&rsquo;ve been fond of the humor behind this langage, and the fact Rockstar it is basically a 
joke <a href="https://www.youtube.com/watch?v=4xgx4k83zzc">pushed to eleven</a>, with actual implementations and potentially 
actual programs to be written.</p>

<p>Last year, I tried to do the Advent of Code using Rockstar, but immediately hit a roadblock. This year, I decided 
to push through and accidentally committed to do so by <a href="https://ruby.social/@r3trofitted/111427212436421499">@ing by Jeff Atwood</a>. 
Unfortunately, this proved to be a commitment I could not hold to, and I&rsquo;ve decided to quit after solving the first challenge (which took me several 
days to do). However, this was a learning experience; let me share it with you.</p>

<h3 id="down"><a href="https://music.apple.com/fr/album/down/1045519155">Down</a></h3>

<p>As a long-time Ruby developer, I easily forget how good I have things. Ruby is a high-level language optimized 
for developer happiness, after all. Rockstar is certainly Turing-complete, but also very bare-bones. No objects. 
No regular expressions. No iterators. No data structure but arrays. If you want anything more than loops and 
variables, you&rsquo;ll have to build it yourself. In a way, it felt like 
<a href="https://2-45.pm/articles/z80asm/2023/08/31/jurassic-stack.html">programming in Assembly</a>, or playing survival 
Minecraft. You want an enchanting table? Start punching trees.</p>

<p>Of course, like with Minecraft, this is part of the game, but I wasn&rsquo;t prepared for the time it takes to do 
anything. I eventually started writing a library of functions, and in retrospect I should have done that 
from the start. Go over my strategy, identify the tools I&rsquo;ll need, and create them. Instead, I spent 
too much time stumbling my way procedurally.</p>

<h3 id="cryptic-writings"><a href="https://music.apple.com/fr/album/countdown-to-extinction-live/703019036">Cryptic Writings</a></h3>

<p>What makes Rockstar great are the <a href="https://codewithrockstar.com/docs#:~:text=undefined%29-,Poetic%20Literals,-Rockstar%20also"><em>poetic literals</em></a>: 
ways to assign constants, strings or integers to variables using plain English. <code>My love is true</code> assigns 
the constant <code>true</code> to the variable <code>my love</code>; 
<a href="https://music.apple.com/fr/album/made-the-same/1116637128?i=1116637291"><code>Your mind is thinking madness</code></a>
 assign the value <code>87</code> to the variable <code>your mind</code>; 
<a href="https://music.apple.com/fr/album/seventeen/1092723303?i=1092723307"><code>Daddy says she's too young but she's old enough for me</code></a> 
assigns the value <code>she's too young but she's old enough for me</code> to the variable <code>Daddy</code>.</p>

<p>This is clever and fun, and I was expecting to spend most of my time searching for thematic literals, instead 
of finding my way through my own code. I failed to anticipate how quickly code can be obfuscated. This is 
especially true when you need to assign values like 0 or 1, for which you need to use 10- and 11-letter words – 
at a glance, it&rsquo;s hard to tell how many letters a long word has.</p>

<p>Compounding this is the fact that poetic literals can only be used in variable assignments. So if you 
need a scalar value in an operation – say, to evaluate the exit condition of a loop – you need to first 
go through a variable, and then use it in the operation. All this boilerplate takes a lot of headspace very fast.</p>

<p>Once again, this is completely fair given the purpose of Rockstar, but it makes for a harder challenge 
than I was expecting. I eventually came up with techniques to make the code easier to decrypt, such as using 
words starting in i, j or k for loop counters (<code>The idol is disharmony</code> for <code>i = 0</code>), or pre-assigning 
“constants” for recurring values like 0. But even then, reading my own Rockstar was really hard. In the end, 
I resorted to commenting every line with pseudo-code, which is not very rock&rsquo;n roll.</p>

<h3 id="achtung-baby"><a href="https://music.apple.com/fr/album/achtung-baby/1443063058">Achtung Baby</a></h3>

<p>Adding these comments led me to a bug in Rockstar, or at least in Sinatra&rsquo;s implementation (when 
assigning a literal string, comments put at the end of the line are considered part of the string). 
But, in truth, this was only one among many, though some are certainly more unfortunate consequences of 
the language&rsquo;s design that actual implementation issues.</p>

<p>For example, you cannot re-assign a new, empty array to a variable. Because the same keyword, <code>rock</code>, 
is used to create a new array or wrap an exiting variable into a new array, using it several times 
with the same variable name – in a loop, for example – only re-uses the array created the first time.</p>

<p>By the same token, you can only get the length of an array by <a href="https://github.com/RockstarLang/rockstar/issues/300">evaluating it in a scalar context</a> – 
like adding 0 to it. This probably counts more as boilerplate than a defect, but still, I tripped 
more than once on this peculiarity.</p>

<p>Basically, because Rockstar wasn&rsquo;t meant to be taken seriously, it is difficult to find a serious 
interpreter for it. I eventually used <a href="https://github.com/RockstarLang/rockstar/tree/main/satriani">Satriani</a>, 
a JS implementation that is also the reference for the language, but because of 
<a href="https://github.com/RockstarLang/rockstar/issues/297">unsolved issues with piped input</a>, I only did so 
after trying the Ruby implementation, and the Rust one – and none of them worked properly. I would be 
unkind to list the bugs I encountered with any of these 3 implementations or complain about them, but if 
you want to try out Rockstar, be prepared: its edges are still very rough.</p>

<h3 id="good-humor-saint-etienne">Good Humor (Saint Etienne)</h3>

<p>In the end, it took me 3 days to finish the first challenge. Granted, it was over a week-end, and I didn&rsquo;t 
spend my whole days on it, but still – we&rsquo;re talking orders of magnitude what would have taken me in Ruby, 
for example.</p>

<p>Trying to write a simple program in an unreliable, confusing and low-level language really made me 
feel like some very new developers I encountered in my career: quickly disoriented in the codebase, losing 
track of their initial intent, and resorting to trying out anything in the hope that it works, without 
understanding why. This is inefficient and unpleasant. It refilled my empathy for them.</p>

<p>Yet, even if I&rsquo;m not entirely happy with my final result, I&rsquo;m glad to see that I did not give up when put 
in this uncomfortable position. In fact, I could not let it go – like a Wordle from Hell, solving this 
challenge in Rockstar became a personal brain-teaser that I eventually overcame. Even if it drained all 
my desire to continue with the Advent of Code.</p>

<p>Who knows, maybe I&rsquo;ll try again next year? But this time, I&rsquo;ll be even more prepared, with a library of 
basic functions, and solid habits to keep track of the <em>logic</em> in the program before going over it and 
thinking about the lexical fields, and the different synonyms available for sex, drugs, and party.</p>

<p>Anyway, if you want to read my poetry, I&rsquo;ve <a href="https://gist.github.com/r3trofitted/24086d4bd9263ddee1679b5443c89f91">put it in a gist</a>, 
and here is the uncommented version:</p>

<pre><code>Mister Presents takes your wish, your sins and your prayers
Let the ice be your prayers
The judge is hypnotized
Shatter your wish
The heart is liveliness
Let the love be lies
Let the gift be your sins at the ice
Let the coal be your wish at the judge
Until the gift is nothing
Let the coal be your wish at the judge
If the gift is the coal
Let the love be true
Build the ice up
Build the judge up
Let the gift be your sins at the ice
If the love is true and the judge is as high as the heart with your wish
Let the truth be the ice without the judge
Give it back

Take it to the top

If the gift is your wish at the heart
The judge is perseverant
Build the ice up
Let the gift be your sins at the ice
Take it to the top

Let the love be lies
The judge is deflowered
Build the ice up
Let the gift be your sins at the ice




The Arbiter takes the sound
While the sound ain't nothing
Roll the sound into the vibe
If the vibe ain't mysterious
Rock the vibe into the wave


The crest is amplitudes
The rush is bewildering
Let the glory be the wave at the crest
Let the end be the wave without the rush
Let the pride be the wave at the end
Rock the glory
Rock the glory with the pride
Unite the glory into the dream
Burn the dream
Give it back




The beat says YELL!
Listen to the pulse
Shatter the pulse into your soul with the beat

The revelation is earthlight
The start is crucifixion
Your lover is joyfulness
The fear is subjugation
Let the dance be your lover without the fear
Rock you like "one"
Rock you like "two"
Rock you like "three"
Rock you like "four"
Rock you like "five"
Rock you like "six"
Rock you like "seven"
Rock you like "eight"
Rock you like "nine"
While your soul ain't gone
The sound is lies
Rock the sound
Roll your soul into my words
My sign is resilience
Your name is consequence
The idol is flamboyant
The herald is disharmony
Until the idol is my sign with you
Let the joker be your name with the idol
Let the drug be Mister Presents taking the joker, my words 'n' the herald
If the drug is as high as your lover
Let the sound at the drug be the joker
Let the herald be your name with the drug
Take it to the top

Let the herald be my sign
Build the idol up

The idol is disharmony
The herald is flamboyant
Until the idol is my sign with you
Let the joker be your name with the idol
Let the killer be you at the idol
Let the drug be Mister Presents taking the killer, my words 'n' the herald
If the drug is as high as your lover
Let the sound at the drug be the joker
Let the herald be your name with the drug
Take it to the top

Let the herald be my sign
Build the idol up

Let the faith be the Arbiter taking the sound
Let the revelation be the revelation with the faith

Shout the revelation
</code></pre>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/blog/a-dash-of-milk/2023/11/14/issue-8.html</id>
      <title>A dash of milk #8</title>
      <updated>2023-11-24T11:27:00+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/a-dash-of-milk/2023/11/14/issue-8.html" />

      <published>2023-11-24T11:27:00+01:00</published>
      <content type="html">
        <![CDATA[<h3 id="http-303-redirects-with-anchor-not-respected"><a href="https://github.com/hotwired/turbo/issues/211">HTTP 303 Redirects with anchor not respected</a></h3>

<p>An unexpected issue with Turbo that I came across while working on a pet project. It&rsquo;s all the more 
a bummer that the problem is not really with Turbo, but <a href="https://github.com/whatwg/fetch/issues/1167">with <code>fetch()</code></a>. 
The silver lining is that I learned a couple of things through this, starting with the fact that there is 
<a href="https://fetch.spec.whatwg.org">a whole spec for fetching</a> (which goes beyond the JS function).</p>

<h3 id="spicy-web"><a href="https://www.spicyweb.dev">Spicy Web</a></h3>

<p>I may be late to the party here, since Jared White is a name that sounds familiar, but Spicy Web is yet 
another heartwarming example of the Revenge of the Simple Web. I sense a backlash brewing against the over-engineering 
of the web in the last decade, and every single week I stumble on another brilliant piece of advocacy for a return 
to HTML and CSS by the book – which are very powerful now.</p>

<h3 id="wait-is-cloud-bad"><a href="https://newsletter.goodtechthings.com/p/wait-is-cloud-bad">Wait, is cloud bad?</a></h3>

<p>An interesting counter-take on DHH&rsquo;s recent advocacy for exiting the cloud. I don&rsquo;t necessarily agree with the author 
on everything, but I liked his tone. Being myself (moderately) excited at the prospect of being able to do go back to the 
good old days, including when it comes to sysadmin stuff, I appreciate a different perspective.</p>

<h3 id="posse"><a href="https://indieweb.org/POSSE">POSSE</a></h3>

<p>Talking about the good old days, <a href="https://justin.searls.co/takes/2023-10-30-13h57m54s/">a toot by Justin Searls</a> pointed 
me towards this nice branding of a cool concept. I already have too many projects in progress, but redoing this 
site to making it POSSE-compliant is now on top of the TODO pile. The 90&rsquo;s are back, I&rsquo;m telling you!</p>

<h3 id="geist"><a href="https://vercel.com/font/mono">Geist</a></h3>

<p>As <a href="https://2-45.pm/2023/06/26/no-milk-no-sugar-4.html">I&rsquo;ve written already</a>, I&rsquo;m a sucker for fonts. This one looked 
nice, and its website really sells it well. But, for some reason, I didn&rsquo;t like it in practice.</p>

<h3 id="monaspace"><a href="https://monaspace.githubnext.com">Monaspace</a></h3>

<p>… And yet, I am going all-in on the Monaspace family – more precisely, on Monaspace Neon, semi-wide and ultra-light. 
Probably because it looks a bit like <a href="https://www.linotype.com/342843/eurostile-family.html">Eurostile</a>, my favorite fonts 
of all time, as overused as it may be.</p>

<p>(So far, the transition to Monaspace Neon from my dead Monofur is going rather well, even it is less pleasing when writing 
prose.)</p>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/2023/11/14/better-practices-by-example-rspec.html</id>
      <title>Better practices by example: RSpec</title>
      <updated>2023-11-14T23:03:00+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/2023/11/14/better-practices-by-example-rspec.html" />

      <published>2023-11-14T23:03:00+01:00</published>
      <content type="html">
        <![CDATA[<p>Some time ago, I stumbled upon <a href="{% link _posts/2023-11-02-humility-check.md %}">an interesting technical test</a>. However, 
the more I looked at the provided Rails app, the more issues I found with it, to the point that I find it good material 
for an educational (hopefully) piece. But before I start, two disclaimers:</p>

<ul>
  <li><strong>This is not a rebuttal of the test itself.</strong> And I&rsquo;m certainly not trying to explain away my poor performance. The 
test was fair and fine; it provided realistic and functioning<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> code, similar to a lot of things I&rsquo;ve seen in 
actual applications. It just happens that the code, especially the specs, left room for improvement.</li>
  <li><strong>The shortcomings in the code may be intentional</strong>. It is an assessment app, after all. Maybe its code is 
suboptimal because making it better wasn&rsquo;t worth the effort. Or maybe the shortcomings are deliberate, to better 
assess the candidates. But that&rsquo;s not important.</li>
</ul>

<p>What matters is not really where the following code comes from; the important thing is that it is a good example of 
something that <em>works</em> but isn&rsquo;t quite <em>right</em>. And making it right is important in real life. (And fun, too.)</p>

<h3 id="the-app-and-its-tests-code-here">The app and its tests (<a href="https://github.com/r3trofitted/pokebeep/tree/0_start_here"><code>code here</code></a>)</h3>

<p>You can find the repo <a href="https://github.com/r3trofitted/pokebeep">here</a>. To avoid spoiling the original test, I&rsquo;ve changed 
the app description and the names of the models, controllers and other resources; I&rsquo;ve also re-created the application 
instead of starting from the initial codebase. But apart from that, everything is the same, especially the tests.</p>

<p>And the tests are what I will focus on in this article. The application code doesn&rsquo;t matter, and could be anything, as 
long as it makes the tests pass. The latter are made of two specs files, plus a support file:</p>

<ul>
  <li><code>/specs/api_spec.rb</code> contains specs for the two endpoints of the app&rsquo;s API, <code>POST /beeps</code> and 
<code>GET /summaries/{id}/{from}/{to}</code>.</li>
  <li><code>/specs/api_validation.rb</code> contains specs specific to the expected response when wrong parameters are sent to the API.</li>
  <li><code>/specs/public_api.rb</code> contains a collection of helpers for the specs above.</li>
</ul>

<p>(Obviously, the testing framework used here is RSpec.)</p>

<p>Overall, these specs work, in that they break if the implementation is wrong and pass when it is right (except for a 
couple), but I have several issues with them nonetheless. Poor naming, poor organization, lack of idioms… None of these 
issues is deal-breaking in itself, but taken all together, they are a bit much. If I was reviewing these specs in a pull 
request, for example, I&rsquo;d ask for a series of fixes<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>:</p>

<h3 id="1-thats-how-you-get-ants-code-here">1. That&rsquo;s how you get ants (<a href="https://github.com/r3trofitted/pokebeep/tree/1_ants"><code>code here</code></a>)</h3>

<p>RSpec is very polite and never <em>demands</em> you to do anything (I believe that it is because its original author is Canadian). 
This is especially true when it comes to organizing your spec files: by default, RSpec only asks for files ending in <code>_spec.rb</code> 
in a <code>spec</code> directory, and even this <a href="http://rspec.info/documentation/3.12/rspec-core/RSpec/Core/Configuration.html">can be configured differently</a>.</p>

<p><code>rspec-rails</code> is a little bit more structuring and suggests a canonical directory structure, in which files are placed 
according to the type of spec they contain: <code>/spec/models</code> for model specs, <code>/spec/system</code> for system specs, etc. Even 
if this organization is not mandatory<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>, it has at least two benefits. Being conventional, it makes the specs 
easier to contextualize and the suite easier to navigate. Also, it removes the need for some metadata, since RSpec can 
infer them from the layout.</p>

<p>And so, we&rsquo;ll start by moving the files around. Both <code>api_spec.rb</code> and <code>api_validation_spec.rb</code> contain 
<a href="http://rspec.info/features/6-0/rspec-rails/request-specs/request-spec/"><strong>request specs</strong></a>: specs that use the whole 
stack, making actual<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup> HTTP requests that go through the router, controllers, etc. (The only difference with system 
specs is that the responses are not run by a browser, but asserted against as they are received.) The canonical place 
for such specs is thus <code>/spec/requests/</code>, and because the configuration option <code>infer_spec_type_from_file_location!</code> is 
on, we can remove the explicit declaration of the spec type by metadata, like so:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="c1"># …</span>
<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'public api'</span><span class="p">,</span> <span class="ss">type: :request</span> <span class="k">do</span>
  <span class="c1"># …</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/api_spec.rb (before)
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="c1"># …</span>
<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'public api'</span> <span class="k">do</span>
  <span class="c1"># …</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/requests/api_spec.rb (after)
</figcaption></figure></div>

<p>As for the helpers file, I would prefer to put it in a dedicated directory, too. Once again, this is not mandated by 
RSpec, but by tradition support files go into a <code>/spec/support</code> directory, so this is where we&rsquo;ll 
place the <code>public_api.rb</code> file. And while we&rsquo;re at it, we&rsquo;ll rename it <code>api_helpers</code>, which is more fitting.</p>

<p>Having done so, we&rsquo;d better rename the module defined within this file <code>ApiHelpers</code> instead of <code>PublicApi</code>. But instead 
of updating both the <code>api_spec.rb</code> and <code>api_validation_spec.rb</code> accordingly, we&rsquo;ll update RSpec&rsquo;s configuration.</p>

<p>Because the helper module is used by both specs groups, and both groups are made of request specs, we can configure RSpec 
to always include the module in any request spec. This is done by adding a line in the <code>rails_helper.rb</code> file, in 
the configuration block:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="c1"># …</span>
<span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">include</span> <span class="no">ApiHelpers</span><span class="p">,</span> <span class="ss">type: :request</span>
  <span class="c1"># …</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/rails_helper.rb
</figcaption></figure></div>

<p>However, for this module to be available, the file <code>support/api_helpers.rb</code> must first be required. The easiest way to do so
 is to tell RSpec to preemptively require all the files in the <code>/spec/support</code> directory, which is as easy as uncommenting 
a line in the generated <code>rails_helper.rb</code> file:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="c1"># …</span>
<span class="no">Dir</span><span class="p">[</span><span class="no">Rails</span><span class="p">.</span><span class="nf">root</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">'spec'</span><span class="p">,</span> <span class="s1">'support'</span><span class="p">,</span> <span class="s1">'**'</span><span class="p">,</span> <span class="s1">'*.rb'</span><span class="p">)].</span><span class="nf">sort</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span> <span class="p">}</span>
<span class="c1"># …</span>
</code></pre></div><figcaption>/spec/rails_helper.rb
</figcaption></figure></div>

<p>And now, instead of updating the <code>require</code> and the <code>include</code> instructions in the spec files, we can remove them 
altogether. For example, <code>api_spec.rb</code> now looks like this:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'public api'</span> <span class="k">do</span>
  <span class="c1"># …</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/requests/api_spec.rb
</figcaption></figure></div>

<p>Functionally, we haven&rsquo;t changed anything, but our <code>/spec</code> directory is much more idiomatic now, and we&rsquo;ve trimmed 
a little bit of boilerplate from our spec files. Besides, keeping things neat and tidy prevents all kinds of bugs.</p>

<h3 id="2-phrasing-code-here">2. Phrasing! (<a href="https://github.com/r3trofitted/pokebeep/tree/2_phrasing"><code>code here</code></a>)</h3>

<p>The main benefit of RSpec is arguably the ability to express your tests as <em>specifications</em>. I mean, it&rsquo;s in the name! You 
don&rsquo;t <em>have</em> to give your tests meaningful titles, as if each one was the description of a notable part of the system, 
but you lose half the value of RSpec if you don&rsquo;t. Which is why I love to run the suite with the option<br />
<code>--format=documentation</code>. When the specs are well named, you get a good understanding of the system; if they&rsquo;re not, you see it right away. 
Unfortunately, it is the case with the current output:</p>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">&gt;</span><span class="w"> </span>bin/rspec <span class="nt">-fd</span>
<span class="go">
public api
  generates summary based on beeps
  rounds presence hours to two decimal places
  discovers problematic date when there is no leave beep
  discovers problematic date when there is skip day beep

api validation
  when posting beep with wrong request params
    returns 400 status code
    returns 400 status code
    returns 400 status code
    returns 400 status code
    returns 400 status code
    returns 400 status code
    returns 400 status code
  when getting summary with wrong request params
    returns 400 status code
    returns 400 status code
    returns 400 status code

Finished in 0.04608 seconds (files took 0.35083 seconds to load)
14 examples, 0 failures
</span></code></pre></div></figure></div>

<p>The first part, about the public API, is not too bad; at least it reads properly. The part 
on the API validation, though, tells very little. Or rather, it tells very little <em>directly</em>. 
Indirectly, it hints that these tests were probably an after-thought, and because they read 
more like the truncated descriptions of unit tests, rather than integration tests, they sound 
like code smell. (Yes, programming can lead to synesthesia.)</p>

<p>Without changing their code, let&rsquo;s rename the specs so that the output reads better, and 
actually describes the behavior of the application, as a good specification document would.</p>

<p>When it comes to APIs, the best way to describe them is usually to go endpoint by endpoint. So 
let&rsquo;s start by grouping the examples by the endpoint they cover:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'public api'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:first_pokemon</span><span class="p">)</span> <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:second_pokemon</span><span class="p">)</span> <span class="p">{</span> <span class="mi">2</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s1">'generates summary based on beeps'</span> <span class="k">do</span>
    <span class="c1"># …</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s1">'rounds presence hours to two decimal places'</span> <span class="k">do</span>
    <span class="c1"># …</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/api_spec.rb (before)
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'public api'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:first_pokemon</span><span class="p">)</span> <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:second_pokemon</span><span class="p">)</span> <span class="p">{</span> <span class="mi">2</span> <span class="p">}</span>
  
  <span class="n">describe</span> <span class="s1">'GET /summaries/{pokemon_id}/{from}/{to}'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s1">'generates summary based on beeps'</span> <span class="k">do</span>
      <span class="c1"># …</span>
    <span class="k">end</span>
  
    <span class="n">it</span> <span class="s1">'rounds presence hours to two decimal places'</span> <span class="k">do</span>
      <span class="c1"># …</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/api_spec.rb (after)
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'api validation'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:now</span><span class="p">)</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span> <span class="p">}</span>

  <span class="n">context</span> <span class="s1">'when posting beep with wrong request params'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s1">'returns 400 status code'</span> <span class="k">do</span>
      <span class="c1"># …</span>
    <span class="k">end</span>
    
    <span class="c1"># …</span>
  <span class="k">end</span>
  
  <span class="n">context</span> <span class="s1">'when getting summary with wrong request params'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s1">'returns 400 status code'</span> <span class="k">do</span>
      <span class="c1"># …</span>
    <span class="k">end</span>

    <span class="c1"># …</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/api_validation_spec.rb (before)
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'api validation'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:now</span><span class="p">)</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span> <span class="p">}</span>
  
  <span class="n">describe</span> <span class="s1">'POST /beeps'</span> <span class="k">do</span>
    <span class="n">context</span> <span class="s1">'when posting beep with wrong request params'</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s1">'returns 400 status code'</span> <span class="k">do</span>
        <span class="c1"># …</span>
      <span class="k">end</span>
      
      <span class="c1"># …</span>
    <span class="k">end</span>
  <span class="k">end</span>
  
  <span class="n">describe</span> <span class="s1">'GET /summaries/{pokemon_id}/{from}/{to}'</span> <span class="k">do</span>
    <span class="n">context</span> <span class="s1">'when getting summary with wrong request params'</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s1">'returns 400 status code'</span> <span class="k">do</span>
        <span class="c1"># …</span>
      <span class="k">end</span>
    
      <span class="c1"># …</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/api_validation_spec.rb (after)
</figcaption></figure></div>

<p>A very small change, really, but it does improve the output:</p>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">&gt;</span><span class="w"> </span>bin/rspec <span class="nt">-fd</span>
<span class="go">
public api
  GET /summaries/{pokemon_id}/{from}/{to}
    generates summary based on beeps
    rounds presence hours to two decimal places
    discovers problematic date when there is no leave beep
    discovers problematic date when there is skip day beep

api validation
  POST /beeps
    when posting beep with wrong request params
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
  GET /summaries/{pokemon_id}/{from}/{to}
    when getting summary with wrong request params
      returns 400 status code
      returns 400 status code
      returns 400 status code

Finished in 0.04671 seconds (files took 0.51821 seconds to load)
14 examples, 0 failures
</span></code></pre></div></figure></div>

<p>Not only is this output closer to a decent specification, it also points out that our suite is not very well organized, 
since two different endpoints are featured in the same example group. More importantly, it also highlights holes in our 
test coverage: two endpoints are covered for validations, but only one when it comes to actual behavior. In other words: 
when we read these specs, we learn nothing about how the <code>POST /beeps</code> endpoint is supposed to work. And we have no 
reason to believe that it is tested.</p>

<p>To fix the first of these issues, let&rsquo;s move the examples around and replace the <code>api_spec.rb</code> and <code>api_validation_spec.rb</code> 
with two new ones, one per endpoint: <code>beeps_api_spec.rb</code> and <code>summaries_api_spec.rb</code>:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'Beeps API'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:now</span><span class="p">)</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s1">'POST /beeps'</span> <span class="k">do</span>
    <span class="n">context</span> <span class="s1">'when posting beep with wrong request params'</span> <span class="k">do</span>
      <span class="c1"># …</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/beeps_api_spec.rb
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'Summaries API'</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'GET /summaries/{pokemon_id}/{from}/{to}'</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:first_pokemon</span><span class="p">)</span> <span class="p">{</span> <span class="mi">1</span> <span class="p">}</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:second_pokemon</span><span class="p">)</span> <span class="p">{</span> <span class="mi">2</span> <span class="p">}</span>
  
    <span class="n">it</span> <span class="s1">'generates summary based on beeps'</span> <span class="k">do</span>
      <span class="c1"># …</span>
    <span class="k">end</span>
  
    <span class="c1"># …</span>
    
    <span class="n">context</span> <span class="s1">'when getting summary with wrong request params'</span> <span class="k">do</span>
      <span class="n">it</span> <span class="s1">'returns 400 status code'</span> <span class="k">do</span>
        <span class="c1"># …</span>
      <span class="k">end</span>
      
      <span class="c1"># …</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/summaries_api_spec.rb
</figcaption></figure></div>

<p>Once again, we&rsquo;ve just moved code around, but once again the output is improved:</p>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">&gt;</span><span class="w"> </span>bin/rspec <span class="nt">-fd</span>
<span class="go">
Summaries API
  GET /summaries/{pokemon_id}/{from}/{to}
    generates summary based on beeps
    rounds presence hours to two decimal places
    discovers problematic date when there is no leave beep
    discovers problematic date when there is skip day beep
    when getting summary with wrong request params
      returns 400 status code
      returns 400 status code
      returns 400 status code

Beeps API
  POST /beeps
    when posting beep with wrong request params
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code

Finished in 0.04657 seconds (files took 0.53198 seconds to load)
14 examples, 0 failures
</span></code></pre></div></figure></div>

<p>We&rsquo;ll deal with the absence (or not?) of tests for the <code>POST /beeps</code> endpoint a bit later; for now, let&rsquo;s get rid of 
the meaningless “returns 400 status code” repetition. The tests behind this sentence are useful; the issue is 
with their naming, because it doesn&rsquo;t explain what “wrong” means in each case. But this is easy to change, and thanks 
to the <code>#specify</code> alias for <code>#it</code>, the code can still read nicely, too:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'Summaries API'</span> <span class="k">do</span>
  <span class="n">describe</span> <span class="s1">'GET /summaries/{pokemon_id}/{from}/{to}'</span> <span class="k">do</span>  
    <span class="c1"># …</span>
    
    <span class="n">describe</span> <span class="s1">'validations'</span> <span class="k">do</span>
      <span class="n">specify</span> <span class="s1">'passing an invalid {from} parameter returns a 400 status code '</span> <span class="k">do</span>
        <span class="c1"># …</span>
      <span class="k">end</span>
      
      <span class="n">specify</span> <span class="s1">'passing an invalid {to} parameter returns a 400 status code'</span> <span class="k">do</span>
        <span class="c1"># …</span>
      <span class="k">end</span>
      
      <span class="n">specify</span> <span class="s1">'passing an invalid {pokemon_id} parameter returns a 400 status code'</span> <span class="k">do</span>
        <span class="c1"># …</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/summaries_api_spec.rb
</figcaption></figure></div>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">&gt;</span><span class="w"> </span>bin/rspec spec/requests/summaries_api_spec.rb <span class="nt">-fd</span> <span class="nt">--order</span><span class="o">=</span>random
<span class="go">
Randomized with seed 32383

Summaries API
  GET /summaries/{pokemon_id}/{from}/{to}
    rounds presence hours to two decimal places
    discovers problematic date when there is no leave beep
    generates summary based on beeps
    discovers problematic date when there is skip day beep
    validations
      passing an invalid {pokemon_id} parameter returns a 400 status code
      passing an invalid {to} parameter returns a 400 status code
      passing an invalid {from} parameter returns a 400 status code

Finished in 0.04017 seconds (files took 0.52537 seconds to load)
7 examples, 0 failures

Randomized with seed 32383
</span></code></pre></div></figure></div>

<p>(Quick aside: note that I&rsquo;ve kept a common group for the tests about validation, aptly named “validations”, even if it 
doesn&rsquo;t add much to the complete specification. That is because, otherwise, the validations specs could end up mixed up 
with the other specs in the output when the suite is run in random order<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>, and that wouldn&rsquo;t read well.)</p>

<p>Always work from the outside to the inside: now that everything is well organized and well labeled, we can start improving the code itself.</p>

<h3 id="3-danger-zone-code-here">3. Danger Zone (<a href="https://github.com/r3trofitted/pokebeep/tree/3_danger_zone"><code>code here</code></a>)</h3>

<p>At its core, a test is made up of 4 phases: setup, execution, assertion and teardown. (The names may vary but the 
idea is always the same.) The setup and/or teardown phases are often skipped or hidden away, but a test without clear 
execution and assertion phases is a strong code smell. At best, it is probably a case of excessive abstraction; at 
worst, it is a case of excessive abstraction which hides an error in the test.</p>

<p>Looking at the specs for the Beeps API, this is exactly what we see: they have no setup, no teardown, but above all no 
assertion phase. In code terms, there is no call to <code>#expect</code>:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'Beeps API'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:now</span><span class="p">)</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s1">'POST /beeps'</span> <span class="k">do</span>
    <span class="n">specify</span> <span class="s1">'posting without any parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({})</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting without a :pokemon_id parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting without a :kind parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting without a :timestamp parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="kp">nil</span> <span class="p">})</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting with an invalid :pokemon_id parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="s1">'bad'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting with an invalid :kind parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: </span><span class="s1">'bad'</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting with an invalid :timestamp parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'bad'</span> <span class="p">})</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/requests/beeps_api_spec.rb
</figcaption></figure></div>

<p>At first, the specs may seem to work, because there is no action in the controller, which triggers an error, so the tests 
are red. But even an rigged implementation of <code>BeepsController#save</code> would be enough to make the specs pass, when they 
shouldn&rsquo;t:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BeepsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">save</span> <span class="o">=</span> <span class="n">head</span><span class="p">(</span><span class="ss">:ok</span><span class="p">)</span> <span class="c1"># SLIME</span>
<span class="k">end</span>
</code></pre></div><figcaption>/app/controllers/beeps_controller.rb
</figcaption></figure></div>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">&gt;</span><span class="w"> </span>bin/rspec spec/requests/beeps_api_spec.rb
<span class="c">.......
</span><span class="go">
Finished in 0.02176 seconds (files took 0.35128 seconds to load)
7 examples, 0 failures
</span></code></pre></div></figure></div>

<p>We need to add proper assertions to ensure that we are actually testing what we claim to be testing:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'Beeps API'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:now</span><span class="p">)</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s1">'POST /beeps'</span> <span class="k">do</span>
    <span class="n">specify</span> <span class="s1">'posting without any parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting without a :pokemon_id parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting without a :kind parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting without a :timestamp parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="kp">nil</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting with an invalid :pokemon_id parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="s1">'bad'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting with an invalid :kind parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: </span><span class="s1">'bad'</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting with an invalid :timestamp parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post_beep</span><span class="p">({</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'bad'</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/request/beeps_api_spec.rb
</figcaption></figure></div>

<p>Now the specs fail, and we can replace our slime with a proper implementation. (I won&rsquo;t show any here, since we&rsquo;re 
focusing on the tests.)</p>

<h3 id="4-i-swear-to-god-i-had-something-for-this-code-here">4. I swear to God, I had something for this. (<a href="https://github.com/r3trofitted/pokebeep/tree/4_i_had_something"><code>code here</code></a>)</h3>

<p>At this point, we&rsquo;ve dealt with the strongest code smells or messiness. But I&rsquo;d like to see if we can <em>remove</em> 
code, especially if we are to <em>add</em> some later. (After all, by tidying up, we&rsquo;ve apparently revealed missing specs 
for the Beeps API). Helpers are good candidates for such trimming, because, as a codebase evolves, they can easily stop 
being used, and yet they&rsquo;re rarely removed. Let&rsquo;s look at those we have.</p>

<ul>
  <li><code>#post_beep</code> makes a call to the <code>POST /beeps</code> endpoint.</li>
  <li><code>#get_summary</code> makes a call to the <code>GET /summaries</code> endpoint.</li>
  <li><code>#summary</code> makes a call to the <code>GET /summaries</code> endpoint, makes an assertion against the response, and parses the 
received payload.</li>
  <li><code>#given_beep</code> makes a call to the <code>POST /beeps</code> endpoint, and makes an assertion against the response.</li>
</ul>

<p>The single responsibility principle doesn&rsquo;t always apply to functions, but it&rsquo;s still a good rule of thumb. On this 
account, <code>#summary</code> and <code>#given_beep</code> are suspicious; let&rsquo;s put them aside for later and consider the simpler <code>#post_beep</code> 
and <code>#get_summary</code> helpers instead.</p>

<p>Interestingly, these methods do very little; but at the same time, <em>what</em> they do is rather significant, since calling 
the API is usually the heart of the “execution” phase of an API test. For these two reasons, I&rsquo;d like to get rid of 
them: they don&rsquo;t bring anything, but add a layer of indirection to our tests, and they do it in the exception phase, 
were clarity is the most important.</p>

<p>Because these helpers do so little, removing them is very easy:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="c1"># …</span>
<span class="n">specify</span> <span class="s1">'posting without any parameter returns a 400 status code'</span> <span class="k">do</span>
  <span class="n">post_beep</span><span class="p">({})</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
<span class="k">end</span>
<span class="c1"># …</span>
</code></pre></div><figcaption>/spec/requests/beeps_api_spec.rb (before)
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="c1"># …</span>
<span class="n">specify</span> <span class="s1">'posting without any parameter returns a 400 status code'</span> <span class="k">do</span>
  <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{})</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
<span class="k">end</span>
<span class="c1"># …</span>
</code></pre></div><figcaption>/spec/requests/beeps_api_spec.rb (after)
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="c1"># …</span>
<span class="n">specify</span> <span class="s1">'passing an invalid {from} parameter returns a 400 status code '</span> <span class="k">do</span>
  <span class="n">get_summary</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">'bad'</span><span class="p">,</span> <span class="s1">'2019-01-01'</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span>
<span class="k">end</span>
<span class="c1"># …</span>
</code></pre></div><figcaption>/spec/requests/summaries_api_spec.rb (before)
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="c1"># …</span>
<span class="n">specify</span> <span class="s1">'passing an invalid {from} parameter returns a 400 status code '</span> <span class="k">do</span>
  <span class="n">get</span><span class="p">(</span><span class="s1">'/summaries/1/bad/2019-01-01'</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span>
<span class="k">end</span>
<span class="c1"># …</span>
</code></pre></div><figcaption>/spec/requests/summaries_api_spec.rb (after)
</figcaption></figure></div>

<p>To be fair, one could argue that the code that calls the Summaries API is a bit <em>less</em> legible than when going through 
the <code>get_summary</code> helper, because the parameters stand out less when put inside the URL. It is a rather subjective 
tradeoff, and I could understand how a team would prefer the indirection of helper. However, <em>I</em> prefer to get rid of it. 
Less code, less indirection, less chance of a bug.</p>

<h3 id="5-the-cumulative-hangover-will-kill-me-code-here">5. The cumulative hangover will kill me. (<a href="https://github.com/r3trofitted/pokebeep/tree/5_hangover"><code>code here</code></a>)</h3>

<p>Now that we&rsquo;ve dealt with the easy helpers, let&rsquo;s look at the two suspicious ones – those that do more than one single 
thing, <code>#summary</code> and <code>#given_beep</code>.</p>

<p>The problem with both is that, among their multiple responsibilities, they do assertions. It&rsquo;s actually a double issue:</p>

<ul>
  <li>Like with the expectations in the preceding helpers, the assertions are so central to a test that they shouldn&rsquo;t be 
hidden away in a helper.</li>
  <li>These assertions are mixed with other things, are thus executed outside of the assertion phase.</li>
</ul>

<p>You could argue that the 4-phases structure is too rigid, or that adding <em>extra</em> assertions when doing something is like 
a freebie, a bonus protection against regressions. I disagree, especially with the later. Having assertions outside of 
the assertion phase, or unrelated to whatever the test is about, makes the test harder to understand. And because they 
are so fundamental to the longevity of a system, tests need to be very easy to understand. That is true as soon as the 
test is run; a failure message unrelated to the test case is perplexing and breaks the flow. Compare for example these 
two failures on the same test:</p>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">&gt;</span><span class="w"> </span>bin/rspec spec/requests/summaries_api_spec.rb:24 <span class="nt">-fd</span>
<span class="gp">Run options: include {:locations=&gt;</span><span class="o">{</span><span class="s2">"./spec/requests/summaries_api_spec.rb"</span><span class="o">=&gt;[</span>24]<span class="o">}}</span>
<span class="go">
Summaries API
  GET /summaries/{pokemon_id}/{from}/{to}
    rounds presence hours to two decimal places (FAILED - 1)

Failures:

  1) Summaries API GET /summaries/{pokemon_id}/{from}/{to} rounds presence hours to two decimal places
     Failure/Error: expect(summary[:presence_hours]).to eq(7.83)
     
       expected: 7.83
            got: 7.833611111111111
     
       (compared using ==)
</span><span class="gp">     #</span><span class="w"> </span>./spec/requests/summaries_api_spec.rb:30:in <span class="sb">`</span>block <span class="o">(</span>3 levels<span class="o">)</span> <span class="k">in</span> &lt;top <span class="o">(</span>required<span class="o">)&gt;</span><span class="s1">'
</span><span class="go">
Finished in 0.03138 seconds (files took 0.49168 seconds to load)
1 example, 1 failure
</span></code></pre></div></figure></div>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">&gt;</span><span class="w"> </span>bin/rspec spec/requests/summaries_api_spec.rb:24 <span class="nt">-fd</span>
<span class="gp">Run options: include {:locations=&gt;</span><span class="o">{</span><span class="s2">"./spec/requests/summaries_api_spec.rb"</span><span class="o">=&gt;[</span>24]<span class="o">}}</span>
<span class="go">
Summaries API
  GET /summaries/{pokemon_id}/{from}/{to}
    rounds presence hours to two decimal places (FAILED - 1)

Failures:

  1) Summaries API GET /summaries/{pokemon_id}/{from}/{to} rounds presence hours to two decimal places
     Failure/Error: expect(response.status).to eq(200)
     
       expected: 200
            got: 400
     
       (compared using ==)
</span><span class="gp">     #</span><span class="w"> </span>./spec/support/api_helpers.rb:5:in <span class="sb">`</span>given_beep<span class="s1">'
</span><span class="gp">     #</span><span class="w"> </span><span class="s1">./spec/requests/summaries_api_spec.rb:25:in `block (3 levels) in &lt;top (required)&gt;'</span>
<span class="go">
Finished in 0.03106 seconds (files took 0.48556 seconds to load)
1 example, 1 failure
</span></code></pre></div></figure></div>

<p>In the first case, there is a direct relation between the expected result (“rounds presence hours”) and the error 
(“expected 7.83, got 7.833611111111111”); in the second, the failure is at the HTTP response level, not the rounding 
of a value.</p>

<p>The <code>#given_beep</code> method is meant to be used to set up the test, preparing the necessary data in the setup phase. So 
let&rsquo;s remove anything that is not related to this. In fact, since we <strong>don&rsquo;t</strong> want to test the API during this phase, 
there is no need to even use it. We can create the data directly instead.</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">ApiHelpers</span>
  <span class="k">def</span> <span class="nf">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="no">Time</span><span class="p">.</span><span class="nf">zone</span><span class="p">.</span><span class="nf">now</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">to_unix</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
    <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{</span> <span class="n">pokemon_id</span><span class="p">:,</span> <span class="ss">timestamp: </span><span class="n">t</span><span class="p">,</span> <span class="ss">kind: </span><span class="p">})</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="c1"># …</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/support/api_helpers.rb (before)
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">ApiHelpers</span>
  <span class="k">def</span> <span class="nf">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="no">Time</span><span class="p">.</span><span class="nf">zone</span><span class="p">.</span><span class="nf">now</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
    <span class="no">Beep</span><span class="p">.</span><span class="nf">create!</span> <span class="n">pokemon_id</span><span class="p">:,</span> <span class="n">kind</span><span class="p">:,</span> <span class="ss">timestamp: </span><span class="n">to_unix</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="c1"># …</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/support/api_helpers.rb (after)
</figcaption></figure></div>

<p>Following the same principle, the <code>#summary</code> helper can be stripped of its call to <code>#expect</code>. However, there is a 
difference with <code>#given_beep</code>: <code>#summary</code> is used in the execution phase, and as we&rsquo;ve seen above, it can be better to 
avoid hiding away the job done during this phase behind an indirection. Like with the <code>#get_summary</code> helper, it&rsquo;s hard 
for me to be very categorical; both styles have advantages. However, one thing is certain: if my team opted to keep the 
helper, I would require it to have a better name that explicitly conveys the idea that the endpoint is called and its 
response parsed. So here would be the two options:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="n">it</span> <span class="s1">'rounds presence hours to two decimal places'</span> <span class="k">do</span>
  <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="n">first_pokemon</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-01 08:10:00:050'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
  <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="n">first_pokemon</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-01 16:00:01:070'</span><span class="p">,</span> <span class="ss">kind: :out</span><span class="p">)</span>

  <span class="n">get</span><span class="p">(</span><span class="s2">"/summaries/</span><span class="si">#{</span><span class="n">pokemon_id</span><span class="si">}</span><span class="s2">/2019-05-01/2019-05-01"</span><span class="p">)</span>
  <span class="n">summary</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">).</span><span class="nf">symbolize_keys</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">summary</span><span class="p">[</span><span class="ss">:presence_hours</span><span class="p">]).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mf">7.83</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div><figcaption>removing the helper
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="n">it</span> <span class="s1">'rounds presence hours to two decimal places'</span> <span class="k">do</span>
  <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="n">first_pokemon</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-01 08:10:00:050'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
  <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="n">first_pokemon</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-01 16:00:01:070'</span><span class="p">,</span> <span class="ss">kind: :out</span><span class="p">)</span>

  <span class="n">summary</span> <span class="o">=</span> <span class="n">parsed_summary_from_api</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="n">first_pokemon</span><span class="p">,</span> <span class="ss">from: </span><span class="s1">'2019-05-01'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'2019-05-01'</span><span class="p">)</span>

  <span class="n">expect</span><span class="p">(</span><span class="n">summary</span><span class="p">[</span><span class="ss">:presence_hours</span><span class="p">]).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mf">7.83</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div><figcaption>keeping the helper
</figcaption></figure></div>

<p>Personally, I chose to go with the former. (In part because I couldn&rsquo;t find the helper&rsquo;s name clear enough.)</p>

<h3 id="6-rampage-code-here">6. Rampage! (<a href="https://github.com/r3trofitted/pokebeep/tree/6_rampage"><code>code here</code></a>)</h3>

<p>We&rsquo;ve reorganized the tests (files included), removed cruft and boilerplate, and fixed conceptual errors in some of 
the tests. Before taking a step back and looking at our renovated suite, let&rsquo;s clean up a bit:</p>

<ul>
  <li>The <code>#to_unix</code> helper is only used once now, so it can be removed and it&rsquo;s relevant code used directly instead.</li>
  <li>Since <code>#given_beep</code> is the only helper method left, and it only used in a single group, it can be moved there, and 
the whole support file can be deleted. (To be honest, we could also get rid of the helper altogether.)</li>
  <li>In the specs for the Summaries API, all the test use the same value for the <code>pokemon_id</code> parameter, so none of 
the two <code>let</code> calls (<code>let(:first_pokemon</code> and <code>let(:second_pokemon</code>) are of any use and can be deleted, too.</li>
  <li>Some of the specs for the Summaries API are about a portion only of the summary, so there is no need to 
make assertions against the whole JSON object.</li>
  <li>The canonical file structure of RSpec Rails allows the <code>/requests</code> directory to be named <code>/api</code> instead, which 
is fitting here, so we&rsquo;ll rename it.</li>
</ul>

<p>In the end, we&rsquo;re back to a vanilla RSpec configuration and a suite composed of two files, one for each endpoint:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'Beeps API'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:now</span><span class="p">)</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s1">'POST /beeps'</span> <span class="k">do</span>
    <span class="n">specify</span> <span class="s1">'posting without any parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting without a :pokemon_id parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{</span> <span class="ss">pokemon_id: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting without a :kind parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting without a :timestamp parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="kp">nil</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting with an invalid :pokemon_id parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{</span> <span class="ss">pokemon_id: </span><span class="s1">'bad'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting with an invalid :kind parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: </span><span class="s1">'bad'</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">specify</span> <span class="s1">'posting with an invalid :timestamp parameter returns a 400 status code'</span> <span class="k">do</span>
      <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'bad'</span> <span class="p">})</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/api/beeps_api_spec.rb
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'Summaries API'</span> <span class="k">do</span>
  <span class="k">def</span> <span class="nf">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="no">Time</span><span class="p">.</span><span class="nf">zone</span><span class="p">.</span><span class="nf">now</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
    <span class="no">Beep</span><span class="p">.</span><span class="nf">create!</span> <span class="n">pokemon_id</span><span class="p">:,</span> <span class="n">kind</span><span class="p">:,</span> <span class="ss">timestamp: </span><span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">timestamp</span><span class="p">).</span><span class="nf">to_i</span>
  <span class="k">end</span>
  
  <span class="n">describe</span> <span class="s1">'GET /summaries/{pokemon_id}/{from}/{to}'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s1">'generates summary based on beeps'</span> <span class="k">do</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-01 08:00'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-01 16:00'</span><span class="p">,</span> <span class="ss">kind: :out</span><span class="p">)</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-02 08:00'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-02 16:00'</span><span class="p">,</span> <span class="ss">kind: :out</span><span class="p">)</span>
  
      <span class="n">get</span><span class="p">(</span><span class="s2">"/summaries/1/2019-05-01/2019-05-30"</span><span class="p">)</span>
      <span class="n">summary</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">).</span><span class="nf">symbolize_keys</span>
  
      <span class="n">expect</span><span class="p">(</span><span class="n">summary</span><span class="p">).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">({</span>
                                  <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span>
                                  <span class="ss">from: </span><span class="s1">'2019-05-01'</span><span class="p">,</span> <span class="ss">to: </span><span class="s1">'2019-05-30'</span><span class="p">,</span>
                                  <span class="ss">presence_hours: </span><span class="mf">16.0</span><span class="p">,</span>
                                  <span class="ss">problematic_dates: </span><span class="p">[]</span>
                                <span class="p">})</span>
    <span class="k">end</span>
  
    <span class="n">it</span> <span class="s1">'rounds presence hours to two decimal places'</span> <span class="k">do</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-01 08:10:00:050'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-01 16:00:01:070'</span><span class="p">,</span> <span class="ss">kind: :out</span><span class="p">)</span>
  
      <span class="n">get</span><span class="p">(</span><span class="s2">"/summaries/1/2019-05-01/2019-05-01"</span><span class="p">)</span>
      <span class="n">summary</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">).</span><span class="nf">symbolize_keys</span>
  
      <span class="n">expect</span><span class="p">(</span><span class="n">summary</span><span class="p">[</span><span class="ss">:presence_hours</span><span class="p">]).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mf">7.83</span><span class="p">)</span>
    <span class="k">end</span>
  
    <span class="n">it</span> <span class="s1">'discovers problematic date when there is no leave beep'</span> <span class="k">do</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-01 08:00'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-02 08:00'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-02 16:00'</span><span class="p">,</span> <span class="ss">kind: :out</span><span class="p">)</span>
      
      <span class="n">get</span><span class="p">(</span><span class="s2">"/summaries/1/2019-05-01/2019-05-30"</span><span class="p">)</span>
      <span class="n">summary</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">).</span><span class="nf">symbolize_keys</span>
  
      <span class="n">expect</span><span class="p">(</span><span class="n">summary</span><span class="p">).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">(</span><span class="ss">presence_hours: </span><span class="mf">8.0</span><span class="p">,</span> <span class="ss">problematic_dates: </span><span class="p">[</span><span class="s1">'2019-05-01'</span><span class="p">])</span>
    <span class="k">end</span>
  
    <span class="n">it</span> <span class="s1">'discovers problematic date when there is skip day beep'</span> <span class="k">do</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-01 08:00'</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">)</span>
      <span class="n">given_beep</span><span class="p">(</span><span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="s1">'2019-05-02 16:00'</span><span class="p">,</span> <span class="ss">kind: :out</span><span class="p">)</span>
  
      <span class="n">get</span><span class="p">(</span><span class="s2">"/summaries/1/2019-05-01/2019-05-30"</span><span class="p">)</span>
      <span class="n">summary</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">).</span><span class="nf">symbolize_keys</span>
  
      <span class="n">expect</span><span class="p">(</span><span class="n">summary</span><span class="p">).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">(</span><span class="ss">presence_hours: </span><span class="mf">0.0</span><span class="p">,</span> <span class="ss">problematic_dates: </span><span class="p">[</span><span class="s1">'2019-05-01'</span><span class="p">,</span> <span class="s1">'2019-05-02'</span><span class="p">])</span>
    <span class="k">end</span>
    
    <span class="n">describe</span> <span class="s2">"validations"</span> <span class="k">do</span>
      <span class="n">specify</span> <span class="s1">'passing an invalid {from} parameter returns a 400 status code '</span> <span class="k">do</span>
        <span class="n">get</span><span class="p">(</span><span class="s1">'/summaries/1/bad/2019-01-01'</span><span class="p">)</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span>
      <span class="k">end</span>
    
      <span class="n">specify</span> <span class="s1">'passing an invalid {to} parameter returns a 400 status code'</span> <span class="k">do</span>
        <span class="n">get</span><span class="p">(</span><span class="s1">'/summaries/1/2019-01-01/bad'</span><span class="p">)</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span>
      <span class="k">end</span>
    
      <span class="n">specify</span> <span class="s1">'passing an invalid {pokemon_id} parameter returns a 400 status code'</span> <span class="k">do</span>
        <span class="n">get</span><span class="p">(</span><span class="s1">'/summaries/bad/2019-01-01/2019-02-02'</span><span class="p">)</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/api/summaries_api_spec.rb
</figcaption></figure></div>

<p>Running the specs, we have a nice specification of the API:</p>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">&gt;</span><span class="w"> </span>bin/rspec <span class="nt">-fd</span>
<span class="go">
Beeps API
  POST /beeps
    posting without any parameter returns a 400 status code
    posting without a :pokemon_id parameter returns a 400 status code
    posting without a :kind parameter returns a 400 status code
    posting without a :timestamp parameter returns a 400 status code
    posting with an invalid :pokemon_id parameter returns a 400 status code
    posting with an invalid :kind parameter returns a 400 status code
    posting with an invalid :timestamp parameter returns a 400 status code

Summaries API
  GET /summaries/{pokemon_id}/{from}/{to}
    generates summary based on beeps
    rounds presence hours to two decimal places
    discovers problematic date when there is no leave beep
    discovers problematic date when there is skip day beep
    validations
      passing an invalid {from} parameter returns a 400 status code
      passing an invalid {to} parameter returns a 400 status code
      passing an invalid {pokemon_id} parameter returns a 400 status code

Finished in 0.04601 seconds (files took 0.53933 seconds to load)
14 examples, 0 failures
</span></code></pre></div></figure></div>

<p>Overall, I&rsquo;d say that this we&rsquo;ve done a pretty good job at turning something that just worked into something that 
is right. However, there is one last thing that we can do, and that is adding missing tests.</p>

<h3 id="7-youre-not-my-supervisor-code-here">7. You&rsquo;re not my supervisor! (<a href="https://github.com/r3trofitted/pokebeep/tree/7_supervisor"><code>code here</code></a>)</h3>

<p>The specs for the Summaries API cover both its correct use (including edge cases) and its incorrect use, under the 
umbrella of “validations”. This is good. These specs are technically high-level integration tests, so I would advice 
to stick to testing the happy path, but because there are no low-level unit tests for the other cases, doing a bit 
more is fine. However, the specs for the Beeps API only cover the incorrect uses – no happy path, only the sad ones.</p>

<p>It wasn&rsquo;t <em>that</em> bad so far because the happy path was sort of tested accidentally, through the misplaced assertion in 
the <code>#given_beep</code> helper. Now that we&rsquo;ve remove this, there are no guardrails to prevent us from breaking the API 
and not realizing it. But adding such a spec is very easy:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rails_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s1">'Beeps API'</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:now</span><span class="p">)</span> <span class="p">{</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_i</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s1">'POST /beeps'</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s1">'creates a Beep'</span> <span class="k">do</span>
      <span class="n">expect</span> <span class="p">{</span>
        <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{</span> <span class="ss">pokemon_id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">kind: :in</span><span class="p">,</span> <span class="ss">timestamp: </span><span class="n">now</span> <span class="p">})</span>
      <span class="p">}.</span><span class="nf">to</span> <span class="n">change</span> <span class="p">{</span> <span class="no">Beep</span><span class="p">.</span><span class="nf">count</span> <span class="p">}.</span><span class="nf">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:ok</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="n">describe</span> <span class="s1">'validations'</span> <span class="k">do</span>
      <span class="n">specify</span> <span class="s1">'posting without any parameter returns a 400 status code'</span> <span class="k">do</span>
        <span class="n">post</span><span class="p">(</span><span class="s1">'/beeps'</span><span class="p">,</span> <span class="ss">params: </span><span class="p">{})</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_http_status</span><span class="p">(</span><span class="ss">:bad_request</span><span class="p">)</span>
      <span class="k">end</span>
      <span class="c1"># …</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>/spec/api/beeps_api_spec.rb
</figcaption></figure></div>

<p>Apart from wrapping the validation specs in a <code>describe</code> block for readability&rsquo;s sake when running the suite in random 
order, we&rsquo;ve added a single test for the API&rsquo;s happy path. Note the unusual look of this test; because we&rsquo;re using 
the <a href="http://rspec.info/features/3-12/rspec-expectations/built-in-matchers/change/"><code>#change</code> matcher</a>, the code for the 
execution phase is somehow sandwiched between assertions, but there are still two distinct phases.</p>

<p>This test is also notable for another thing: even though it is technically high-level, we&rsquo;re making a low-level 
assertion, checking directly the database instead of going only through the API. I find this infringement of the 
Orthodoxy of the Test Pyramid justified here, since we have no lower-level tests anyway. YMMV.</p>

<p>And that&rsquo;s a wrap! Polishing is fun and we could keep doing it (for example by introducing unit tests to reduce the 
surface area of the request specs), but good enough if fine, and in real life, our time would probably be best spent 
somewhere else. So let&rsquo;s move on, and enjoy our descriptive, exhaustive and yet lean specs!</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>With one exception.&nbsp;<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Or kindly lead the PR author towards these fixes without directly <em>asking</em> for them.&nbsp;<a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><em>&ldquo;RSpec Rails provides thoughtfully selected features to encourage good testing practices, but there’s no “right” 
  way to do it. Ultimately, it’s up to you to decide how your test suite will be composed.&rdquo;</em><br />
  (<a href="https://github.com/rspec/rspec-rails#what-tests-should-i-write">https://github.com/rspec/rspec-rails#what-tests-should-i-write</a>)&nbsp;<a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>Well, <em>kinda</em>. No data will go through the network, but the application will behave exactly as if.&nbsp;<a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>Which should always be the case, by the way.&nbsp;<a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/2023/11/06/you-don-t-need-services-whatever-this-word-means.html</id>
      <title>You don&#39;t need services (whatever this word means)</title>
      <updated>2023-11-06T13:27:00+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/2023/11/06/you-don-t-need-services-whatever-this-word-means.html" />

      <published>2023-11-06T13:27:00+01:00</published>
      <content type="html">
        <![CDATA[<p>Last Sunday, I had the pleasure to attend one of <a href="https://www.codewithjason.com">Jason Swett</a>&rsquo;s online meetups. This 
time, Jason had put his consultant hat on, and was helping a cheerful developer, Duncan, fix his app. Having played 
the role of the consultant myself quite often, watching someone else&rsquo;s approach was really interesting, so thank you 
Jason for this opportunity.</p>

<p>However, even more interesting was Duncan&rsquo;s problem, and tentative solution. The Rails app he works on has become a 
bit too big, convoluted, a suffers from performance issues. To remedy this, Duncan and his teammates have started 
extracting pieces of this monoliths to services.</p>

<p>If you know me, you know that I tend to starting ranting when I hear the word <em>service</em>. Years of misplaced hype have 
drained it of all meaning, but it is still everywhere – and, to me, its simple use is often a red flag. I&rsquo;ll keep the 
rant for another post, but let&rsquo;s take a moment to consider that, in Duncan&rsquo;s case like in many others, “introducing 
services to a Rails app” meant two different things:</p>

<ul>
  <li>Extracting pieces of logic from controllers and/or models<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> to another category of objects.</li>
  <li>Extracting whole features to other applications.</li>
</ul>

<p>In my opinion, you very rarely need to do either one of these things, let alone both. Whatever your problem is, 
introducing services is probably not the solution; in fact, it could make things even worse, while distracting you from 
fixing the <em>real</em> issues you&rsquo;re facing.</p>

<h3 id="services-as-a-category-of-objects">Services as a category of objects</h3>

<p>Rails&rsquo; decision to organize files by their role in the MVC pattern was already critized by people 
smarter than me <a href="https://youtu.be/WpkDN78P884">11 years ago</a>, but honestly I&rsquo;m personally fine with the layout 
of the <code>/app</code> directory. However, I do believe that it trips newcomers up, by giving the impression that an object&rsquo;s 
role in the system is extremely significant, and by conflating <em>role</em> and <em>type</em>. It makes you think in terms of 
<em>place in the filesystem</em>, instead of <em>responsibilities in the running system</em>. The folder in which the source file 
for an object doesn&rsquo;t matter; what matters is what the object does, and what it is in charge of. It&rsquo;s like job titles: 
they mean little, so don&rsquo;t obsess over them.</p>

<p>As an app grows, it does more and more, which means that there are more and more responsibilities to hand over to the 
objects in its system. The natural tendency is to hand these extra responsibilities to the current objects in the 
architecture, but then they become bigger, and so do their files. We tell developers to keep their controllers 
thin, so they feed the extra stuff to the models – but then we tell them that the models should be thin, too. It&rsquo;s a 
conundrum when the only two directories reasonably available are <code>app/controllers</code> and <code>app/models</code>; the natural solution 
is to add a new directory, for a new role: <code>app/services</code>. And now you can have bloated objects with fuzzy 
responsibilities, but feel good about it.</p>

<p>The problem here is not that a new directory is added; it&rsquo;s that the underlying issue is not solved, only hidden behind 
a small indirection. And now you have an hybrid architecture, an MSVC chimera that goes against the conventions of 
a Rails app. Which is morally fine, but throws away the benefits of the convention-over-configuration principle. You 
don&rsquo;t <em>have</em> to stay on the rails, but if you don&rsquo;t, you&rsquo;d better know what you&rsquo;re doing; and if you&rsquo;re blindly going for 
services, you probably don&rsquo;t.</p>

<p>Now, there are other justifications for introducing “service objects” into a Rails codebase, but I&rsquo;ll ignore them since 
I&rsquo;m already three paragraphs in, and my advice is still the same for all of them: <strong>consider your object a simple model</strong>. 
Not all models in a Rails app have to be ActiveRecord models; the definition of model has nothing to do with the 
persistence in a database. In fact, by default, everything <em>is</em> a model. If your new object has no responsibility 
related to the rendering, the routing, or the processing of an incoming request for a resource, then it is a model. Plain 
and simple. Sometimes models need to store their data, sometimes they don&rsquo;t, but as long as they are in charge of 
some business domain, they&rsquo;re models.</p>

<p>Keeping in mind that everything is a model unless it&rsquo;s a view or a controller<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> is not (only) nitpicking on semantics; 
it avoids the trap of letting a file&rsquo;s name skew the role we give to the object it defines. If anything is a model, 
then an object being a model doesn&rsquo;t give you, the developer, any misleading hint on the responsibilities to give it. 
You cannot just cram in random procedural code and feel confident in your architecture because your new object implements 
a <code>.call</code> method.</p>

<p>In other words: keeping controllers and models <em>thin</em> is a shortcut for <em>keeping them focused on a single responsibility</em>, 
which is a shortcut for <em>keeping them focused on exposing or embodying a single resource</em>. When controllers and/or models 
get fat, it usually means that somewhere, a new resource is trying to emerge; displacing the extra weight to a service 
object alleviates the symptom but prevents this new resource to emerge.</p>

<h3 id="services-as-splinters-of-a-monolith">Services as splinters of a monolith</h3>

<p>When I don&rsquo;t hear teams talking about “service” as in <em>service layer</em>, it is usually in “<em>micro-service</em>”<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>. The idea 
here is to remove a whole functionality of the application and reimplement it in a different application, which will be 
called instead. Basically, it&rsquo;s trading complexity within a single application for complexity within a whole system, 
with all the complications that come with replacing methods calls by HTTP requests.</p>

<p>Interestingly, the initial rationale for this expensive design choice is performance, or rather <em>scalability</em>. The idea 
is that, if your application is split into autonomous services, then the computing resources of the whole system could 
be allocated more efficiently. If users suffer bad performance when authenticating but none after that, then you can 
add more servers to the authentication service. This makes perfect sense – but it is a much rarer kind of issue than you 
think, and you&rsquo;ll probably never encounter it. And even if you can pinpoint performance-drowning features in your 
Rails monolith, but cannot fix the issue through code, I&rsquo;m confident that you can afford to scale vertically the 
whole app anyways.</p>

<p>In my experience – and in Duncan&rsquo;s presentation of the design choices – the rationale for services quickly shifts once 
the decision has been made to introduce them. It&rsquo;s less about performance, and more about cooperation and onboarding. 
Splitting the architecture leads to splitting the codebase, and smaller codebases are easier to comprehend, especially 
for newcomers. Which, once again, is technically true, but comes with at a significant cost. Because, most of the times, 
you need every developer to understand the whole system anyways – especially if you didn&rsquo;t manage to put correct 
boundaries between the services. Yes, the codebase any given person will be working on at any given time will be 
smaller, but the cognitive load will probably not be reduced by much, because <em>other</em> codebases will have to be kept 
in mind. This is certainly not true for very large teams working on very large applications, but chances are that you&rsquo;re 
not that big. And even then, <a href="https://stackshare.io/shopify/shopify">you don&rsquo;t need to split your Rails monolith</a>.</p>

<p>However, there is a third benefit that a team can gain from splitting a Rails monolith to services. Not performance, 
and not comprehensibility: comfort. Developers are people, and people have preferences – strong preferences, sometimes. 
Extracting a feature to a service opens the door to replacing a tech stack with another, piece by piece. Once again, 
this is paying a very high cost, but this time what you&rsquo;re buying is basically HR. Is this wise? Is this viable? I would 
say “probably not”, but then again, I&rsquo;m not trying to hire developers or keep them from switching ship on a tech ocean 
where the winds of hype blow strong.</p>

<h3 id="railways-have-no-service-areas">Railways have no service (areas)</h3>

<p>I may be wrong, but listening to Duncan, I felt like this third motivation for introducing services – a certain 
discomfort with Rails – was bigger than he himself realized. And, quite frankly, this would be the best reason 
for going this route, considering that this is a volunteers project. It&rsquo;s hard to work on something when you 
don&rsquo;t especially like it, or the tools you have to use, and it&rsquo;s even more true when you&rsquo;re not payed to do so. But, still: 
when it comes to Rails, if you enjoy it, then you&rsquo;ll probably enjoy it even more if you restrain from introducing 
services, be it as a layer or as a system architecture.</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>In the code that Duncan showed us, it was from a controller, but I&rsquo;ve often seen services built from models.&nbsp;<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Or a job, a channel, a mailer or a mailbox… Let&rsquo;s stick to the M, V and C, ok?&nbsp;<a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>More and more, it is in “<em>macro-service</em>”; please don&rsquo;t get me started on this.&nbsp;<a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/blog/2023/11/05/humility-check.html</id>
      <title>Humility check</title>
      <updated>2023-11-05T21:12:00+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/2023/11/05/humility-check.html" />

      <published>2023-11-05T21:12:00+01:00</published>
      <content type="html">
        <![CDATA[<p>I consider myself a solid developer, especially with Ruby and Rails. After all, I&rsquo;ve been writing code and 
building systems for more than twenty years now. However, I&rsquo;m weary of becoming complacent, or even worse, 
overestimating abilities that would be declining without me realizing it. That is why I keep practicing and 
always welcome a challenge or an assessment.</p>

<p>And such a test is exactly what I took a couple of days ago, partially to find new consulting opportunities, 
but mostly to see how I measured. Well, let&rsquo;s just say that it was a learning, and humbling, experience.</p>

<h3 id="the-test">The test</h3>

<p>Frankly, it was a good test. Technical tests are not that easy to write. They must be realistic, and yet not require 
knowledge of a specific business domain. They should cover high- and low-level stuff, and yet be focused. They should 
look like actual application code, and yet keep the boilerplate to a minimum. It&rsquo;s a tricky balance, and I found this 
test well-balanced.</p>

<p>Sign of the times, the test&rsquo;s setup was “Rails as a back-end for a REST API”. So, very realistic, but also a bit 
sad, since it&rsquo;s basically misusing my favorite framework. Still, the use case was very clear, coherent, and well laid 
out. The test came with a skeleton app and some integration specs; the goal was mostly to fill in the blanks in the code 
to make the specs pass.</p>

<p>I would love to complain about the non-RESTful nature of the app&rsquo;s resources, its choice of RSpec over Minitest, or 
the insistence on using some kind of service layer, and blame my poor performance on these, but that would be dishonest. 
For better or worse, this structure is extremely common in 2023, and as I&rsquo;ve said, good tests are realistic.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<h3 id="my-performance">My performance</h3>

<p>I failed miserably. Or rather: I eventually came up with a solution that I find pretty good, but it took me way longer 
than the allocated time. So what did I do wrong?</p>

<p>First of all, what I did <em>not</em> do wrong: I didn&rsquo;t waste time setting up my environment, and I didn&rsquo;t waste time 
looking stuff up online, basically filling in holes in my knowledge with Stack Overflow snippets. I mention these things 
because they are among the obvious red flags that I look for when I am the one doing the evaluation. At least my basics 
were covered. So what took me so long?</p>

<p>First of all, I <strong>didn&rsquo;t study the code enough before diving in</strong>. Now that I think about it, this is the kind of 
common advice that I was given when I was a student – or that I could give my son now. Don&rsquo;t rush, and read carefully 
the wording of the problem. And the code you start with is part of this wording! But because I didn&rsquo;t do that, I 
stumbled upon stupid things that broke my flow – things like not looking at the <code>schema.rb</code> file to see that a given 
attribute that is passed as a string is actually stored as an integer, and therefore the model should declare an <code>enum</code>. 
To be honest, I cursed every time I lost 20 seconds on what felt like unfair traps, but in retrospect, these are part of 
the game, and something you should always do in real life anyway. So, this recurring loss of footing is on me.</p>

<p>Secondly, I couldn&rsquo;t help myself <strong>coding with my ego</strong>, and obsessing too much and too early on <em>making it right</em>, 
instead of ensuring that I had <em>made it work</em> everywhere first. It&rsquo;s a weakness I know well, now, and yet once again 
it was stronger than me. This was especially true on the algorithmic part of the test. I&rsquo;m not very good when it comes to 
core CS stuff, and I felt an extra impulse to <strong>show off</strong> and try to do something clever, which took me a very 
long time to come up with, instead of brute-forcing my way through the problem. Now, in my defense, one of my motivations 
for taking this test was to have fun and try new things, and I had never had a good reason to use <code>Array#slice_when</code> 
before. I did have fun, and I did learn new things, but it was unwise and it is the main reason why I lost so much time.</p>

<p>But, in truth, I could still have pulled it off in time if I had been more familiar with the expected architecture. 
The app was technically using Rails, but not following the Rails Ways™, and the seemingly incoherent requirements that 
ensued from this architecture <strong>got me confused</strong>. It became a puzzle I could not figure out – I got the objects 
that the solution wanted, and the responsibilities they had to have, but couldn&rsquo;t find a way to dispatch the latter 
among the former as the test wanted me to. Or not in a way that made sense to me, anyway. I eventually came up with 
something that worked, but it didn&rsquo;t feel <em>right</em>. And yet, coming up with it took me a very long time – in fact, I 
had to start again from scratch, doing things “my way”, and then backtracking to something that would satisfy the 
requirements of the test.</p>

<h3 id="what-was-revealed">What was revealed?</h3>

<p>This mismatch between what I think was expected of the candidates, and the way I usually build a Rails app, gives 
me pause. I certainly don&rsquo;t want to put my failing on the test itself or look for excuses. I made mistakes because 
of my own shortcomings, there&rsquo;s no denying that. And yet, if indeed I reversed-engineered properly the test (which is 
a big <em>if</em>), I wonder if I should make a big deal out of this poor performance. I couldn&rsquo;t come up with a solution 
that I would advise against anyway, in a classic case of misusing a framework that I (supposedly) know how to use well. 
Should I stick to my guns, ignore these perversions, and feel fine about my own lack of awareness, or should I step 
down from my pedestal, go with the flow, and become familiar with these misguided but common approaches to “a Rails 
backend”?</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Still, the more I thought about this test, the more issues I had with it, as an example of poor practices. I&rsquo;ll 
  certainly come back to this in future posts.&nbsp;<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/blog/2023/10/31/the-fall-of-the-house-of-usher.html</id>
      <title>The Fall of the House of Usher</title>
      <updated>2023-10-31T11:59:00+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/2023/10/31/the-fall-of-the-house-of-usher.html" />

      <published>2023-10-31T11:59:00+01:00</published>
      <content type="html">
        <![CDATA[<p>I really, really liked <a href="https://www.imdb.com/title/tt10574558/">Midnight Mass</a>. So much so that it got me to 
catch up with Mike Flanagan&rsquo;s &ldquo;Haunting of&rdquo; shows, which were, say, of uneven quality but still enjoyable. And 
it got me rather excited for The Fall of the House of Usher.</p>

<p>Now that I&rsquo;ve watched this latest show, the more I think about it, the more I see issues in its pacing, tone, text and 
subtext, to the point that I honestly cannot be bothered to write a full post about it. Every pertinent opinion 
I could give can be found in the <a href="https://slate.com/culture/2023/10/the-fall-of-the-house-of-usher-netflix-mike-flanagan-edgar-allan-poe-adaptation.html">Slate review</a> that 
I carefully refrained from reading before watching the show. Or, for a more personal touch, in the <a href="https://ruby.social/@r3trofitted/111319120972931721">three</a> 
<a href="https://ruby.social/@r3trofitted/111323798762943647">toots</a> <a href="https://ruby.social/@r3trofitted/111324521630572845">I posted</a> 
during my quasi-binging:</p>

<blockquote>
  <p>I like Mike Flanagan’s work, and I LOVED Midnight Mass, but I’m pretty disappointed by The Fall of the House of Usher 
so far (meaning after 2 episodes).<br />
↳ Mark Hamill is pretty cool, though.</p>
</blockquote>

<blockquote>
  <p>Almost done with the Fall of the House of Usher. Watching the Flanacast again is nice, but this series really suffers 
from Netflixis: it had good material for a movie but it got diluted to make too many episodes, and then padded with 
over-styling. And the references to Poe’s works and current events are as artificial as the sets.</p>
</blockquote>

<blockquote>
  <p>Final thoughts on The Fall of the House of Usher: the poetry is really good (no shit, Sherlock) but the social 
commentary is hollow (even if well-intended).</p>
</blockquote>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/blog/a-dash-of-milk/2023/10/30/issue-7.html</id>
      <title>A dash of milk #7</title>
      <updated>2023-10-24T09:03:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/a-dash-of-milk/2023/10/30/issue-7.html" />

      <published>2023-10-24T09:03:00+02:00</published>
      <content type="html">
        <![CDATA[<h3 id="its-2023-here-is-why-your-web-design-sucks"><a href="https://heather-buchel.com/blog/2023/10/why-your-web-design-sucks/">It&rsquo;s 2023, here is why your web design sucks.</a></h3>

<p>Probably the best article I&rsquo;ve stumbled upon in the past couple of weeks. Reading it go me so excited that I 
couldn&rsquo;t help but forwarding it around, especially to designers or managers I&rsquo;ve worked with in the past. Heather 
Buchel explains exactly what I&rsquo;ve been trying to say for years, but way better than I ever could, and with 
an extra dash of insights (especially regarding gender-based territoriality). And I love her tone.</p>

<h3 id="whitespace-characters-to-copy-and-paste"><a href="https://qwerty.dev/whitespace/">Whitespace Characters to Copy and Paste</a></h3>

<p>Or, more importantly, whitespace characters to learn about. I&rsquo;m a rather lenient person, but when it comes to 
typography, I gladly nitpick like the nerd I am (deep inside). I stumbled upon this great site when searching 
for a design solution to a <a href="">spacing issue</a> in my latest pet project. You can bet that it&rsquo;s now in my bookmarks.</p>

<h3 id="yaml-multiline"><a href="https://yaml-multiline.info">YAML Multiline</a></h3>

<p>Another reference I&rsquo;m happy to bookmark, now that I&rsquo;m back to 1998 and actually browser features like bookmarks 
again. (By the way, do you remember <a href="https://pinboard.in/u:r3trofitted/">Pinboard</a>?) Anyway, YAML is confusing 
and will occasionally trip you up, hopefully this will help.</p>

<h3 id="super-color-palette"><a href="https://supercolorpalette.com">Super Color Palette</a></h3>

<p>Another great tool, that I learned about through <a href="https://www.youtube.com/@BJGpixel">Brandon James Greers</a> (who 
makes pictures out of tiny squares). I&rsquo;ve been building up several new things recently, and UI design can be 
alien enough to stop me in my tracks, but this kind of tool helps a lot to push through.</p>

<h3 id="constructing-subclasses-of-data-with-positional-arguments"><a href="https://bugs.ruby-lang.org/issues/19278">Constructing subclasses of Data with positional arguments</a></h3>

<p>My original notes for the link where: <em>What a thread. Talk about tone.</em> In hindsight, they suffice.</p>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/blog/a-dash-of-milk/2023/10/23/issue-6.html</id>
      <title>A dash of milk #6</title>
      <updated>2023-10-23T09:38:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/a-dash-of-milk/2023/10/23/issue-6.html" />

      <published>2023-10-23T09:38:00+02:00</published>
      <content type="html">
        <![CDATA[<h3 id="elmore-the-finest-one-of-all"><a href="https://youtu.be/mfNoPYChIqk">Elmore: The Finest One of All</a></h3>

<p>I&rsquo;ve never been too fond of D&amp;D, and especially not the 2nd edition, but a single illustration stuck me when 
I first saw it, in the Player&rsquo;s Handbook that I borrowed from a classmate back in high school. It&rsquo;s been more 
than 30 years now, and I still find this piece incredibly evocative. Well, obviously I&rsquo;m not the only one, since 
this colorful YouTuber has managed to make a 30-minute video on it, and keep it interesting, too!</p>

<h3 id="the-little-told-story-about-the-bart-seat-slashing-gang-"><a href="https://www.sfgate.com/bayarea/article/bart-seat-slasher-hurwitz-service-systems-inc-14544785.php">The little-told story about the BART seat-slashing gang […]</a></h3>

<p>I loved this story of unscrupulous people gaming a system they&rsquo;re part of. I might reuse it in a Cyberpunk RED 
scenario, or cite it as an example of wrong incentives when giving management advice. Or both.</p>

<h3 id="why-im-in-the-tailwind-cult"><a href="https://phoenixonrails.com/blog/why-im-in-the-tailwind-cult">Why I&rsquo;m in the Tailwind cult</a></h3>

<p>I&rsquo;m still trying to understand the appeal of Tailwind. Unfortunately, this article didn&rsquo;t convince me; it only 
reinforced my conviction that there are many web developers won&rsquo;t don&rsquo;t really care for the technical foundations, 
limitations and superpowers of the Web, and would prefer it to be more like a desktop environment. Which was already 
the case back in the days of ASP.NET 1.0. I&rsquo;m not one of those people, but I still wonder if I&rsquo;m missing out on 
something. I guess I have no choice but to try it out myself…</p>

<h3 id="writing-object-shape-friendly-code-in-ruby"><a href="https://island94.org/2023/10/writing-object-shape-friendly-code-in-ruby">Writing Object Shape friendly code in Ruby</a></h3>

<p>This is very interesting. At the same time, it is so counter-intuitive that I don&rsquo;t ever see myself using it. And yet, 
I find it really cool, and I&rsquo;m glad that this kind of optimization exists, as costly as it may be, for the people 
who need it.</p>

<h3 id="that-useless-ruby-syntax-sugar-that-emerged-in-new-versions"><a href="https://zverok.space/blog/2023-10-02-syntax-sugar.html">That useless Ruby syntax sugar that emerged in new versions</a></h3>

<p>I am definitely in the camp of the back-pushing people who don&rsquo;t like, or at best don&rsquo;t care for, the newest additions 
to Ruby – things like the numbers block parameters or the pattern matching. This is why I appreciate this series 
of articles, which could challenge my scepticism. (Like with the Tailwind article above, so far it hasn&rsquo;t really 
worked, but that&rsquo;s not important.)</p>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/steel_vellum/2023/10/10/modules-in-dnd-modules-in-ruby.html</id>
      <title>Modules in D&amp;D, modules in Ruby</title>
      <updated>2023-10-10T21:50:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/steel_vellum/2023/10/10/modules-in-dnd-modules-in-ruby.html" />

      <published>2023-10-10T21:50:00+02:00</published>
      <content type="html">
        <![CDATA[<p>We left our project with an integration test that doesn&rsquo;t pass (yet), and a unit test for the first piece of business 
logic revealed by this integration test: the character races as “types” for our <code>Character</code> objects. It is now time to 
make the unit test pass, which should drive us to an implementation of the <code>Race</code> class, and then move on to the next 
encounter in our integration test.</p>

<h3 id="ancestry-shenanigans">Ancestry shenanigans</h3>

<p>Our unit test, at the moment, looks like this:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"test_helper"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/character_creation"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/race"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">class</span> <span class="nc">CharacterCreationTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
    <span class="k">def</span> <span class="nf">test_choosing_a_race</span>
      <span class="n">creation</span> <span class="o">=</span> <span class="no">CharacterCreation</span><span class="p">.</span><span class="nf">new</span>
      <span class="n">race</span>     <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span>
      
      <span class="n">creation</span><span class="p">.</span><span class="nf">choose_race</span> <span class="n">race</span>
      
      <span class="n">character</span> <span class="o">=</span> <span class="n">creation</span><span class="p">.</span><span class="nf">character</span>
      <span class="n">assert_kind_of</span> <span class="n">race</span><span class="p">,</span> <span class="n">character</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>test/character_creation_test.rb
</figcaption></figure></div>

<p>And, as expected, it fails. More precisely, once we add a placeholder <code>Race</code> class to satisfy the <code>require</code> instruction, 
it fails with this interesting error: <code>class or module required</code>.</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">class</span> <span class="nc">Race</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lib/steel_vellum/race.rb
</figcaption></figure></div>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">𝄢</span><span class="w"> </span>ruby <span class="nt">-Ilib</span> <span class="nb">test</span>/character_creation_test.rb
<span class="go">
</span><span class="c"># Running tests with run options --seed 26591:
</span><span class="go">
E

Finished tests in 0.000418s, 2392.3449 tests/s, 0.0000 assertions/s.


Error:
SteelVellum::CharacterCreationTest#test_choosing_a_race:
TypeError: class or module required
    test/character_creation_test.rb:13:in `test_choosing_a_race'

1 tests, 0 assertions, 0 failures, 1 errors, 0 skips
</span></code></pre></div></figure></div>

<p>Back in the previous chapter, I said that a true mockist would probably not use the <code>Race</code> class in the example, but 
instead something simpler, like <code>Object</code>. Well, this wasn&rsquo;t completely accurate. Because we want whatever object
is passed to <code>#choose_race</code> to define what a <code>Character</code> object <em>“is”</em>, this object has to be either a class or a module, 
as the error message tells us.</p>

<p>Let&rsquo;s pause for a second. Our test is driving our design. Writing it, we discovered that we want characters races 
to be <em>instances</em> of some kind of <code>Race</code> class (<code>race=Race.new</code>). But, at the same time, our test lead us to a design 
where these instances must be classes or modules themselves (<code>assert_kind_of race</code>, with <code>assert_kind_of</code> expecting 
a class or a module). Can an instance also be a class (or a module)?</p>

<p>Of course it can! This is one of the great (and elegant, and almost magical) things about Ruby: classes are instances, 
too – namely, instances of the <code>Class</code> class. By the same principle, modules are instances of the <code>Module</code> class, or a 
subclass of it. Therefore, we can move on to the next failure in our test by ensuring that <code>Race.new</code> returns either a 
class or a module. The simplest way to do that would to make <code>Race</code> <em>inherit</em> from either one – except that Ruby doesn&rsquo;t 
allow subclassing <code>Class</code>, so the only option left is to have <code>Race</code> inherit from <code>Module</code>, so that <code>Race.new</code> <em>returns</em> 
a (new) module.</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">class</span> <span class="nc">Race</span> <span class="o">&lt;</span> <span class="no">Module</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lib/steel_vellum/race.rb
</figcaption></figure></div>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">𝄢</span><span class="w"> </span>ruby <span class="nt">-Ilib</span> <span class="nb">test</span>/character_creation_test.rb
<span class="go">  
</span><span class="c"># Running tests with run options --seed 60990:
</span><span class="go">
F

Finished tests in 0.000311s, 3215.4337 tests/s, 3215.4337 assertions/s.


Failure:
SteelVellum::CharacterCreationTest#test_choosing_a_race [test/character_creation_test.rb:13]
Minitest::Assertion: Expected #&lt;SteelVellum::Character:0x0000000103d0a490&gt; to be a kind of #&lt;SteelVellum::Race:0x00000001039a0700&gt;, not SteelVellum::Character.

1 tests, 1 assertions, 1 failures, 0 errors, 0 skips
</span></code></pre></div></figure></div>

<p>We&rsquo;ve successfully failed – meaning that we&rsquo;ve successfully moved on to a different failure. But this one is a bit cryptic.
And how could our object be both “a kind of” <code>Character</code> and “a kind of” <code>Race</code>? Object in Ruby can only be of a single 
class, right?</p>

<p>Without diving too deep in the (marvellous) object model of Ruby, let&rsquo;s make a slight detour. The <code>assert_kind_of</code> 
matcher relies on <a href="https://docs.ruby-lang.org/en/3.2/Object.html#method-i-kind_of-3F"><code>Object#kind_of?</code></a>, which is defined 
like so:</p>

<blockquote>
  <p><strong>kind_of?(class) → true or false</strong></p>

  <p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>, or if <em>class</em> is one of the superclasses of <em>obj</em> or modules 
included in <em>obj</em>.</p>
</blockquote>

<p>This is very accurate but maybe a bit obscure, if you&rsquo;re not familiar with the way classes, modules and instances 
work in Ruby. Another way to define <code>kind_of?</code> could be:</p>

<blockquote>
  <p>Returns <code>true</code> is <em>class</em> is among the ancestors of <em>obj</em>&rsquo;s [singleton] class.</p>
</blockquote>

<p>Let&rsquo;s ignore the word in brackets for now. In Ruby, we know that each object has a class; this class, like all 
classes, <em>inherits</em> from another class, which itself inherits from another class, and so on until this chain of 
<em>ancestors</em> reaches <code>BasicObject</code>, <a href="https://docs.ruby-lang.org/en/3.2/BasicObject.html#:~:text=BasicObject-,BasicObject,Ruby">“the parent class of all classes in Ruby”</a>. 
We can check this out by looking at the ancestors of the class of the <code>character</code> object in our test. We know 
that this object&rsquo;s class is <code>SteelVellum::Character</code>, so we can do it like this:</p>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">𝄢</span><span class="w"> </span>ruby <span class="nt">-I</span> lib <span class="nt">-r</span> steel_vellum/character_creation.rb <span class="nt">-e</span> <span class="s2">"print SteelVellum::Character.ancestors"</span>
<span class="go">[SteelVellum::Character, Object, Kernel, BasicObject]
</span></code></pre></div></figure></div>

<p>Ignoring the first item in this array (which is the interrogated class itself), we see the list of classes<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> from 
which <code>Character</code> inherits: <code>Object</code>, <code>Kernel</code> and, eventually, <code>BasicObject</code>. For our test to pass, and 
our assertion <code>assert_kind_of race, character.character</code> to be true, we need to somehow add <code>race</code> to this list of 
ancestors.</p>

<p>We cannot do that by making our <code>race</code> object a parent of the <code>Character</code> class – first because it would make no sense 
from a business logic perspective (characters are not character races), but more importantly because we&rsquo;ve already 
established that <code>race</code> is a <code>Module</code>, and modules cannot be inherited from.</p>

<p>However, like classes, Ruby modules can be part of the ancestors chain of a class – in fact, in the ancestors list 
above, <code>Kernel</code> is actually a <a href="https://docs.ruby-lang.org/en/3.2/Kernel.html">module</a>, not a class. As explained in 
the definition of <code>Object#kind_of?</code>, <em>included modules</em> also count as ancestors. But how could we include this <code>race</code> 
module in the class of our <code>character</code> object?</p>

<h3 id="a-single-use-class">A single-use class</h3>

<p>Once again, the <code>character</code> object is an instance of <code>Character</code>. So, a naive way to have it also be “a kind of” <code>race</code> 
would be to call <code>Character.include race</code>. But then, <em>all</em> instances of <code>Character</code> would also have <code>race</code> in their ancestors. 
All characters would be of the same race, which is not what we want.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></p>

<p>What we want is for this <code>race</code> module to be included in the class of our <code>character</code> instance, <strong>but only for this 
instance</strong>. And we can do that thanks to <code>Module#extend</code> and the elegant magic of the <em>singleton class</em>.</p>

<p>By <em>extending the instance</em> with the module instead of <em>including the module in the class</em>, we&rsquo;ll have what we want. To 
see this in action, let&rsquo;s temporarily hack our test:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_choosing_a_race</span>
  <span class="n">creation</span> <span class="o">=</span> <span class="no">CharacterCreation</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">race</span>     <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span>
  
  <span class="n">creation</span><span class="p">.</span><span class="nf">choose_race</span> <span class="n">race</span>
  
  <span class="n">character</span> <span class="o">=</span> <span class="n">creation</span><span class="p">.</span><span class="nf">character</span>
  <span class="n">character</span><span class="p">.</span><span class="nf">extend</span> <span class="n">race</span>
  
  <span class="n">assert_kind_of</span> <span class="n">race</span><span class="p">,</span> <span class="n">character</span>
<span class="k">end</span>
</code></pre></div><figcaption>test/character_creation_test.rb (excerpt)
</figcaption></figure></div>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">𝄢</span><span class="w"> </span>ruby <span class="nt">-Ilib</span> <span class="nb">test</span>/character_creation_test.rb
<span class="go">
</span><span class="c"># Running tests with run options --seed 19004:
</span><span class="go">
</span><span class="c">.
</span><span class="go">
Finished tests in 0.000345s, 2898.5521 tests/s, 2898.5521 assertions/s.


1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></div></figure></div>

<p>Or test passes! But how come?</p>

<p>When we called <code>character.extend race</code>, Ruby did something clever. It created a <em>new</em> class, anonymous, and had it 
inherit from <code>Character</code>. It also included <code>race</code> into this new class, and then had <code>character</code> inherit from it. Because 
it inherits from <code>Character</code>, this anonymous class behaves exactly as <code>Character</code>, but it is specific to the <code>character</code> 
object. (And it includes <code>race</code>, which is the whole point.)</p>

<p>There is no formal name for this kind of object-specific, anonymous class. Some used to call it “eigenclass”, others 
“ghost class”, but nowadays, it is most often named <em>singleton class</em><sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>. In fact, this class can be reached (and 
created on-the-fly, if necessary) by calling <a href="https://docs.ruby-lang.org/en/3.2/Object.html#method-i-singleton_class"><code>Object#singleton_class</code></a>. 
Let&rsquo;s launch an IRB console and compare the ancestors of this singleton class, for a given <code>Character</code> instance, before 
and after extending a <code>Race</code> module:</p>

<div class="language-irb highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">&gt;&gt;</span><span class="w"> </span><span class="no">Dir</span><span class="p">[</span><span class="n">__dir__</span> <span class="o">+</span> <span class="s2">"/lib/steel_vellum/**/*.rb"</span><span class="p">].</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span> <span class="p">};</span> <span class="kp">include</span> <span class="no">SteelVellum</span><span class="p">;</span>
<span class="gp">&gt;&gt;</span><span class="w"> 
</span><span class="gp">&gt;&gt;</span><span class="w"> </span><span class="n">c</span> <span class="o">=</span> <span class="no">Character</span><span class="p">.</span><span class="nf">new</span>
<span class="p">=&gt;</span> <span class="kt">#&lt;</span><span class="no">SteelVellum</span><span class="o">::</span><span class="no">Character</span><span class="p">:</span><span class="mh">0x0000000109f1e320</span><span class="kt">&gt;</span>
<span class="gp">&gt;&gt;</span><span class="w"> </span><span class="n">c</span><span class="p">.</span><span class="nf">singleton_class</span><span class="p">.</span><span class="nf">ancestors</span>
<span class="p">=&gt;</span> 
<span class="gp">[#&lt;Class:#&lt;SteelVellum::Character:0x0000000109f1e320&gt;&gt;</span><span class="p">,</span>
<span class="go"> SteelVellum::Character,
 Object,
 SteelVellum,
 Kernel,
 BasicObject]
</span><span class="gp">&gt;&gt;</span><span class="w"> </span><span class="n">c</span><span class="p">.</span><span class="nf">extend</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span>
<span class="p">=&gt;</span> <span class="kt">#&lt;</span><span class="no">SteelVellum</span><span class="o">::</span><span class="no">Character</span><span class="p">:</span><span class="mh">0x0000000109f1e320</span><span class="kt">&gt;</span>
<span class="gp">&gt;&gt;</span><span class="w"> </span><span class="n">c</span><span class="p">.</span><span class="nf">singleton_class</span><span class="p">.</span><span class="nf">ancestors</span>
<span class="p">=&gt;</span> 
<span class="gp">[#&lt;Class:#&lt;SteelVellum::Character:0x0000000109f1e320&gt;&gt;</span><span class="p">,</span>
<span class="c"> #&lt;SteelVellum::Race:0x000000010abb3860&gt;,
</span><span class="go"> SteelVellum::Character,
 Object,
 SteelVellum,
 Kernel,
 BasicObject]
</span></code></pre></div></figure></div>

<p>So, there you have it. Even though Ruby objects can only be instances of a single class, they can inherit traits from 
any number of modules, and don&rsquo;t have to share these inheritances with any other object, thanks to the existence of a 
singleton class.</p>

<p>Now that we know how to have characters <em>be</em> of a given race, and why this is even possible in the first place, let&rsquo;s 
remove the hack from our test and implement things properly:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"character"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">class</span> <span class="nc">CharacterCreation</span>
    <span class="k">def</span> <span class="nf">choose_race</span><span class="p">(</span><span class="n">race</span><span class="p">)</span>
      <span class="vi">@race</span> <span class="o">=</span> <span class="n">race</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">character</span>
      <span class="no">Character</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
        <span class="n">c</span><span class="p">.</span><span class="nf">extend</span> <span class="vi">@race</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lib/steel_vellum/character_creation.rb
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"test_helper"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/character_creation"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/race"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">class</span> <span class="nc">CharacterCreationTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
    <span class="k">def</span> <span class="nf">test_choosing_a_race</span>
      <span class="n">creation</span> <span class="o">=</span> <span class="no">CharacterCreation</span><span class="p">.</span><span class="nf">new</span>
      <span class="n">race</span>     <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span>
      
      <span class="n">creation</span><span class="p">.</span><span class="nf">choose_race</span> <span class="n">race</span>
      
      <span class="n">character</span> <span class="o">=</span> <span class="n">creation</span><span class="p">.</span><span class="nf">character</span>
      <span class="n">assert_kind_of</span> <span class="n">race</span><span class="p">,</span> <span class="n">character</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>test/character_creation_test.rb
</figcaption></figure></div>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">𝄢</span><span class="w"> </span>ruby <span class="nt">-Ilib</span> <span class="nb">test</span>/character_creation_test.rb
<span class="go">
</span><span class="c"># Running tests with run options --seed 60242:
</span><span class="go">
</span><span class="c">.
</span><span class="go">
Finished tests in 0.000328s, 3048.7789 tests/s, 3048.7789 assertions/s.


1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></div></figure></div>

<h3 id="back-to-the-outer-loop">Back to the outer loop…</h3>

<p>Our unit test now passes – we&rsquo;ve closed the small loop. Let&rsquo;s go back to the big loop (the integration test) and 
see where the next failure leads us.</p>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">𝄢</span><span class="w"> </span>ruby <span class="nt">-Ilib</span> <span class="nb">test</span>/creating_bruenor_test.rb
<span class="go">
</span><span class="c"># Running tests with run options --seed 19079:
</span><span class="go">
E

Finished tests in 0.000429s, 2331.0023 tests/s, 0.0000 assertions/s.


Error:
SteelVellum::CreatingBruenorTest#test_1_choose_a_race:
TypeError: wrong argument type Class (expected Module)
    /Users/ronan/Dev/steel_vellum/lib/steel_vellum/character_creation.rb:14:in `extend'
    /Users/ronan/Dev/steel_vellum/lib/steel_vellum/character_creation.rb:14:in `block in character'
    &lt;internal:kernel&gt;:90:in `tap'
    /Users/ronan/Dev/steel_vellum/lib/steel_vellum/character_creation.rb:13:in `character'
    test/creating_bruenor_test.rb:17:in `test_1_choose_a_race'

1 tests, 0 assertions, 0 failures, 1 errors, 0 skips
</span></code></pre></div></figure></div>

<p>This was to be expected – <code>CharacterCreation#choose_race</code> must be passed a module now, but <code>MountainDwarf</code> is still a 
slimed class. Let&rsquo;s change that.</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"../race"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">module</span> <span class="nn">Races</span>
    <span class="no">MountainDwarf</span> <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lib/steel_vellum/races/mountain_dwarf.rb
</figcaption></figure></div>

<p>Moving on, we can rerun the integration test and figure out what other missing piece of our library we should build now.</p>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">𝄢</span><span class="w"> </span>ruby <span class="nt">-Ilib</span> <span class="nb">test</span>/creating_bruenor_test.rb
<span class="go">
</span><span class="c"># Running tests with run options --seed 52522:
</span><span class="go">
F

Finished tests in 0.000367s, 2724.7956 tests/s, 5449.5913 assertions/s.


Failure:
SteelVellum::CreatingBruenorTest#test_1_choose_a_race [test/creating_bruenor_test.rb:19]
Minitest::Assertion: Expected: :medium
  Actual: nil

1 tests, 0 assertions, 0 failures, 1 errors, 0 skips
</span></code></pre></div></figure></div>

<p>This is a more interesting failure! According to the test, making Bruenor a Mountain Dwarf should automatically give him 
a <code>:medium</code> size, but at the moment, <code>Character#size</code> always returns <code>nil</code> (since we didn&rsquo;t bother actually implementing 
the method&rsquo;s body). Let&rsquo;s remedy that.</p>

<p>Because this failure reveals a missing piece of business logic, we must start a new small loop, and design the 
implementation of this unitary feature through one or more unit tests.</p>

<h3 id="hooks-in-you">Hooks in you</h3>

<p>For a start, let&rsquo;s simply isolate the failing assertion from the integration test into an unit test:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"../test_helper"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/character"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/races/mountain_dwarf"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">class</span> <span class="nc">Races::MountainDwarfTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
    <span class="k">def</span> <span class="nf">test_a_mountain_dwarf_character_has_a_medium_size</span>
      <span class="n">character</span> <span class="o">=</span> <span class="no">Character</span><span class="p">.</span><span class="nf">new</span>
      
      <span class="n">assert_nil</span> <span class="n">character</span><span class="p">.</span><span class="nf">size</span>
      <span class="n">character</span><span class="p">.</span><span class="nf">extend</span> <span class="no">Races</span><span class="o">::</span><span class="no">MountainDwarf</span>
      
      <span class="n">assert_equal</span> <span class="ss">:medium</span><span class="p">,</span> <span class="n">character</span><span class="p">.</span><span class="nf">size</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>test/races/mountain_dwarf_test.rb
</figcaption></figure></div>

<p>Covered by our unit test, let&rsquo;s think about a way to make it pass. The test tells us that, once a <code>Character</code> instance 
is extended by the <code>MountainDwarf</code> module, its <code>#size</code> method should return <code>:medium</code> instead of <code>nil</code>. When a module 
extends an object, the methods defined inside this module are added to the instance methods of the object&rsquo;s singleton 
class, so one way to make our test pass would be to redefine <code>#size</code> in the <code>MountainDwarf</code> module:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"../race"</span>
  
<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">module</span> <span class="nn">Races</span>
    <span class="no">MountainDwarf</span> <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="k">def</span> <span class="nf">size</span>
        <span class="mi">25</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lib/steel_vellum/races/mountain_dwarf.rb
</figcaption></figure></div>

<p>However, while perfectly fine in general, I&rsquo;m not too fond of this approach in this specific situation. That is because 
a character&rsquo;s size is more <em>data</em> than <em>behavior</em>. I&rsquo;d rather store this information in an instance variable than have 
it being returned by a method<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>.</p>

<p>Thankfully, Ruby gives us another trick to reach our goals: <em>hook methods</em>. These are methods that, if defined, 
get called we certain events happen in an object&rsquo;s lifetime. For example, <code>#method_missing</code> is a well-known hook 
method that is called when an object (or rather: a module or a class) receives a call to a method that neither 
it not any of its ancestors define. In our case, we&rsquo;ll make use of the <a href="https://docs.ruby-lang.org/en/3.2/Module.html#method-i-extended"><code>#extended</code></a> 
hook method.</p>

<p>This method is called whenever a module extends an object. We can use it to change the value of the character&rsquo;s <code>@size</code> 
instance variable – in practice, giving it a default value, which the <code>Character</code> instance will then be free to change, 
if need be. (After all, our Dwarf could one day drink a magical potion and grow a size or two.) This is what using 
the <code>#extended</code> hook looks like:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"../race"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">module</span> <span class="nn">Races</span>
    <span class="no">MountainDwarf</span> <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extended</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
        <span class="n">character</span><span class="p">.</span><span class="nf">size</span> <span class="o">=</span> <span class="ss">:medium</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lib/steel_vellum/races/mountain_dwarf.fr
</figcaption></figure></div>

<p>Of course, for the <code>character.size = :medium</code> instruction to work, we need to give accessors to the <code>@size</code> instance 
variable of <code>Character</code>:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">class</span> <span class="nc">Character</span>
    <span class="nb">attr_accessor</span> <span class="ss">:size</span>
    
    <span class="c1"># TODO: is this method really useful? It won't be used once the character creation is done</span>
    <span class="k">def</span> <span class="nf">ability_score_increases</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">speed</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">darkvision</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">languages</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">has_advantage_on_saving_throws_against?</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">has_resistance_against?</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">proficient_with?</span><span class="p">(</span><span class="n">proficiency</span><span class="p">)</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">special_traits</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lib/steel_vellum/character.rb
</figcaption></figure></div>

<p>Now our test passes. We can close this small loop and go back, once again, to the big one by running (yet again) the 
integration test. It now fails because of the next character trait that a race is supposed to give a default 
value to:</p>

<div class="language-console highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="gp">𝄢</span><span class="w"> </span>ruby <span class="nt">-Ilib</span> <span class="nb">test</span>/creating_bruenor_test.rb
<span class="go">
</span><span class="c"># Running tests with run options --seed 15813:
</span><span class="go">
F

Finished tests in 0.000413s, 2421.3068 tests/s, 4842.6136 assertions/s.


Failure:
SteelVellum::CreatingBruenorTest#test_1_choose_a_race [test/creating_bruenor_test.rb:20]
Minitest::Assertion: Expected: 25
  Actual: nil

1 tests, 2 assertions, 1 failures, 0 errors, 0 skips
</span></code></pre></div></figure></div>

<p>This time, it is <code>Character#speed</code> that doesn&rsquo;t return the expected value. We&rsquo;ll proceed as exactly like we have with 
<code>#size</code> – adding a unit test, watching it fail, making it pass, and then moving back to the integration test. And after 
that, we&rsquo;ll have <code>Character.darkvision</code> to fix. In the end, this is what our <code>MountainDwarf</code> class and its tests will be:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"../race"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">module</span> <span class="nn">Races</span>
    <span class="no">MountainDwarf</span> <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extended</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
        <span class="n">character</span><span class="p">.</span><span class="nf">size</span>       <span class="o">=</span> <span class="ss">:medium</span>
        <span class="n">character</span><span class="p">.</span><span class="nf">speed</span>      <span class="o">=</span> <span class="mi">25</span>
        <span class="n">character</span><span class="p">.</span><span class="nf">darkvision</span> <span class="o">=</span> <span class="mi">60</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lib/steel_vellum/races/mountain_dwarf.fr
</figcaption></figure></div>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"../test_helper"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/character"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/races/mountain_dwarf"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">class</span> <span class="nc">Races::MountainDwarfTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
    <span class="k">def</span> <span class="nf">test_a_mountain_dwarf_character_has_a_medium_size</span>
      <span class="n">character</span> <span class="o">=</span> <span class="no">Character</span><span class="p">.</span><span class="nf">new</span>
      
      <span class="n">assert_nil</span> <span class="n">character</span><span class="p">.</span><span class="nf">size</span>
      <span class="n">character</span><span class="p">.</span><span class="nf">extend</span> <span class="no">Races</span><span class="o">::</span><span class="no">MountainDwarf</span>
      
      <span class="n">assert_equal</span> <span class="ss">:medium</span><span class="p">,</span> <span class="n">character</span><span class="p">.</span><span class="nf">size</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">test_a_mountain_dwarf_character_has_a_speed_of_25</span>
      <span class="n">character</span> <span class="o">=</span> <span class="no">Character</span><span class="p">.</span><span class="nf">new</span>
      
      <span class="n">assert_nil</span> <span class="n">character</span><span class="p">.</span><span class="nf">speed</span>
      <span class="n">character</span><span class="p">.</span><span class="nf">extend</span> <span class="no">Races</span><span class="o">::</span><span class="no">MountainDwarf</span>
      
      <span class="n">assert_equal</span> <span class="mi">25</span><span class="p">,</span> <span class="n">character</span><span class="p">.</span><span class="nf">speed</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">test_a_mountain_dwarf_character_has_darkvision_up_to_60_feet</span>
      <span class="n">character</span> <span class="o">=</span> <span class="no">Character</span><span class="p">.</span><span class="nf">new</span>
      
      <span class="n">assert_nil</span> <span class="n">character</span><span class="p">.</span><span class="nf">darkvision</span>
      <span class="n">character</span><span class="p">.</span><span class="nf">extend</span> <span class="no">Races</span><span class="o">::</span><span class="no">MountainDwarf</span>
      
      <span class="n">assert_equal</span> <span class="mi">60</span><span class="p">,</span> <span class="n">character</span><span class="p">.</span><span class="nf">darkvision</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>test/races/mountain_dwarf_test.rb
</figcaption></figure></div>

<h3 id="stepping-away-from-bdd">Stepping away from BDD</h3>

<p>Normally, keeping with our back-and-forths between the integration tests and the unit tests, our next step should probably be 
have to do with <code>ability_score_increases</code>. However, once again, I&rsquo;d like to take a step back and consider 
our recent work.</p>

<p>We&rsquo;ve implemented the behavior of the <code>Races::MountainDwarf</code> instanciated modules, because this is what our tests have 
covered. But we know that other races will eventually be covered by the library, and we know that they, too, will 
assign a size, a speed and a darkvision range to the characters. So, even though we don&rsquo;t have any test to <em>lead</em> us 
there yet, we can safely assume that making this piece of business logic a bit more generic is valuable.</p>

<p>In practice, this means that <em>any</em> subclass of <code>Race</code> should be able to assign values to a <code>Character</code>&rsquo;s <code>@size</code>, <code>@speed</code> 
and <code>@darkvision</code> instance variables, and the assigned values would depend on the subclass itself. This is rather easy 
to write tests for.</p>

<p>First, we need to be able to define the values that a race will assign:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"test_helper"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/race"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/character"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">class</span> <span class="nc">RaceTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
    <span class="k">def</span> <span class="nf">test_race_initialization</span>
      <span class="n">race</span> <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">speed: </span><span class="mi">30</span><span class="p">,</span> <span class="ss">size: :small</span><span class="p">,</span> <span class="ss">darkvision: </span><span class="mi">5</span><span class="p">)</span>
      
      <span class="n">assert_equal</span> <span class="mi">30</span><span class="p">,</span> <span class="n">race</span><span class="p">.</span><span class="nf">speed</span>
      <span class="n">assert_equal</span> <span class="ss">:small</span><span class="p">,</span> <span class="n">race</span><span class="p">.</span><span class="nf">size</span>
      <span class="n">assert_equal</span> <span class="mi">5</span><span class="p">,</span> <span class="n">race</span><span class="p">.</span><span class="nf">darkvision</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>test/race_test.rb
</figcaption></figure></div>

<p>Then, we need to ensure that using the race to extend a <code>Character</code> assigns these values. We can simply cannibalize 
the tests for <code>MountainDwarf</code>; but for the sake of conciseness, we&rsquo;ll squash the 3 tests into a single one with 
multiple assertions:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"test_helper"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/race"</span>
<span class="nb">require</span> <span class="s2">"./lib/steel_vellum/character"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">class</span> <span class="nc">RaceTest</span> <span class="o">&lt;</span> <span class="no">Minitest</span><span class="o">::</span><span class="no">Test</span>
    <span class="k">def</span> <span class="nf">test_race_initialization</span>
      <span class="n">race</span> <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">speed: </span><span class="mi">30</span><span class="p">,</span> <span class="ss">size: :small</span><span class="p">,</span> <span class="ss">darkvision: </span><span class="mi">5</span><span class="p">)</span>
      
      <span class="n">assert_equal</span> <span class="mi">30</span><span class="p">,</span> <span class="n">race</span><span class="p">.</span><span class="nf">speed</span>
      <span class="n">assert_equal</span> <span class="ss">:small</span><span class="p">,</span> <span class="n">race</span><span class="p">.</span><span class="nf">size</span>
      <span class="n">assert_equal</span> <span class="mi">5</span><span class="p">,</span> <span class="n">race</span><span class="p">.</span><span class="nf">darkvision</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">test_extending_a_character_sets_default_for_their_traits</span>
      <span class="n">race</span>      <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">speed: </span><span class="mi">25</span><span class="p">,</span> <span class="ss">size: :medium</span><span class="p">,</span> <span class="ss">darkvision: </span><span class="mi">60</span><span class="p">)</span>
      <span class="n">character</span> <span class="o">=</span> <span class="no">Character</span><span class="p">.</span><span class="nf">new</span>
      
      <span class="n">assert_nil</span> <span class="n">character</span><span class="p">.</span><span class="nf">speed</span>
      <span class="n">assert_nil</span> <span class="n">character</span><span class="p">.</span><span class="nf">size</span>
      <span class="n">assert_nil</span> <span class="n">character</span><span class="p">.</span><span class="nf">darkvision</span>
      
      <span class="n">character</span><span class="p">.</span><span class="nf">extend</span> <span class="n">race</span>
      
      <span class="n">assert_equal</span> <span class="mi">25</span><span class="p">,</span>      <span class="n">character</span><span class="p">.</span><span class="nf">speed</span>
      <span class="n">assert_equal</span> <span class="ss">:medium</span><span class="p">,</span> <span class="n">character</span><span class="p">.</span><span class="nf">size</span>
      <span class="n">assert_equal</span> <span class="mi">60</span><span class="p">,</span>      <span class="n">character</span><span class="p">.</span><span class="nf">darkvision</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>test/race_test.rb
</figcaption></figure></div>

<p>The implementation is pretty straightforward too, except for one subtlety:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="c1"># TODO: maybe add a DSL for defining races (e.g. +Race.new { size :medium }+)</span>
  <span class="k">class</span> <span class="nc">Race</span> <span class="o">&lt;</span> <span class="no">Module</span>
    <span class="nb">attr_accessor</span> <span class="ss">:speed</span><span class="p">,</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:darkvision</span>
    
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">speed: </span><span class="mi">30</span><span class="p">,</span> <span class="ss">size: :medium</span><span class="p">,</span> <span class="ss">darkvision: </span><span class="mi">0</span><span class="p">)</span>
      <span class="vi">@speed</span><span class="p">,</span> <span class="vi">@size</span><span class="p">,</span> <span class="vi">@darkvision</span> <span class="o">=</span> <span class="n">speed</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">darkvision</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">extended</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
      <span class="n">character</span><span class="p">.</span><span class="nf">size</span>       <span class="o">=</span> <span class="vi">@size</span>
      <span class="n">character</span><span class="p">.</span><span class="nf">speed</span>      <span class="o">=</span> <span class="vi">@speed</span>
      <span class="n">character</span><span class="p">.</span><span class="nf">darkvision</span> <span class="o">=</span> <span class="vi">@darkvision</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lbi/steel_vellum/race.rb
</figcaption></figure></div>

<p>The <code>#extended</code> hook method must be defined in the <em>class</em> (singleton or not) of the object on which it will be called. 
This is why, when its definition was in the <code>MountainDwarf</code> class, it was sent to <code>self</code>. (In other words: <code>.extended</code> 
was defined as a <em>class method</em> of <code>MountainDwarf</code>). However, since we&rsquo;re moving this definition up to the 
<em>class</em> of all races modules, the <code>#extended</code> must now be defined as an <em>instance</em> method<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup> of <code>Race</code>.</p>

<p>(Note also that we&rsquo;ve also added default values in the initializer, even though we didn&rsquo;t write tests for that, and therefore 
have no idea if this is legitimate design or not – we&rsquo;re freewheeling! 🤘)</p>

<h3 id="hidden-edge-cases">Hidden edge cases</h3>

<p>Here is a secret about BDD: since it&rsquo;s about letting the <em>expected behavior</em> drive the design, edge cases – in other 
words: <em>unexpected</em> behavior – can slip through. Which is why it is important to consider these edge cases when working 
at the unit test level, where they are easier to think about.</p>

<p>In our case, even though we&rsquo;ve kept saying that a character&rsquo;s race gives it <em>default</em> values for some traits, we haven&rsquo;t 
tested for the (unlikely) situation where some would have already been defined <em>before</em> the race was assigned. So let&rsquo;s 
add that. And while we&rsquo;re at it, let&rsquo;s cover another edge case: using a race module to extend an object which is not 
an instance of the <code>Character</code> class.</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_extending_a_character_doesnt_change_existing_traits</span>
  <span class="n">race</span>      <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">speed: </span><span class="mi">25</span><span class="p">)</span>
  <span class="n">character</span> <span class="o">=</span> <span class="no">Character</span><span class="p">.</span><span class="nf">new</span>
  
  <span class="n">character</span><span class="p">.</span><span class="nf">speed</span> <span class="o">=</span> <span class="mi">30</span>
  <span class="n">character</span><span class="p">.</span><span class="nf">extend</span> <span class="n">race</span>
  
  <span class="n">assert_equal</span> <span class="mi">30</span><span class="p">,</span> <span class="n">character</span><span class="p">.</span><span class="nf">speed</span> <span class="c1"># hasn't changed to 25</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">test_extending_an_irrelevant_class_does_nothing</span>
  <span class="n">race</span> <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">obj</span>  <span class="o">=</span> <span class="no">Object</span><span class="p">.</span><span class="nf">new</span>

  <span class="n">obj</span><span class="p">.</span><span class="nf">extend</span> <span class="n">race</span> <span class="c1"># should not raise nor do anything</span>
<span class="k">end</span>
</code></pre></div><figcaption>test/race_test.rb (excerpt)
</figcaption></figure></div>

<p>The final implementation is quite easy:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="c1"># TODO: maybe add a DSL for defining races (e.g. +Race.new { size :medium }+)</span>
  <span class="k">class</span> <span class="nc">Race</span> <span class="o">&lt;</span> <span class="no">Module</span>
    <span class="nb">attr_accessor</span> <span class="ss">:speed</span><span class="p">,</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:darkvision</span>
    
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">speed: </span><span class="mi">30</span><span class="p">,</span> <span class="ss">size: :medium</span><span class="p">,</span> <span class="ss">darkvision: </span><span class="mi">0</span><span class="p">)</span>
      <span class="vi">@speed</span><span class="p">,</span> <span class="vi">@size</span><span class="p">,</span> <span class="vi">@darkvision</span> <span class="o">=</span> <span class="n">speed</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">darkvision</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">extended</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>
      <span class="n">assign_traits</span><span class="p">(</span><span class="n">o</span><span class="p">)</span> <span class="k">if</span> <span class="n">o</span><span class="p">.</span><span class="nf">kind_of?</span> <span class="no">Character</span>
    <span class="k">end</span>
    
    <span class="kp">private</span>
    
    <span class="k">def</span> <span class="nf">assign_traits</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
      <span class="n">character</span><span class="p">.</span><span class="nf">size</span>       <span class="o">||=</span> <span class="vi">@size</span>
      <span class="n">character</span><span class="p">.</span><span class="nf">speed</span>      <span class="o">||=</span> <span class="vi">@speed</span>
      <span class="n">character</span><span class="p">.</span><span class="nf">darkvision</span> <span class="o">||=</span> <span class="vi">@darkvision</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lib/steel_vellum/race.rb
</figcaption></figure></div>

<h3 id="final-cleanup">Final cleanup</h3>

<p>Now that the logic for assigning default values to a character&rsquo;s racial traits is moved up to the <code>Race</code> class from 
which <code>MountainDwarf</code> inherits, we can clean up our previous work, by deleting the now redundant unit tests in 
<code>MountainDwarfTest</code>, and the logic from <code>MountainDwarf</code>:</p>

<div class="language-ruby highlighter-rouge_with_caption"><figure><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"../race"</span>

<span class="k">module</span> <span class="nn">SteelVellum</span>
  <span class="k">module</span> <span class="nn">Races</span>
    <span class="no">MountainDwarf</span> <span class="o">=</span> <span class="no">Race</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">size: :medium</span><span class="p">,</span> <span class="ss">speed: </span><span class="mi">25</span><span class="p">,</span> <span class="ss">darkvision: </span><span class="mi">60</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div><figcaption>lib/steel_vellum/races/mountain_dwarf.rb
</figcaption></figure></div>

<p>And this is it (for now)! We&rsquo;ve successfully implemented the first actual piece of logic in our library, which is 
actually quite a lot:</p>

<ul>
  <li>We can define a character race, or at least 3 of its traits for now.</li>
  <li>These traits are automatically assigned to a character when their race is chosen during character creation.</li>
  <li>For developers who&rsquo;ll eventually use our library, assigning a <code>Race</code> to a <code>Character</code> object gives it some kind 
of “type”, which is probably a false good idea, but fun nonetheless.</li>
</ul>

<p>We can now return to our big loop, once again, and see what the DM of BDDing has for us in the next installment of 
this series!</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Roughly speaking.&nbsp;<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Feel free to try this out in an IRB console: create 2 instances of <code>Character</code>, create a new <code>Race</code>, include it 
  in <code>Character</code> with <code>Character.include the_new_race</code> and see that both the instances now “are” also of this race.&nbsp;<a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Don&rsquo;t be mistaken, this class has nothing to do with the <a href="https://archive.org/details/designpatternsel00gamm/page/126/mode/2up">singleton design pattern</a>, or the <a href="https://docs.ruby-lang.org/en/3.2/Singleton.html">Singleton</a> module!&nbsp;<a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>Technically, even if store in an instance variable, the value will be returned by a method (namely, a reader accessor), but hopefully you see what I mean.&nbsp;<a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p>As an exercice, can you guess what would happen, and why, if within the <code>Race</code> class we&rsquo;d write <code>def self.extended</code>?&nbsp;<a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]>
      </content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/blog/2023/10/02/euruko-2023.html</id>
      <title>Euruko 2023</title>
      <updated>2023-10-02T15:39:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/blog/2023/10/02/euruko-2023.html" />

      <published>2023-10-02T15:39:00+02:00</published>
      <content type="html">
        <![CDATA[<p>After a pandemic lockdown and two stints in companies oblivious to the benefits of tech conferences (no wonder I didn&rsquo;t 
stay), 2023 is the year where I&rsquo;m finally attending confs again. I&rsquo;ll be at Rails World in a few days, but last week, 
it was <a href="https://2023.euruko.org">Euruko</a>. TL;DR: in spite of a few organisational hiccups, it was great and I had a blast.</p>

<h3 id="venue-and-organisation">Venue and organisation</h3>

<p>Being a bit of a homebody, and even more a complete ignorant of geography, I had a slight hesitation upon seeing that 
this year&rsquo;s Euruko would be in Lithuania. It&rsquo;s on the opposite side of Europe! But, bless be the EU, getting there was 
as easy as going to, say, <a href="https://rubyonrails.org/world">Amsterdam</a>.</p>

<p>I was expecting Vilnius to be charming, with some discrete relics of its Soviet past, and this exactly how it was. It is 
modern and yet history-rich, and very lively – I wasn&rsquo;t expecting that many people on terrasses and paved streets. I went 
for a run one evening, through the old town with <a href="https://www.youtube.com/watch?v=7fDvxlK2FMc">Carpenter Brut</a> playing in 
my Airpods, and between the Renaissance façades<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, the occasional brutalist artefacts, the busy crowd and the soft public 
lighting, I felt like in the Prague hub of <a href="https://www.eidosmontreal.com/games/deus-ex-mankind-divided/">Deux Ex: Mankind Divided</a>. 
Which was great (it is a good game after all).</p>

<p>The conference took place in the main campus of VILNIUS TECH, a few minutes by car from the city center. I was initially 
disappointed to see that the venue was not practically accessible by foot, but it turned out not to be an issue: the 
organisers had put a perfectly fine transfer system and the ride was an extra opportunity for sightseeing. And the campus 
was ideal for a conference: modern, well-equipped, with plenty of room to sit or chat. The catering was, let&rsquo;s say, 
canteen-level, which made sense in an university, I guess. Still, I don&rsquo;t want to complain: these things are hard 
to organise, and we didn&rsquo;t come for a gastronomical experience anyway. So, overall: the venue was fine.</p>

<p>In fact, <em>fine</em> could describe the whole of the organisation. Nothing was particularly astonishing, and since 2023 
was Ruby&rsquo;s 30th anniversary, Euruko&rsquo;s 20th, and Vilnius 700th, and was kind of expecting something really special, but 
this excessive hype is on me. There were a few unfortunate technical issues, but these things happen, and once again: 
organising a conference is a lot of difficult work, so having almost everything run smoothly is already a great 
success. My only serious complain is on the agenda – but I&rsquo;ll come back to this later.</p>

<h3 id="the-conference-talks">The conference talks</h3>

<p>I&rsquo;m happy to say that the planned talks were exactly what I wanted from Euruko: varied<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>, sometimes technical and 
sometimes aspirational, sometimes straightforward and sometimes weird, sometimes beginner-friendly and sometimes more 
advanced. My personal highlights are <a href="https://twitter.com/srbaker">Steven Baker</a>&rsquo;s “Reflections on a Reluctant Revolution”, 
<a href="https://github.com/hasumikin">Hitoshi Hasumi</a>&rsquo;s &ldquo;A Beginner&rsquo;s Complete Guide to Microcontroller Programming in Ruby&rdquo; 
and, unsurprisingly, <a href="https://twitter.com/yukihiro_matz">Matz</a>&rsquo;s keynote on a sensitive topic: the GVL.</p>

<p>A few talks stood out as not being especially Ruby-centric, such as <a href="https://twitter.com/carlastabile">Carla Urrea Stabile</a>&rsquo;s 
(on passkeys), <a href="https://twitter.com/chacon">Scott Chacon</a>&rsquo;s (on version control), or <a href="https://www.linkedin.com/in/hana-harencarova">Hana Harencarova</a>&rsquo;s 
(on feature flags). Those did smell like sponsor talks, but each time the speakers were really nice and entertaining, 
and didn&rsquo;t push for their respective companies&rsquo; products. (And Carla, in particular, was very patient with the technical 
difficulties she had to endure.)</p>

<h3 id="the-unconference-talks">The unconference talks</h3>

<p>These are the problematic ones. This year, Euruko&rsquo;s organisers choose to dedicate half the agenda to ”unconference” talks 
– talks pitched and then given by audience members, without oversight by the selection committee. I&rsquo;m fine with opening 
the stage to mere audience members, but 8 talks – that&rsquo;s a bit much, to me at least, and it felt like padding.</p>

<p>To their credit, all the speakers where confortable with the exercice and knew their material; however, most of the topics 
were not really interesting (IMHO once again; YMMV). Lots of talks about performance, for example, which is rarely a 
concern of mine. Still, I really enjoyed 2 of these unconference talks: Chikahiro Tokoro&rsquo;s, because of the pure joy of 
programming that he radiated, and Johnny Shields&rsquo;s, which was genuinely interesting from a technical point of view.</p>

<h3 id="the-people-and-the-hallway-track">The people and the hallway track</h3>

<p>Even though you definitely <a href="https://hynek.me/articles/hallway-track/">shouldn&rsquo;t focus on it</a>, the “hallway track”, and 
more generally the socialising, is the big appeal of conferences. And this is what made Euruko such a great experience 
for me this year. Going by myself instead of with a bunch of colleagues definitely helped, since I <em>had</em> to mingle and 
join conversations. Socialising at conferences is a bit like TDD: it may seem like an extra burden at first, but once 
you do it, it becomes obvious that it&rsquo;s the most important thing you could do.</p>

<p>There is something special in spending time talking about what is both a common passion and a daily, professional concern 
with people from a different-but-alike background. From a practical, pragmatic perspective, it is very enlightening – 
you get to compare experiences, challenge opinions and have yours challenged, and in the end learn a lot. It is stepping 
outside of one&rsquo;s habits zone while being guaranteed to stay within one&rsquo;s domain of expertise. A invaluable bowl of fresh 
air.</p>

<p>But, more importantly, it recharges your passion batteries. I don&rsquo;t envy, and don&rsquo;t value a lot, developers who claim 
not to care about the language or framework they use. ”It&rsquo;s just a tool&rdquo; is misguided at best, and symptomatic at worst. 
I&rsquo;m a firm believer in being passionate about one&rsquo;s work – it is a luxury not everyone can afford, but because it is 
affordable in programming, we should all strive for it. And passion is also fuelled by the feeling of belonging to a 
community, to be among peers, and by sharing time and ideas with them. This is especially true in Ruby, the 
friendliest and smartest language, with the friendliest and smartest community (MINASWAN FTW). The time I spent talking 
with fellow rubyists of all walks of life was the most rewarding of the whole 3 days. It taught me a lot, energised me 
a lot, and renewed my love for my work.</p>

<h3 id="takeaways">Takeaways</h3>

<p>But besides a full charge, did I bring back any souvenirs from my trip to Vilnius? Yes, a couple, in fact.</p>

<p>First of all, Ruby is <em>old</em>. It is common to say that is it <em>mature</em>, but this is an euphemism. Ruby has a long history, 
and is showed throughout the conference – in Stephen Backer&rsquo;s memories of the early days of the Agile Manifesto and 
the famous names of this era, in Matz&rsquo;s rationals for the GVL (a design choice made at a time when computers had only 
one core), and in the number of participants with 15, 20 or 25 years of experience with Ruby. Ruby&rsquo;s popularity came 
late, but it doesn&rsquo;t negate the fact that Ruby&rsquo;s history is long, and covers several generations of developers.</p>

<p>And yet, Ruby ages gracefully. That is in part due, in think, to the core team&rsquo;s excellent leadership, and ability to 
accept change and new features, while having the courage to refuse proposals that wouldn&rsquo;t be right. Once again, Matz&rsquo;s 
thoughts on the GVL embody this brave balance: just because nowadays everybody seem to want to get rid of it, doesn&rsquo;t 
mean that it should be done, but let&rsquo;s keep an eye out and an open mind.</p>

<p>Another factor in Ruby&rsquo;s excellent shape despite its age is certainly the new blood joining the community continuously. 
Ruby may not be as trendy as it was 10 years ago, but it&rsquo;s still a common first language, for very good reasons, and having 
so many beginners in the community helps in a least two ways: it brings in new ideas, and forces us old-timers to stay 
welcoming and keep our craft accessible – or even inclusive. Yet, after realising how important the history of Ruby 
and its pioneers was for me, and seeing how many people were oblivious to it because they were not there then, I believe 
that we should do more to share these 30 years of history. <a href="http://poignant.guide">_why&rsquo;s poignant guide</a> deserves an update.</p>

<p>Euruko was also a great reminder that Ruby is greater than the Web, and is not limited to Rails. Yes, both these things 
have played a great role in Ruby&rsquo;s popularity, and still do, and Rails in particular influences significantly Ruby, 
but this overlap should not limit Ruby&rsquo;s horizon. One of the best talks this years was a demonstration of Ruby running 
on a computer so simple that it could only light up a LED. A very few talks even touched upon the Web, let alone Rails.</p>

<p>Finally, and unsurprisingly, I came back from Euruko with an exhilarating feeling of <em>belonging</em>. Ruby was conceived 
for developer&rsquo;s happiness, and developer – or, more broadly, people – are still at its core. This showed through Steve 
Backer&rsquo;s personal talk, but also in Masafumi Okura sharing his delight of simply reading (abstruse) Ruby code, and 
obviously in Matz&rsquo;s friendly, caring personality.</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Or maybe they were Gothic. Or Baroque. Or Neo-Classical. Vilnius&rsquo; architecture is very rich, and I&rsquo;m very ignorant.&nbsp;<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Unfortunately, as often, there was no parity in the speakers line-up, though.&nbsp;<a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
]]>
      </content>
    </entry>
  
</feed>
