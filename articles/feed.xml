<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>2-45.pm • Ronan Limon Duparcmeur, fractional CTO and Renaissance developer for hire</title>
<meta name="description" content="I'm Ronan; I help companies build great apps and great teams.">
<meta name="author" content="Ronan Limon Duparcmeur">

<link rel="canonical" href="https://2-45.pm/articles/feed.xml" />







  <link rel="stylesheet" href="/css/2-45.css">
  
  
  <link rel="me" href="https://ruby.social/@r3trofitted">
  
  <script defer data-domain="2-45.pm" src="https://plausible.io/js/script.js"></script>
</head>
<body id="grainy-dinosaur">
  <header>
  <nav id="primary-nav">
    <ul class="inline-list">
      <li><a href="/">2-45.pm</a></li>
      <li><a href="/work-with-me.html">Work with me</a></li>
      <li><a href="/blog/">Blog</a></li>
      <li><a href="/articles/">Tech articles</a></li>
    </ul>
  </nav>
</header>
  <main>
    <article
  itemscope itemtype="http://schema.org/BlogPosting" 
  class="post h-entry "
  data-category="miscellanea"
  
  >
  <header class="post-header">
    <h2 class="post-title p-name" itemprop="name headline">
      2-45.pm: tech articles by Ronan Limon Duparcmeur
    </h2>
    <p class="post-meta">
      <time class="dt-published" datetime="2023-11-19T20:04:54+01:00" itemprop="datePublished">
        Nov 19, 2023
      </time>
  </header>

  <div class="post-content e-content" itemprop="articleBody">
    <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  

  <id>https://2-45.pm/articles/</id>
  <title>2-45.pm: tech articles by Ronan Limon Duparcmeur</title>
  <updated>2023-11-14T23:03:00+01:00</updated>

  <author>
    <name>Ronan Limon Duparcmeur</name>
    <email>ronan@2-45.pm</email>
  </author>

  <link href="https://2-45.pm/articles/feed.xml" rel="self" />
  <link href="https://2-45.pm/articles" />

  <rights> © Ronan Limon Duparcmeur - ronan@2-45.pm </rights>
  
  
    <entry>
      <id>https://2-45.pm/articles/articles/2023/11/14/better-practices-by-example-rspec.html</id>
      <title>Better practices by example: RSpec</title>
      <updated>2023-11-14T23:03:00+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/articles/2023/11/14/better-practices-by-example-rspec.html" />

      <published>2023-11-14T23:03:00+01:00</published>
      <content type="html">&lt;p&gt;Some time ago, I stumbled upon &lt;a href=&quot;{% link _posts/2023-11-02-humility-check.md %}&quot;&gt;an interesting technical test&lt;/a&gt;. However, 
the more I looked at the provided Rails app, the more issues I found with it, to the point that I find it good material 
for an educational (hopefully) piece. But before I start, two disclaimers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;This is not a rebuttal of the test itself.&lt;/strong&gt; And I&amp;rsquo;m certainly not trying to explain away my poor performance. The 
test was fair and fine; it provided realistic and functioning&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; code, similar to a lot of things I&amp;rsquo;ve seen in 
actual applications. It just happens that the code, especially the specs, left room for improvement.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The shortcomings in the code may be intentional&lt;/strong&gt;. It is an assessment app, after all. Maybe its code is 
suboptimal because making it better wasn&amp;rsquo;t worth the effort. Or maybe the shortcomings are deliberate, to better 
assess the candidates. But that&amp;rsquo;s not important.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What matters is not really where the following code comes from; the important thing is that it is a good example of 
something that &lt;em&gt;works&lt;/em&gt; but isn&amp;rsquo;t quite &lt;em&gt;right&lt;/em&gt;. And making it right is important in real life. (And fun, too.)&lt;/p&gt;

&lt;h3 id=&quot;the-app-and-its-tests-code-here&quot;&gt;The app and its tests (&lt;a href=&quot;https://github.com/r3trofitted/pokebeep/tree/0_start_here&quot;&gt;&lt;code&gt;code here&lt;/code&gt;&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;You can find the repo &lt;a href=&quot;https://github.com/r3trofitted/pokebeep&quot;&gt;here&lt;/a&gt;. To avoid spoiling the original test, I&amp;rsquo;ve changed 
the app description and the names of the models, controllers and other resources; I&amp;rsquo;ve also re-created the application 
instead of starting from the initial codebase. But apart from that, everything is the same, especially the tests.&lt;/p&gt;

&lt;p&gt;And the tests are what I will focus on in this article. The application code doesn&amp;rsquo;t matter, and could be anything, as 
long as it makes the tests pass. The latter are made of two specs files, plus a support file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/specs/api_spec.rb&lt;/code&gt; contains specs for the two endpoints of the app&amp;rsquo;s API, &lt;code&gt;POST /beeps&lt;/code&gt; and 
&lt;code&gt;GET /summaries/{id}/{from}/{to}&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/specs/api_validation.rb&lt;/code&gt; contains specs specific to the expected response when wrong parameters are sent to the API.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/specs/public_api.rb&lt;/code&gt; contains a collection of helpers for the specs above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Obviously, the testing framework used here is RSpec.)&lt;/p&gt;

&lt;p&gt;Overall, these specs work, in that they break if the implementation is wrong and pass when it is right (except for a 
couple), but I have several issues with them nonetheless. Poor naming, poor organization, lack of idioms… None of these 
issues is deal-breaking in itself, but taken all together, they are a bit much. If I was reviewing these specs in a pull 
request, for example, I&amp;rsquo;d ask for a series of fixes&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;h3 id=&quot;1-thats-how-you-get-ants-code-here&quot;&gt;1. That&amp;rsquo;s how you get ants (&lt;a href=&quot;https://github.com/r3trofitted/pokebeep/tree/1_ants&quot;&gt;&lt;code&gt;code here&lt;/code&gt;&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;RSpec is very polite and never &lt;em&gt;demands&lt;/em&gt; you to do anything (I believe that it is because its original author is Canadian). 
This is especially true when it comes to organizing your spec files: by default, RSpec only asks for files ending in &lt;code&gt;_spec.rb&lt;/code&gt; 
in a &lt;code&gt;spec&lt;/code&gt; directory, and even this &lt;a href=&quot;http://rspec.info/documentation/3.12/rspec-core/RSpec/Core/Configuration.html&quot;&gt;can be configured differently&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rspec-rails&lt;/code&gt; is a little bit more structuring and suggests a canonical directory structure, in which files are placed 
according to the type of spec they contain: &lt;code&gt;/spec/models&lt;/code&gt; for model specs, &lt;code&gt;/spec/system&lt;/code&gt; for system specs, etc. Even 
if this organization is not mandatory&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, it has at least two benefits. Being conventional, it makes the specs 
easier to contextualize and the suite easier to navigate. Also, it removes the need for some metadata, since RSpec can 
infer them from the layout.&lt;/p&gt;

&lt;p&gt;And so, we&amp;rsquo;ll start by moving the files around. Both &lt;code&gt;api_spec.rb&lt;/code&gt; and &lt;code&gt;api_validation_spec.rb&lt;/code&gt; contain 
&lt;a href=&quot;http://rspec.info/features/6-0/rspec-rails/request-specs/request-spec/&quot;&gt;&lt;strong&gt;request specs&lt;/strong&gt;&lt;/a&gt;: specs that use the whole 
stack, making actual&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; HTTP requests that go through the router, controllers, etc. (The only difference with system 
specs is that the responses are not run by a browser, but asserted against as they are received.) The canonical place 
for such specs is thus &lt;code&gt;/spec/requests/&lt;/code&gt;, and because the configuration option &lt;code&gt;infer_spec_type_from_file_location!&lt;/code&gt; is 
on, we can remove the explicit declaration of the spec type by metadata, like so:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;public api&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :request&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/api_spec.rb (before)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;public api&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/requests/api_spec.rb (after)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;As for the helpers file, I would prefer to put it in a dedicated directory, too. Once again, this is not mandated by 
RSpec, but by tradition support files go into a &lt;code&gt;/spec/support&lt;/code&gt; directory, so this is where we&amp;rsquo;ll 
place the &lt;code&gt;public_api.rb&lt;/code&gt; file. And while we&amp;rsquo;re at it, we&amp;rsquo;ll rename it &lt;code&gt;api_helpers&lt;/code&gt;, which is more fitting.&lt;/p&gt;

&lt;p&gt;Having done so, we&amp;rsquo;d better rename the module defined within this file &lt;code&gt;ApiHelpers&lt;/code&gt; instead of &lt;code&gt;PublicApi&lt;/code&gt;. But instead 
of updating both the &lt;code&gt;api_spec.rb&lt;/code&gt; and &lt;code&gt;api_validation_spec.rb&lt;/code&gt; accordingly, we&amp;rsquo;ll update RSpec&amp;rsquo;s configuration.&lt;/p&gt;

&lt;p&gt;Because the helper module is used by both specs groups, and both groups are made of request specs, we can configure RSpec 
to always include the module in any request spec. This is done by adding a line in the &lt;code&gt;rails_helper.rb&lt;/code&gt; file, in 
the configuration block:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApiHelpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :request&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/rails_helper.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;However, for this module to be available, the file &lt;code&gt;support/api_helpers.rb&lt;/code&gt; must first be required. The easiest way to do so
 is to tell RSpec to preemptively require all the files in the &lt;code&gt;/spec/support&lt;/code&gt; directory, which is as easy as uncommenting 
a line in the generated &lt;code&gt;rails_helper.rb&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;spec&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;support&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;**&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;*.rb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/rails_helper.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And now, instead of updating the &lt;code&gt;require&lt;/code&gt; and the &lt;code&gt;include&lt;/code&gt; instructions in the spec files, we can remove them 
altogether. For example, &lt;code&gt;api_spec.rb&lt;/code&gt; now looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rails_helper&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;public api&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/requests/api_spec.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Functionally, we haven&amp;rsquo;t changed anything, but our &lt;code&gt;/spec&lt;/code&gt; directory is much more idiomatic now, and we&amp;rsquo;ve trimmed 
a little bit of boilerplate from our spec files. Besides, keeping things neat and tidy prevents all kinds of bugs.&lt;/p&gt;

&lt;h3 id=&quot;2-phrasing-code-here&quot;&gt;2. Phrasing! (&lt;a href=&quot;https://github.com/r3trofitted/pokebeep/tree/2_phrasing&quot;&gt;&lt;code&gt;code here&lt;/code&gt;&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;The main benefit of RSpec is arguably the ability to express your tests as &lt;em&gt;specifications&lt;/em&gt;. I mean, it&amp;rsquo;s in the name! You 
don&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to give your tests meaningful titles, as if each one was the description of a notable part of the system, 
but you lose half the value of RSpec if you don&amp;rsquo;t. Which is why I love to run the suite with the option&lt;br /&gt;
&lt;code&gt;--format=documentation&lt;/code&gt;. When the specs are well named, you get a good understanding of the system; if they&amp;rsquo;re not, you see it right away. 
Unfortunately, it is the case with the current output:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bin/rspec &lt;span class=&quot;nt&quot;&gt;-fd&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
public api
  generates summary based on beeps
  rounds presence hours to two decimal places
  discovers problematic date when there is no leave beep
  discovers problematic date when there is skip day beep

api validation
  when posting beep with wrong request params
    returns 400 status code
    returns 400 status code
    returns 400 status code
    returns 400 status code
    returns 400 status code
    returns 400 status code
    returns 400 status code
  when getting summary with wrong request params
    returns 400 status code
    returns 400 status code
    returns 400 status code

Finished in 0.04608 seconds (files took 0.35083 seconds to load)
14 examples, 0 failures
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The first part, about the public API, is not too bad; at least it reads properly. The part 
on the API validation, though, tells very little. Or rather, it tells very little &lt;em&gt;directly&lt;/em&gt;. 
Indirectly, it hints that these tests were probably an after-thought, and because they read 
more like the truncated descriptions of unit tests, rather than integration tests, they sound 
like code smell. (Yes, programming can lead to synesthesia.)&lt;/p&gt;

&lt;p&gt;Without changing their code, let&amp;rsquo;s rename the specs so that the output reads better, and 
actually describes the behavior of the application, as a good specification document would.&lt;/p&gt;

&lt;p&gt;When it comes to APIs, the best way to describe them is usually to go endpoint by endpoint. So 
let&amp;rsquo;s start by grouping the examples by the endpoint they cover:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;public api&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:second_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;generates summary based on beeps&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rounds presence hours to two decimal places&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/api_spec.rb (before)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;public api&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:second_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET /summaries/{pokemon_id}/{from}/{to}&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;generates summary based on beeps&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rounds presence hours to two decimal places&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/api_spec.rb (after)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;api validation&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;when posting beep with wrong request params&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;returns 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;when getting summary with wrong request params&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;returns 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/api_validation_spec.rb (before)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;api validation&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;POST /beeps&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;when posting beep with wrong request params&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;returns 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET /summaries/{pokemon_id}/{from}/{to}&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;when getting summary with wrong request params&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;returns 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/api_validation_spec.rb (after)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;A very small change, really, but it does improve the output:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bin/rspec &lt;span class=&quot;nt&quot;&gt;-fd&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
public api
  GET /summaries/{pokemon_id}/{from}/{to}
    generates summary based on beeps
    rounds presence hours to two decimal places
    discovers problematic date when there is no leave beep
    discovers problematic date when there is skip day beep

api validation
  POST /beeps
    when posting beep with wrong request params
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
  GET /summaries/{pokemon_id}/{from}/{to}
    when getting summary with wrong request params
      returns 400 status code
      returns 400 status code
      returns 400 status code

Finished in 0.04671 seconds (files took 0.51821 seconds to load)
14 examples, 0 failures
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Not only is this output closer to a decent specification, it also points out that our suite is not very well organized, 
since two different endpoints are featured in the same example group. More importantly, it also highlights holes in our 
test coverage: two endpoints are covered for validations, but only one when it comes to actual behavior. In other words: 
when we read these specs, we learn nothing about how the &lt;code&gt;POST /beeps&lt;/code&gt; endpoint is supposed to work. And we have no 
reason to believe that it is tested.&lt;/p&gt;

&lt;p&gt;To fix the first of these issues, let&amp;rsquo;s move the examples around and replace the &lt;code&gt;api_spec.rb&lt;/code&gt; and &lt;code&gt;api_validation_spec.rb&lt;/code&gt; 
with two new ones, one per endpoint: &lt;code&gt;beeps_api_spec.rb&lt;/code&gt; and &lt;code&gt;summaries_api_spec.rb&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rails_helper&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Beeps API&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;POST /beeps&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;when posting beep with wrong request params&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/beeps_api_spec.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Summaries API&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET /summaries/{pokemon_id}/{from}/{to}&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:second_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;generates summary based on beeps&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;when getting summary with wrong request params&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;returns 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/summaries_api_spec.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Once again, we&amp;rsquo;ve just moved code around, but once again the output is improved:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bin/rspec &lt;span class=&quot;nt&quot;&gt;-fd&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
Summaries API
  GET /summaries/{pokemon_id}/{from}/{to}
    generates summary based on beeps
    rounds presence hours to two decimal places
    discovers problematic date when there is no leave beep
    discovers problematic date when there is skip day beep
    when getting summary with wrong request params
      returns 400 status code
      returns 400 status code
      returns 400 status code

Beeps API
  POST /beeps
    when posting beep with wrong request params
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code
      returns 400 status code

Finished in 0.04657 seconds (files took 0.53198 seconds to load)
14 examples, 0 failures
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;ll deal with the absence (or not?) of tests for the &lt;code&gt;POST /beeps&lt;/code&gt; endpoint a bit later; for now, let&amp;rsquo;s get rid of 
the meaningless “returns 400 status code” repetition. The tests behind this sentence are useful; the issue is 
with their naming, because it doesn&amp;rsquo;t explain what “wrong” means in each case. But this is easy to change, and thanks 
to the &lt;code&gt;#specify&lt;/code&gt; alias for &lt;code&gt;#it&lt;/code&gt;, the code can still read nicely, too:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Summaries API&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET /summaries/{pokemon_id}/{from}/{to}&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;validations&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passing an invalid {from} parameter returns a 400 status code &#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passing an invalid {to} parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passing an invalid {pokemon_id} parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/summaries_api_spec.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bin/rspec spec/requests/summaries_api_spec.rb &lt;span class=&quot;nt&quot;&gt;-fd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;random
&lt;span class=&quot;go&quot;&gt;
Randomized with seed 32383

Summaries API
  GET /summaries/{pokemon_id}/{from}/{to}
    rounds presence hours to two decimal places
    discovers problematic date when there is no leave beep
    generates summary based on beeps
    discovers problematic date when there is skip day beep
    validations
      passing an invalid {pokemon_id} parameter returns a 400 status code
      passing an invalid {to} parameter returns a 400 status code
      passing an invalid {from} parameter returns a 400 status code

Finished in 0.04017 seconds (files took 0.52537 seconds to load)
7 examples, 0 failures

Randomized with seed 32383
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;(Quick aside: note that I&amp;rsquo;ve kept a common group for the tests about validation, aptly named “validations”, even if it 
doesn&amp;rsquo;t add much to the complete specification. That is because, otherwise, the validations specs could end up mixed up 
with the other specs in the output when the suite is run in random order&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;, and that wouldn&amp;rsquo;t read well.)&lt;/p&gt;

&lt;p&gt;Always work from the outside to the inside: now that everything is well organized and well labeled, we can start improving the code itself.&lt;/p&gt;

&lt;h3 id=&quot;3-danger-zone-code-here&quot;&gt;3. Danger Zone (&lt;a href=&quot;https://github.com/r3trofitted/pokebeep/tree/3_danger_zone&quot;&gt;&lt;code&gt;code here&lt;/code&gt;&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;At its core, a test is made up of 4 phases: setup, execution, assertion and teardown. (The names may vary but the 
idea is always the same.) The setup and/or teardown phases are often skipped or hidden away, but a test without clear 
execution and assertion phases is a strong code smell. At best, it is probably a case of excessive abstraction; at 
worst, it is a case of excessive abstraction which hides an error in the test.&lt;/p&gt;

&lt;p&gt;Looking at the specs for the Beeps API, this is exactly what we see: they have no setup, no teardown, but above all no 
assertion phase. In code terms, there is no call to &lt;code&gt;#expect&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rails_helper&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Beeps API&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;POST /beeps&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without any parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without a :pokemon_id parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without a :kind parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without a :timestamp parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting with an invalid :pokemon_id parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting with an invalid :kind parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting with an invalid :timestamp parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bad&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/requests/beeps_api_spec.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;At first, the specs may seem to work, because there is no action in the controller, which triggers an error, so the tests 
are red. But even an rigged implementation of &lt;code&gt;BeepsController#save&lt;/code&gt; would be enough to make the specs pass, when they 
shouldn&amp;rsquo;t:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeepsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# SLIME&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/app/controllers/beeps_controller.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bin/rspec spec/requests/beeps_api_spec.rb
&lt;span class=&quot;c&quot;&gt;.......
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
Finished in 0.02176 seconds (files took 0.35128 seconds to load)
7 examples, 0 failures
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;We need to add proper assertions to ensure that we are actually testing what we claim to be testing:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rails_helper&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Beeps API&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;POST /beeps&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without any parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without a :pokemon_id parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without a :kind parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without a :timestamp parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting with an invalid :pokemon_id parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting with an invalid :kind parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting with an invalid :timestamp parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bad&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/request/beeps_api_spec.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Now the specs fail, and we can replace our slime with a proper implementation. (I won&amp;rsquo;t show any here, since we&amp;rsquo;re 
focusing on the tests.)&lt;/p&gt;

&lt;h3 id=&quot;4-i-swear-to-god-i-had-something-for-this-code-here&quot;&gt;4. I swear to God, I had something for this. (&lt;a href=&quot;https://github.com/r3trofitted/pokebeep/tree/4_i_had_something&quot;&gt;&lt;code&gt;code here&lt;/code&gt;&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;At this point, we&amp;rsquo;ve dealt with the strongest code smells or messiness. But I&amp;rsquo;d like to see if we can &lt;em&gt;remove&lt;/em&gt; 
code, especially if we are to &lt;em&gt;add&lt;/em&gt; some later. (After all, by tidying up, we&amp;rsquo;ve apparently revealed missing specs 
for the Beeps API). Helpers are good candidates for such trimming, because, as a codebase evolves, they can easily stop 
being used, and yet they&amp;rsquo;re rarely removed. Let&amp;rsquo;s look at those we have.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;#post_beep&lt;/code&gt; makes a call to the &lt;code&gt;POST /beeps&lt;/code&gt; endpoint.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;#get_summary&lt;/code&gt; makes a call to the &lt;code&gt;GET /summaries&lt;/code&gt; endpoint.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;#summary&lt;/code&gt; makes a call to the &lt;code&gt;GET /summaries&lt;/code&gt; endpoint, makes an assertion against the response, and parses the 
received payload.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;#given_beep&lt;/code&gt; makes a call to the &lt;code&gt;POST /beeps&lt;/code&gt; endpoint, and makes an assertion against the response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The single responsibility principle doesn&amp;rsquo;t always apply to functions, but it&amp;rsquo;s still a good rule of thumb. On this 
account, &lt;code&gt;#summary&lt;/code&gt; and &lt;code&gt;#given_beep&lt;/code&gt; are suspicious; let&amp;rsquo;s put them aside for later and consider the simpler &lt;code&gt;#post_beep&lt;/code&gt; 
and &lt;code&gt;#get_summary&lt;/code&gt; helpers instead.&lt;/p&gt;

&lt;p&gt;Interestingly, these methods do very little; but at the same time, &lt;em&gt;what&lt;/em&gt; they do is rather significant, since calling 
the API is usually the heart of the “execution” phase of an API test. For these two reasons, I&amp;rsquo;d like to get rid of 
them: they don&amp;rsquo;t bring anything, but add a layer of indirection to our tests, and they do it in the exception phase, 
were clarity is the most important.&lt;/p&gt;

&lt;p&gt;Because these helpers do so little, removing them is very easy:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without any parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/requests/beeps_api_spec.rb (before)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without any parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/requests/beeps_api_spec.rb (after)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passing an invalid {from} parameter returns a 400 status code &#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get_summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;2019-01-01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/requests/summaries_api_spec.rb (before)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passing an invalid {from} parameter returns a 400 status code &#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/summaries/1/bad/2019-01-01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/requests/summaries_api_spec.rb (after)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;To be fair, one could argue that the code that calls the Summaries API is a bit &lt;em&gt;less&lt;/em&gt; legible than when going through 
the &lt;code&gt;get_summary&lt;/code&gt; helper, because the parameters stand out less when put inside the URL. It is a rather subjective 
tradeoff, and I could understand how a team would prefer the indirection of helper. However, &lt;em&gt;I&lt;/em&gt; prefer to get rid of it. 
Less code, less indirection, less chance of a bug.&lt;/p&gt;

&lt;h3 id=&quot;5-the-cumulative-hangover-will-kill-me-code-here&quot;&gt;5. The cumulative hangover will kill me. (&lt;a href=&quot;https://github.com/r3trofitted/pokebeep/tree/5_hangover&quot;&gt;&lt;code&gt;code here&lt;/code&gt;&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve dealt with the easy helpers, let&amp;rsquo;s look at the two suspicious ones – those that do more than one single 
thing, &lt;code&gt;#summary&lt;/code&gt; and &lt;code&gt;#given_beep&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem with both is that, among their multiple responsibilities, they do assertions. It&amp;rsquo;s actually a double issue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Like with the expectations in the preceding helpers, the assertions are so central to a test that they shouldn&amp;rsquo;t be 
hidden away in a helper.&lt;/li&gt;
  &lt;li&gt;These assertions are mixed with other things, are thus executed outside of the assertion phase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could argue that the 4-phases structure is too rigid, or that adding &lt;em&gt;extra&lt;/em&gt; assertions when doing something is like 
a freebie, a bonus protection against regressions. I disagree, especially with the later. Having assertions outside of 
the assertion phase, or unrelated to whatever the test is about, makes the test harder to understand. And because they 
are so fundamental to the longevity of a system, tests need to be very easy to understand. That is true as soon as the 
test is run; a failure message unrelated to the test case is perplexing and breaks the flow. Compare for example these 
two failures on the same test:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bin/rspec spec/requests/summaries_api_spec.rb:24 &lt;span class=&quot;nt&quot;&gt;-fd&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;Run options: include {:locations=&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./spec/requests/summaries_api_spec.rb&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;[&lt;/span&gt;24]&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
Summaries API
  GET /summaries/{pokemon_id}/{from}/{to}
    rounds presence hours to two decimal places (FAILED - 1)

Failures:

  1) Summaries API GET /summaries/{pokemon_id}/{from}/{to} rounds presence hours to two decimal places
     Failure/Error: expect(summary[:presence_hours]).to eq(7.83)
     
       expected: 7.83
            got: 7.833611111111111
     
       (compared using ==)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;./spec/requests/summaries_api_spec.rb:30:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;block &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3 levels&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &amp;lt;top &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
Finished in 0.03138 seconds (files took 0.49168 seconds to load)
1 example, 1 failure
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bin/rspec spec/requests/summaries_api_spec.rb:24 &lt;span class=&quot;nt&quot;&gt;-fd&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;Run options: include {:locations=&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./spec/requests/summaries_api_spec.rb&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;[&lt;/span&gt;24]&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
Summaries API
  GET /summaries/{pokemon_id}/{from}/{to}
    rounds presence hours to two decimal places (FAILED - 1)

Failures:

  1) Summaries API GET /summaries/{pokemon_id}/{from}/{to} rounds presence hours to two decimal places
     Failure/Error: expect(response.status).to eq(200)
     
       expected: 200
            got: 400
     
       (compared using ==)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;./spec/support/api_helpers.rb:5:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;given_beep&lt;span class=&quot;s1&quot;&gt;&#39;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;     #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./spec/requests/summaries_api_spec.rb:25:in `block (3 levels) in &amp;lt;top (required)&amp;gt;&#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
Finished in 0.03106 seconds (files took 0.48556 seconds to load)
1 example, 1 failure
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;In the first case, there is a direct relation between the expected result (“rounds presence hours”) and the error 
(“expected 7.83, got 7.833611111111111”); in the second, the failure is at the HTTP response level, not the rounding 
of a value.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#given_beep&lt;/code&gt; method is meant to be used to set up the test, preparing the necessary data in the setup phase. So 
let&amp;rsquo;s remove anything that is not related to this. In fact, since we &lt;strong&gt;don&amp;rsquo;t&lt;/strong&gt; want to test the API during this phase, 
there is no need to even use it. We can create the data directly instead.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApiHelpers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pokemon_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/support/api_helpers.rb (before)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApiHelpers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pokemon_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/support/api_helpers.rb (after)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Following the same principle, the &lt;code&gt;#summary&lt;/code&gt; helper can be stripped of its call to &lt;code&gt;#expect&lt;/code&gt;. However, there is a 
difference with &lt;code&gt;#given_beep&lt;/code&gt;: &lt;code&gt;#summary&lt;/code&gt; is used in the execution phase, and as we&amp;rsquo;ve seen above, it can be better to 
avoid hiding away the job done during this phase behind an indirection. Like with the &lt;code&gt;#get_summary&lt;/code&gt; helper, it&amp;rsquo;s hard 
for me to be very categorical; both styles have advantages. However, one thing is certain: if my team opted to keep the 
helper, I would require it to have a better name that explicitly conveys the idea that the endpoint is called and its 
response parsed. So here would be the two options:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rounds presence hours to two decimal places&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01 08:10:00:050&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01 16:00:01:070&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/summaries/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pokemon_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/2019-05-01/2019-05-01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbolize_keys&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:presence_hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;removing the helper
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rounds presence hours to two decimal places&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01 08:10:00:050&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01 16:00:01:070&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsed_summary_from_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_pokemon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:presence_hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;keeping the helper
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Personally, I chose to go with the former. (In part because I couldn&amp;rsquo;t find the helper&amp;rsquo;s name clear enough.)&lt;/p&gt;

&lt;h3 id=&quot;6-rampage-code-here&quot;&gt;6. Rampage! (&lt;a href=&quot;https://github.com/r3trofitted/pokebeep/tree/6_rampage&quot;&gt;&lt;code&gt;code here&lt;/code&gt;&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve reorganized the tests (files included), removed cruft and boilerplate, and fixed conceptual errors in some of 
the tests. Before taking a step back and looking at our renovated suite, let&amp;rsquo;s clean up a bit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;#to_unix&lt;/code&gt; helper is only used once now, so it can be removed and it&amp;rsquo;s relevant code used directly instead.&lt;/li&gt;
  &lt;li&gt;Since &lt;code&gt;#given_beep&lt;/code&gt; is the only helper method left, and it only used in a single group, it can be moved there, and 
the whole support file can be deleted. (To be honest, we could also get rid of the helper altogether.)&lt;/li&gt;
  &lt;li&gt;In the specs for the Summaries API, all the test use the same value for the &lt;code&gt;pokemon_id&lt;/code&gt; parameter, so none of 
the two &lt;code&gt;let&lt;/code&gt; calls (&lt;code&gt;let(:first_pokemon&lt;/code&gt; and &lt;code&gt;let(:second_pokemon&lt;/code&gt;) are of any use and can be deleted, too.&lt;/li&gt;
  &lt;li&gt;Some of the specs for the Summaries API are about a portion only of the summary, so there is no need to 
make assertions against the whole JSON object.&lt;/li&gt;
  &lt;li&gt;The canonical file structure of RSpec Rails allows the &lt;code&gt;/requests&lt;/code&gt; directory to be named &lt;code&gt;/api&lt;/code&gt; instead, which 
is fitting here, so we&amp;rsquo;ll rename it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, we&amp;rsquo;re back to a vanilla RSpec configuration and a suite composed of two files, one for each endpoint:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rails_helper&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Beeps API&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;POST /beeps&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without any parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without a :pokemon_id parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without a :kind parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without a :timestamp parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting with an invalid :pokemon_id parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting with an invalid :kind parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting with an invalid :timestamp parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bad&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/api/beeps_api_spec.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rails_helper&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Summaries API&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pokemon_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET /summaries/{pokemon_id}/{from}/{to}&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;generates summary based on beeps&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01 08:00&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01 16:00&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-02 08:00&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-02 16:00&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/summaries/1/2019-05-01/2019-05-30&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbolize_keys&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                                  &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;ss&quot;&gt;from: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-30&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;ss&quot;&gt;presence_hours: &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;16.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;ss&quot;&gt;problematic_dates: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rounds presence hours to two decimal places&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01 08:10:00:050&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01 16:00:01:070&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/summaries/1/2019-05-01/2019-05-01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbolize_keys&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:presence_hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;discovers problematic date when there is no leave beep&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01 08:00&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-02 08:00&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-02 16:00&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/summaries/1/2019-05-01/2019-05-30&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbolize_keys&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;presence_hours: &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;problematic_dates: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;discovers problematic date when there is skip day beep&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01 08:00&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;given_beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-02 16:00&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/summaries/1/2019-05-01/2019-05-30&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbolize_keys&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;presence_hours: &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;problematic_dates: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2019-05-01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;2019-05-02&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;validations&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passing an invalid {from} parameter returns a 400 status code &#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/summaries/1/bad/2019-01-01&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passing an invalid {to} parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/summaries/1/2019-01-01/bad&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passing an invalid {pokemon_id} parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/summaries/bad/2019-01-01/2019-02-02&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/api/summaries_api_spec.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Running the specs, we have a nice specification of the API:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bin/rspec &lt;span class=&quot;nt&quot;&gt;-fd&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
Beeps API
  POST /beeps
    posting without any parameter returns a 400 status code
    posting without a :pokemon_id parameter returns a 400 status code
    posting without a :kind parameter returns a 400 status code
    posting without a :timestamp parameter returns a 400 status code
    posting with an invalid :pokemon_id parameter returns a 400 status code
    posting with an invalid :kind parameter returns a 400 status code
    posting with an invalid :timestamp parameter returns a 400 status code

Summaries API
  GET /summaries/{pokemon_id}/{from}/{to}
    generates summary based on beeps
    rounds presence hours to two decimal places
    discovers problematic date when there is no leave beep
    discovers problematic date when there is skip day beep
    validations
      passing an invalid {from} parameter returns a 400 status code
      passing an invalid {to} parameter returns a 400 status code
      passing an invalid {pokemon_id} parameter returns a 400 status code

Finished in 0.04601 seconds (files took 0.53933 seconds to load)
14 examples, 0 failures
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Overall, I&amp;rsquo;d say that this we&amp;rsquo;ve done a pretty good job at turning something that just worked into something that 
is right. However, there is one last thing that we can do, and that is adding missing tests.&lt;/p&gt;

&lt;h3 id=&quot;7-youre-not-my-supervisor-code-here&quot;&gt;7. You&amp;rsquo;re not my supervisor! (&lt;a href=&quot;https://github.com/r3trofitted/pokebeep/tree/7_supervisor&quot;&gt;&lt;code&gt;code here&lt;/code&gt;&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;The specs for the Summaries API cover both its correct use (including edge cases) and its incorrect use, under the 
umbrella of “validations”. This is good. These specs are technically high-level integration tests, so I would advice 
to stick to testing the happy path, but because there are no low-level unit tests for the other cases, doing a bit 
more is fine. However, the specs for the Beeps API only cover the incorrect uses – no happy path, only the sad ones.&lt;/p&gt;

&lt;p&gt;It wasn&amp;rsquo;t &lt;em&gt;that&lt;/em&gt; bad so far because the happy path was sort of tested accidentally, through the misplaced assertion in 
the &lt;code&gt;#given_beep&lt;/code&gt; helper. Now that we&amp;rsquo;ve remove this, there are no guardrails to prevent us from breaking the API 
and not realizing it. But adding such a spec is very easy:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rails_helper&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Beeps API&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;POST /beeps&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;creates a Beep&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;pokemon_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;kind: :in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timestamp: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Beep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;validations&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;specify&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;posting without any parameter returns a 400 status code&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/beeps&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_http_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bad_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;/spec/api/beeps_api_spec.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Apart from wrapping the validation specs in a &lt;code&gt;describe&lt;/code&gt; block for readability&amp;rsquo;s sake when running the suite in random 
order, we&amp;rsquo;ve added a single test for the API&amp;rsquo;s happy path. Note the unusual look of this test; because we&amp;rsquo;re using 
the &lt;a href=&quot;http://rspec.info/features/3-12/rspec-expectations/built-in-matchers/change/&quot;&gt;&lt;code&gt;#change&lt;/code&gt; matcher&lt;/a&gt;, the code for the 
execution phase is somehow sandwiched between assertions, but there are still two distinct phases.&lt;/p&gt;

&lt;p&gt;This test is also notable for another thing: even though it is technically high-level, we&amp;rsquo;re making a low-level 
assertion, checking directly the database instead of going only through the API. I find this infringement of the 
Orthodoxy of the Test Pyramid justified here, since we have no lower-level tests anyway. YMMV.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s a wrap! Polishing is fun and we could keep doing it (for example by introducing unit tests to reduce the 
surface area of the request specs), but good enough if fine, and in real life, our time would probably be best spent 
somewhere else. So let&amp;rsquo;s move on, and enjoy our descriptive, exhaustive and yet lean specs!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;With one exception.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Or kindly lead the PR author towards these fixes without directly &lt;em&gt;asking&lt;/em&gt; for them.&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;em&gt;&amp;ldquo;RSpec Rails provides thoughtfully selected features to encourage good testing practices, but there’s no “right” 
  way to do it. Ultimately, it’s up to you to decide how your test suite will be composed.&amp;rdquo;&lt;/em&gt;&lt;br /&gt;
  (&lt;a href=&quot;https://github.com/rspec/rspec-rails#what-tests-should-i-write&quot;&gt;https://github.com/rspec/rspec-rails#what-tests-should-i-write&lt;/a&gt;)&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Well, &lt;em&gt;kinda&lt;/em&gt;. No data will go through the network, but the application will behave exactly as if.&amp;nbsp;&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Which should always be the case, by the way.&amp;nbsp;&lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/articles/2023/11/06/you-don-t-need-services-whatever-this-word-means.html</id>
      <title>You don&#39;t need services (whatever this word means)</title>
      <updated>2023-11-06T13:27:00+01:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/articles/2023/11/06/you-don-t-need-services-whatever-this-word-means.html" />

      <published>2023-11-06T13:27:00+01:00</published>
      <content type="html">&lt;p&gt;Last Sunday, I had the pleasure to attend one of &lt;a href=&quot;https://www.codewithjason.com&quot;&gt;Jason Swett&lt;/a&gt;&amp;rsquo;s online meetups. This 
time, Jason had put his consultant hat on, and was helping a cheerful developer, Duncan, fix his app. Having played 
the role of the consultant myself quite often, watching someone else&amp;rsquo;s approach was really interesting, so thank you 
Jason for this opportunity.&lt;/p&gt;

&lt;p&gt;However, even more interesting was Duncan&amp;rsquo;s problem, and tentative solution. The Rails app he works on has become a 
bit too big, convoluted, a suffers from performance issues. To remedy this, Duncan and his teammates have started 
extracting pieces of this monoliths to services.&lt;/p&gt;

&lt;p&gt;If you know me, you know that I tend to starting ranting when I hear the word &lt;em&gt;service&lt;/em&gt;. Years of misplaced hype have 
drained it of all meaning, but it is still everywhere – and, to me, its simple use is often a red flag. I&amp;rsquo;ll keep the 
rant for another post, but let&amp;rsquo;s take a moment to consider that, in Duncan&amp;rsquo;s case like in many others, “introducing 
services to a Rails app” meant two different things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Extracting pieces of logic from controllers and/or models&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; to another category of objects.&lt;/li&gt;
  &lt;li&gt;Extracting whole features to other applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my opinion, you very rarely need to do either one of these things, let alone both. Whatever your problem is, 
introducing services is probably not the solution; in fact, it could make things even worse, while distracting you from 
fixing the &lt;em&gt;real&lt;/em&gt; issues you&amp;rsquo;re facing.&lt;/p&gt;

&lt;h3 id=&quot;services-as-a-category-of-objects&quot;&gt;Services as a category of objects&lt;/h3&gt;

&lt;p&gt;Rails&amp;rsquo; decision to organize files by their role in the MVC pattern was already critized by people 
smarter than me &lt;a href=&quot;https://youtu.be/WpkDN78P884&quot;&gt;11 years ago&lt;/a&gt;, but honestly I&amp;rsquo;m personally fine with the layout 
of the &lt;code&gt;/app&lt;/code&gt; directory. However, I do believe that it trips newcomers up, by giving the impression that an object&amp;rsquo;s 
role in the system is extremely significant, and by conflating &lt;em&gt;role&lt;/em&gt; and &lt;em&gt;type&lt;/em&gt;. It makes you think in terms of 
&lt;em&gt;place in the filesystem&lt;/em&gt;, instead of &lt;em&gt;responsibilities in the running system&lt;/em&gt;. The folder in which the source file 
for an object doesn&amp;rsquo;t matter; what matters is what the object does, and what it is in charge of. It&amp;rsquo;s like job titles: 
they mean little, so don&amp;rsquo;t obsess over them.&lt;/p&gt;

&lt;p&gt;As an app grows, it does more and more, which means that there are more and more responsibilities to hand over to the 
objects in its system. The natural tendency is to hand these extra responsibilities to the current objects in the 
architecture, but then they become bigger, and so do their files. We tell developers to keep their controllers 
thin, so they feed the extra stuff to the models – but then we tell them that the models should be thin, too. It&amp;rsquo;s a 
conundrum when the only two directories reasonably available are &lt;code&gt;app/controllers&lt;/code&gt; and &lt;code&gt;app/models&lt;/code&gt;; the natural solution 
is to add a new directory, for a new role: &lt;code&gt;app/services&lt;/code&gt;. And now you can have bloated objects with fuzzy 
responsibilities, but feel good about it.&lt;/p&gt;

&lt;p&gt;The problem here is not that a new directory is added; it&amp;rsquo;s that the underlying issue is not solved, only hidden behind 
a small indirection. And now you have an hybrid architecture, an MSVC chimera that goes against the conventions of 
a Rails app. Which is morally fine, but throws away the benefits of the convention-over-configuration principle. You 
don&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to stay on the rails, but if you don&amp;rsquo;t, you&amp;rsquo;d better know what you&amp;rsquo;re doing; and if you&amp;rsquo;re blindly going for 
services, you probably don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Now, there are other justifications for introducing “service objects” into a Rails codebase, but I&amp;rsquo;ll ignore them since 
I&amp;rsquo;m already three paragraphs in, and my advice is still the same for all of them: &lt;strong&gt;consider your object a simple model&lt;/strong&gt;. 
Not all models in a Rails app have to be ActiveRecord models; the definition of model has nothing to do with the 
persistence in a database. In fact, by default, everything &lt;em&gt;is&lt;/em&gt; a model. If your new object has no responsibility 
related to the rendering, the routing, or the processing of an incoming request for a resource, then it is a model. Plain 
and simple. Sometimes models need to store their data, sometimes they don&amp;rsquo;t, but as long as they are in charge of 
some business domain, they&amp;rsquo;re models.&lt;/p&gt;

&lt;p&gt;Keeping in mind that everything is a model unless it&amp;rsquo;s a view or a controller&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; is not (only) nitpicking on semantics; 
it avoids the trap of letting a file&amp;rsquo;s name skew the role we give to the object it defines. If anything is a model, 
then an object being a model doesn&amp;rsquo;t give you, the developer, any misleading hint on the responsibilities to give it. 
You cannot just cram in random procedural code and feel confident in your architecture because your new object implements 
a &lt;code&gt;.call&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;In other words: keeping controllers and models &lt;em&gt;thin&lt;/em&gt; is a shortcut for &lt;em&gt;keeping them focused on a single responsibility&lt;/em&gt;, 
which is a shortcut for &lt;em&gt;keeping them focused on exposing or embodying a single resource&lt;/em&gt;. When controllers and/or models 
get fat, it usually means that somewhere, a new resource is trying to emerge; displacing the extra weight to a service 
object alleviates the symptom but prevents this new resource to emerge.&lt;/p&gt;

&lt;h3 id=&quot;services-as-splinters-of-a-monolith&quot;&gt;Services as splinters of a monolith&lt;/h3&gt;

&lt;p&gt;When I don&amp;rsquo;t hear teams talking about “service” as in &lt;em&gt;service layer&lt;/em&gt;, it is usually in “&lt;em&gt;micro-service&lt;/em&gt;”&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. The idea 
here is to remove a whole functionality of the application and reimplement it in a different application, which will be 
called instead. Basically, it&amp;rsquo;s trading complexity within a single application for complexity within a whole system, 
with all the complications that come with replacing methods calls by HTTP requests.&lt;/p&gt;

&lt;p&gt;Interestingly, the initial rationale for this expensive design choice is performance, or rather &lt;em&gt;scalability&lt;/em&gt;. The idea 
is that, if your application is split into autonomous services, then the computing resources of the whole system could 
be allocated more efficiently. If users suffer bad performance when authenticating but none after that, then you can 
add more servers to the authentication service. This makes perfect sense – but it is a much rarer kind of issue than you 
think, and you&amp;rsquo;ll probably never encounter it. And even if you can pinpoint performance-drowning features in your 
Rails monolith, but cannot fix the issue through code, I&amp;rsquo;m confident that you can afford to scale vertically the 
whole app anyways.&lt;/p&gt;

&lt;p&gt;In my experience – and in Duncan&amp;rsquo;s presentation of the design choices – the rationale for services quickly shifts once 
the decision has been made to introduce them. It&amp;rsquo;s less about performance, and more about cooperation and onboarding. 
Splitting the architecture leads to splitting the codebase, and smaller codebases are easier to comprehend, especially 
for newcomers. Which, once again, is technically true, but comes with at a significant cost. Because, most of the times, 
you need every developer to understand the whole system anyways – especially if you didn&amp;rsquo;t manage to put correct 
boundaries between the services. Yes, the codebase any given person will be working on at any given time will be 
smaller, but the cognitive load will probably not be reduced by much, because &lt;em&gt;other&lt;/em&gt; codebases will have to be kept 
in mind. This is certainly not true for very large teams working on very large applications, but chances are that you&amp;rsquo;re 
not that big. And even then, &lt;a href=&quot;https://stackshare.io/shopify/shopify&quot;&gt;you don&amp;rsquo;t need to split your Rails monolith&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, there is a third benefit that a team can gain from splitting a Rails monolith to services. Not performance, 
and not comprehensibility: comfort. Developers are people, and people have preferences – strong preferences, sometimes. 
Extracting a feature to a service opens the door to replacing a tech stack with another, piece by piece. Once again, 
this is paying a very high cost, but this time what you&amp;rsquo;re buying is basically HR. Is this wise? Is this viable? I would 
say “probably not”, but then again, I&amp;rsquo;m not trying to hire developers or keep them from switching ship on a tech ocean 
where the winds of hype blow strong.&lt;/p&gt;

&lt;h3 id=&quot;railways-have-no-service-areas&quot;&gt;Railways have no service (areas)&lt;/h3&gt;

&lt;p&gt;I may be wrong, but listening to Duncan, I felt like this third motivation for introducing services – a certain 
discomfort with Rails – was bigger than he himself realized. And, quite frankly, this would be the best reason 
for going this route, considering that this is a volunteers project. It&amp;rsquo;s hard to work on something when you 
don&amp;rsquo;t especially like it, or the tools you have to use, and it&amp;rsquo;s even more true when you&amp;rsquo;re not payed to do so. But, still: 
when it comes to Rails, if you enjoy it, then you&amp;rsquo;ll probably enjoy it even more if you restrain from introducing 
services, be it as a layer or as a system architecture.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;In the code that Duncan showed us, it was from a controller, but I&amp;rsquo;ve often seen services built from models.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Or a job, a channel, a mailer or a mailbox… Let&amp;rsquo;s stick to the M, V and C, ok?&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;More and more, it is in “&lt;em&gt;macro-service&lt;/em&gt;”; please don&amp;rsquo;t get me started on this.&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/articles/steel_vellum/2023/10/10/modules-in-dnd-modules-in-ruby.html</id>
      <title>Modules in D&amp;D, modules in Ruby</title>
      <updated>2023-10-10T21:50:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/articles/steel_vellum/2023/10/10/modules-in-dnd-modules-in-ruby.html" />

      <published>2023-10-10T21:50:00+02:00</published>
      <content type="html">&lt;p&gt;We left our project with an integration test that doesn&amp;rsquo;t pass (yet), and a unit test for the first piece of business 
logic revealed by this integration test: the character races as “types” for our &lt;code&gt;Character&lt;/code&gt; objects. It is now time to 
make the unit test pass, which should drive us to an implementation of the &lt;code&gt;Race&lt;/code&gt; class, and then move on to the next 
encounter in our integration test.&lt;/p&gt;

&lt;h3 id=&quot;ancestry-shenanigans&quot;&gt;Ancestry shenanigans&lt;/h3&gt;

&lt;p&gt;Our unit test, at the moment, looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test_helper&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/character_creation&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/race&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharacterCreationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_choosing_a_race&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CharacterCreation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;character&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_kind_of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/character_creation_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And, as expected, it fails. More precisely, once we add a placeholder &lt;code&gt;Race&lt;/code&gt; class to satisfy the &lt;code&gt;require&lt;/code&gt; instruction, 
it fails with this interesting error: &lt;code&gt;class or module required&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Race&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/race.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/character_creation_test.rb
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running tests with run options --seed 26591:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
E

Finished tests in 0.000418s, 2392.3449 tests/s, 0.0000 assertions/s.


Error:
SteelVellum::CharacterCreationTest#test_choosing_a_race:
TypeError: class or module required
    test/character_creation_test.rb:13:in `test_choosing_a_race&#39;

1 tests, 0 assertions, 0 failures, 1 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Back in the previous chapter, I said that a true mockist would probably not use the &lt;code&gt;Race&lt;/code&gt; class in the example, but 
instead something simpler, like &lt;code&gt;Object&lt;/code&gt;. Well, this wasn&amp;rsquo;t completely accurate. Because we want whatever object
is passed to &lt;code&gt;#choose_race&lt;/code&gt; to define what a &lt;code&gt;Character&lt;/code&gt; object &lt;em&gt;“is”&lt;/em&gt;, this object has to be either a class or a module, 
as the error message tells us.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s pause for a second. Our test is driving our design. Writing it, we discovered that we want characters races 
to be &lt;em&gt;instances&lt;/em&gt; of some kind of &lt;code&gt;Race&lt;/code&gt; class (&lt;code&gt;race=Race.new&lt;/code&gt;). But, at the same time, our test lead us to a design 
where these instances must be classes or modules themselves (&lt;code&gt;assert_kind_of race&lt;/code&gt;, with &lt;code&gt;assert_kind_of&lt;/code&gt; expecting 
a class or a module). Can an instance also be a class (or a module)?&lt;/p&gt;

&lt;p&gt;Of course it can! This is one of the great (and elegant, and almost magical) things about Ruby: classes are instances, 
too – namely, instances of the &lt;code&gt;Class&lt;/code&gt; class. By the same principle, modules are instances of the &lt;code&gt;Module&lt;/code&gt; class, or a 
subclass of it. Therefore, we can move on to the next failure in our test by ensuring that &lt;code&gt;Race.new&lt;/code&gt; returns either a 
class or a module. The simplest way to do that would to make &lt;code&gt;Race&lt;/code&gt; &lt;em&gt;inherit&lt;/em&gt; from either one – except that Ruby doesn&amp;rsquo;t 
allow subclassing &lt;code&gt;Class&lt;/code&gt;, so the only option left is to have &lt;code&gt;Race&lt;/code&gt; inherit from &lt;code&gt;Module&lt;/code&gt;, so that &lt;code&gt;Race.new&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; 
a (new) module.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Race&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/race.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/character_creation_test.rb
&lt;span class=&quot;go&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running tests with run options --seed 60990:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
F

Finished tests in 0.000311s, 3215.4337 tests/s, 3215.4337 assertions/s.


Failure:
SteelVellum::CharacterCreationTest#test_choosing_a_race [test/character_creation_test.rb:13]
Minitest::Assertion: Expected #&amp;lt;SteelVellum::Character:0x0000000103d0a490&amp;gt; to be a kind of #&amp;lt;SteelVellum::Race:0x00000001039a0700&amp;gt;, not SteelVellum::Character.

1 tests, 1 assertions, 1 failures, 0 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;ve successfully failed – meaning that we&amp;rsquo;ve successfully moved on to a different failure. But this one is a bit cryptic.
And how could our object be both “a kind of” &lt;code&gt;Character&lt;/code&gt; and “a kind of” &lt;code&gt;Race&lt;/code&gt;? Object in Ruby can only be of a single 
class, right?&lt;/p&gt;

&lt;p&gt;Without diving too deep in the (marvellous) object model of Ruby, let&amp;rsquo;s make a slight detour. The &lt;code&gt;assert_kind_of&lt;/code&gt; 
matcher relies on &lt;a href=&quot;https://docs.ruby-lang.org/en/3.2/Object.html#method-i-kind_of-3F&quot;&gt;&lt;code&gt;Object#kind_of?&lt;/code&gt;&lt;/a&gt;, which is defined 
like so:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;kind_of?(class) → true or false&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if &lt;em&gt;class&lt;/em&gt; is the class of &lt;em&gt;obj&lt;/em&gt;, or if &lt;em&gt;class&lt;/em&gt; is one of the superclasses of &lt;em&gt;obj&lt;/em&gt; or modules 
included in &lt;em&gt;obj&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is very accurate but maybe a bit obscure, if you&amp;rsquo;re not familiar with the way classes, modules and instances 
work in Ruby. Another way to define &lt;code&gt;kind_of?&lt;/code&gt; could be:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; is &lt;em&gt;class&lt;/em&gt; is among the ancestors of &lt;em&gt;obj&lt;/em&gt;&amp;rsquo;s [singleton] class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s ignore the word in brackets for now. In Ruby, we know that each object has a class; this class, like all 
classes, &lt;em&gt;inherits&lt;/em&gt; from another class, which itself inherits from another class, and so on until this chain of 
&lt;em&gt;ancestors&lt;/em&gt; reaches &lt;code&gt;BasicObject&lt;/code&gt;, &lt;a href=&quot;https://docs.ruby-lang.org/en/3.2/BasicObject.html#:~:text=BasicObject-,BasicObject,Ruby&quot;&gt;“the parent class of all classes in Ruby”&lt;/a&gt;. 
We can check this out by looking at the ancestors of the class of the &lt;code&gt;character&lt;/code&gt; object in our test. We know 
that this object&amp;rsquo;s class is &lt;code&gt;SteelVellum::Character&lt;/code&gt;, so we can do it like this:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; lib &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; steel_vellum/character_creation.rb &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;print SteelVellum::Character.ancestors&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[SteelVellum::Character, Object, Kernel, BasicObject]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Ignoring the first item in this array (which is the interrogated class itself), we see the list of classes&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; from 
which &lt;code&gt;Character&lt;/code&gt; inherits: &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Kernel&lt;/code&gt; and, eventually, &lt;code&gt;BasicObject&lt;/code&gt;. For our test to pass, and 
our assertion &lt;code&gt;assert_kind_of race, character.character&lt;/code&gt; to be true, we need to somehow add &lt;code&gt;race&lt;/code&gt; to this list of 
ancestors.&lt;/p&gt;

&lt;p&gt;We cannot do that by making our &lt;code&gt;race&lt;/code&gt; object a parent of the &lt;code&gt;Character&lt;/code&gt; class – first because it would make no sense 
from a business logic perspective (characters are not character races), but more importantly because we&amp;rsquo;ve already 
established that &lt;code&gt;race&lt;/code&gt; is a &lt;code&gt;Module&lt;/code&gt;, and modules cannot be inherited from.&lt;/p&gt;

&lt;p&gt;However, like classes, Ruby modules can be part of the ancestors chain of a class – in fact, in the ancestors list 
above, &lt;code&gt;Kernel&lt;/code&gt; is actually a &lt;a href=&quot;https://docs.ruby-lang.org/en/3.2/Kernel.html&quot;&gt;module&lt;/a&gt;, not a class. As explained in 
the definition of &lt;code&gt;Object#kind_of?&lt;/code&gt;, &lt;em&gt;included modules&lt;/em&gt; also count as ancestors. But how could we include this &lt;code&gt;race&lt;/code&gt; 
module in the class of our &lt;code&gt;character&lt;/code&gt; object?&lt;/p&gt;

&lt;h3 id=&quot;a-single-use-class&quot;&gt;A single-use class&lt;/h3&gt;

&lt;p&gt;Once again, the &lt;code&gt;character&lt;/code&gt; object is an instance of &lt;code&gt;Character&lt;/code&gt;. So, a naive way to have it also be “a kind of” &lt;code&gt;race&lt;/code&gt; 
would be to call &lt;code&gt;Character.include race&lt;/code&gt;. But then, &lt;em&gt;all&lt;/em&gt; instances of &lt;code&gt;Character&lt;/code&gt; would also have &lt;code&gt;race&lt;/code&gt; in their ancestors. 
All characters would be of the same race, which is not what we want.&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;What we want is for this &lt;code&gt;race&lt;/code&gt; module to be included in the class of our &lt;code&gt;character&lt;/code&gt; instance, &lt;strong&gt;but only for this 
instance&lt;/strong&gt;. And we can do that thanks to &lt;code&gt;Module#extend&lt;/code&gt; and the elegant magic of the &lt;em&gt;singleton class&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;By &lt;em&gt;extending the instance&lt;/em&gt; with the module instead of &lt;em&gt;including the module in the class&lt;/em&gt;, we&amp;rsquo;ll have what we want. To 
see this in action, let&amp;rsquo;s temporarily hack our test:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_choosing_a_race&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CharacterCreation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;character&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;assert_kind_of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/character_creation_test.rb (excerpt)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/character_creation_test.rb
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running tests with run options --seed 19004:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;.
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
Finished tests in 0.000345s, 2898.5521 tests/s, 2898.5521 assertions/s.


1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Or test passes! But how come?&lt;/p&gt;

&lt;p&gt;When we called &lt;code&gt;character.extend race&lt;/code&gt;, Ruby did something clever. It created a &lt;em&gt;new&lt;/em&gt; class, anonymous, and had it 
inherit from &lt;code&gt;Character&lt;/code&gt;. It also included &lt;code&gt;race&lt;/code&gt; into this new class, and then had &lt;code&gt;character&lt;/code&gt; inherit from it. Because 
it inherits from &lt;code&gt;Character&lt;/code&gt;, this anonymous class behaves exactly as &lt;code&gt;Character&lt;/code&gt;, but it is specific to the &lt;code&gt;character&lt;/code&gt; 
object. (And it includes &lt;code&gt;race&lt;/code&gt;, which is the whole point.)&lt;/p&gt;

&lt;p&gt;There is no formal name for this kind of object-specific, anonymous class. Some used to call it “eigenclass”, others 
“ghost class”, but nowadays, it is most often named &lt;em&gt;singleton class&lt;/em&gt;&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. In fact, this class can be reached (and 
created on-the-fly, if necessary) by calling &lt;a href=&quot;https://docs.ruby-lang.org/en/3.2/Object.html#method-i-singleton_class&quot;&gt;&lt;code&gt;Object#singleton_class&lt;/code&gt;&lt;/a&gt;. 
Let&amp;rsquo;s launch an IRB console and compare the ancestors of this singleton class, for a given &lt;code&gt;Character&lt;/code&gt; instance, before 
and after extending a &lt;code&gt;Race&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;language-irb highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dir__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/lib/steel_vellum/**/*.rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SteelVellum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;#&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SteelVellum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0000000109f1e320&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ancestors&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;gp&quot;&gt;[#&amp;lt;Class:#&amp;lt;SteelVellum::Character:0x0000000109f1e320&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; SteelVellum::Character,
 Object,
 SteelVellum,
 Kernel,
 BasicObject]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;#&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SteelVellum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0000000109f1e320&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ancestors&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;gp&quot;&gt;[#&amp;lt;Class:#&amp;lt;SteelVellum::Character:0x0000000109f1e320&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; #&amp;lt;SteelVellum::Race:0x000000010abb3860&amp;gt;,
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; SteelVellum::Character,
 Object,
 SteelVellum,
 Kernel,
 BasicObject]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;So, there you have it. Even though Ruby objects can only be instances of a single class, they can inherit traits from 
any number of modules, and don&amp;rsquo;t have to share these inheritances with any other object, thanks to the existence of a 
singleton class.&lt;/p&gt;

&lt;p&gt;Now that we know how to have characters &lt;em&gt;be&lt;/em&gt; of a given race, and why this is even possible in the first place, let&amp;rsquo;s 
remove the hack from our test and implement things properly:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;character&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharacterCreation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@race&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;character&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@race&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/character_creation.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test_helper&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/character_creation&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/race&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharacterCreationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_choosing_a_race&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CharacterCreation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;character&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_kind_of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/character_creation_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/character_creation_test.rb
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running tests with run options --seed 60242:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;.
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
Finished tests in 0.000328s, 3048.7789 tests/s, 3048.7789 assertions/s.


1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;back-to-the-outer-loop&quot;&gt;Back to the outer loop…&lt;/h3&gt;

&lt;p&gt;Our unit test now passes – we&amp;rsquo;ve closed the small loop. Let&amp;rsquo;s go back to the big loop (the integration test) and 
see where the next failure leads us.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/creating_bruenor_test.rb
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running tests with run options --seed 19079:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
E

Finished tests in 0.000429s, 2331.0023 tests/s, 0.0000 assertions/s.


Error:
SteelVellum::CreatingBruenorTest#test_1_choose_a_race:
TypeError: wrong argument type Class (expected Module)
    /Users/ronan/Dev/steel_vellum/lib/steel_vellum/character_creation.rb:14:in `extend&#39;
    /Users/ronan/Dev/steel_vellum/lib/steel_vellum/character_creation.rb:14:in `block in character&#39;
    &amp;lt;internal:kernel&amp;gt;:90:in `tap&#39;
    /Users/ronan/Dev/steel_vellum/lib/steel_vellum/character_creation.rb:13:in `character&#39;
    test/creating_bruenor_test.rb:17:in `test_1_choose_a_race&#39;

1 tests, 0 assertions, 0 failures, 1 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;This was to be expected – &lt;code&gt;CharacterCreation#choose_race&lt;/code&gt; must be passed a module now, but &lt;code&gt;MountainDwarf&lt;/code&gt; is still a 
slimed class. Let&amp;rsquo;s change that.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../race&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Races&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/races/mountain_dwarf.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Moving on, we can rerun the integration test and figure out what other missing piece of our library we should build now.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/creating_bruenor_test.rb
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running tests with run options --seed 52522:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
F

Finished tests in 0.000367s, 2724.7956 tests/s, 5449.5913 assertions/s.


Failure:
SteelVellum::CreatingBruenorTest#test_1_choose_a_race [test/creating_bruenor_test.rb:19]
Minitest::Assertion: Expected: :medium
  Actual: nil

1 tests, 0 assertions, 0 failures, 1 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;This is a more interesting failure! According to the test, making Bruenor a Mountain Dwarf should automatically give him 
a &lt;code&gt;:medium&lt;/code&gt; size, but at the moment, &lt;code&gt;Character#size&lt;/code&gt; always returns &lt;code&gt;nil&lt;/code&gt; (since we didn&amp;rsquo;t bother actually implementing 
the method&amp;rsquo;s body). Let&amp;rsquo;s remedy that.&lt;/p&gt;

&lt;p&gt;Because this failure reveals a missing piece of business logic, we must start a new small loop, and design the 
implementation of this unitary feature through one or more unit tests.&lt;/p&gt;

&lt;h3 id=&quot;hooks-in-you&quot;&gt;Hooks in you&lt;/h3&gt;

&lt;p&gt;For a start, let&amp;rsquo;s simply isolate the failing assertion from the integration test into an unit test:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../test_helper&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/character&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/races/mountain_dwarf&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Races::MountainDwarfTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_a_mountain_dwarf_character_has_a_medium_size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Races&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/races/mountain_dwarf_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Covered by our unit test, let&amp;rsquo;s think about a way to make it pass. The test tells us that, once a &lt;code&gt;Character&lt;/code&gt; instance 
is extended by the &lt;code&gt;MountainDwarf&lt;/code&gt; module, its &lt;code&gt;#size&lt;/code&gt; method should return &lt;code&gt;:medium&lt;/code&gt; instead of &lt;code&gt;nil&lt;/code&gt;. When a module 
extends an object, the methods defined inside this module are added to the instance methods of the object&amp;rsquo;s singleton 
class, so one way to make our test pass would be to redefine &lt;code&gt;#size&lt;/code&gt; in the &lt;code&gt;MountainDwarf&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../race&quot;&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Races&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/races/mountain_dwarf.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;However, while perfectly fine in general, I&amp;rsquo;m not too fond of this approach in this specific situation. That is because 
a character&amp;rsquo;s size is more &lt;em&gt;data&lt;/em&gt; than &lt;em&gt;behavior&lt;/em&gt;. I&amp;rsquo;d rather store this information in an instance variable than have 
it being returned by a method&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Thankfully, Ruby gives us another trick to reach our goals: &lt;em&gt;hook methods&lt;/em&gt;. These are methods that, if defined, 
get called we certain events happen in an object&amp;rsquo;s lifetime. For example, &lt;code&gt;#method_missing&lt;/code&gt; is a well-known hook 
method that is called when an object (or rather: a module or a class) receives a call to a method that neither 
it not any of its ancestors define. In our case, we&amp;rsquo;ll make use of the &lt;a href=&quot;https://docs.ruby-lang.org/en/3.2/Module.html#method-i-extended&quot;&gt;&lt;code&gt;#extended&lt;/code&gt;&lt;/a&gt; 
hook method.&lt;/p&gt;

&lt;p&gt;This method is called whenever a module extends an object. We can use it to change the value of the character&amp;rsquo;s &lt;code&gt;@size&lt;/code&gt; 
instance variable – in practice, giving it a default value, which the &lt;code&gt;Character&lt;/code&gt; instance will then be free to change, 
if need be. (After all, our Dwarf could one day drink a magical potion and grow a size or two.) This is what using 
the &lt;code&gt;#extended&lt;/code&gt; hook looks like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../race&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Races&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:medium&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/races/mountain_dwarf.fr
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Of course, for the &lt;code&gt;character.size = :medium&lt;/code&gt; instruction to work, we need to give accessors to the &lt;code&gt;@size&lt;/code&gt; instance 
variable of &lt;code&gt;Character&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:size&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# TODO: is this method really useful? It won&#39;t be used once the character creation is done&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ability_score_increases&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;languages&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_advantage_on_saving_throws_against?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_resistance_against?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proficient_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proficiency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;special_traits&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/character.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Now our test passes. We can close this small loop and go back, once again, to the big one by running (yet again) the 
integration test. It now fails because of the next character trait that a race is supposed to give a default 
value to:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/creating_bruenor_test.rb
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running tests with run options --seed 15813:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
F

Finished tests in 0.000413s, 2421.3068 tests/s, 4842.6136 assertions/s.


Failure:
SteelVellum::CreatingBruenorTest#test_1_choose_a_race [test/creating_bruenor_test.rb:20]
Minitest::Assertion: Expected: 25
  Actual: nil

1 tests, 2 assertions, 1 failures, 0 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;This time, it is &lt;code&gt;Character#speed&lt;/code&gt; that doesn&amp;rsquo;t return the expected value. We&amp;rsquo;ll proceed as exactly like we have with 
&lt;code&gt;#size&lt;/code&gt; – adding a unit test, watching it fail, making it pass, and then moving back to the integration test. And after 
that, we&amp;rsquo;ll have &lt;code&gt;Character.darkvision&lt;/code&gt; to fix. In the end, this is what our &lt;code&gt;MountainDwarf&lt;/code&gt; class and its tests will be:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../race&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Races&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:medium&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/races/mountain_dwarf.fr
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../test_helper&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/character&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/races/mountain_dwarf&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Races::MountainDwarfTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_a_mountain_dwarf_character_has_a_medium_size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Races&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_a_mountain_dwarf_character_has_a_speed_of_25&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Races&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_a_mountain_dwarf_character_has_darkvision_up_to_60_feet&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Races&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/races/mountain_dwarf_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;stepping-away-from-bdd&quot;&gt;Stepping away from BDD&lt;/h3&gt;

&lt;p&gt;Normally, keeping with our back-and-forths between the integration tests and the unit tests, our next step should probably be 
have to do with &lt;code&gt;ability_score_increases&lt;/code&gt;. However, once again, I&amp;rsquo;d like to take a step back and consider 
our recent work.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve implemented the behavior of the &lt;code&gt;Races::MountainDwarf&lt;/code&gt; instanciated modules, because this is what our tests have 
covered. But we know that other races will eventually be covered by the library, and we know that they, too, will 
assign a size, a speed and a darkvision range to the characters. So, even though we don&amp;rsquo;t have any test to &lt;em&gt;lead&lt;/em&gt; us 
there yet, we can safely assume that making this piece of business logic a bit more generic is valuable.&lt;/p&gt;

&lt;p&gt;In practice, this means that &lt;em&gt;any&lt;/em&gt; subclass of &lt;code&gt;Race&lt;/code&gt; should be able to assign values to a &lt;code&gt;Character&lt;/code&gt;&amp;rsquo;s &lt;code&gt;@size&lt;/code&gt;, &lt;code&gt;@speed&lt;/code&gt; 
and &lt;code&gt;@darkvision&lt;/code&gt; instance variables, and the assigned values would depend on the subclass itself. This is rather easy 
to write tests for.&lt;/p&gt;

&lt;p&gt;First, we need to be able to define the values that a race will assign:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test_helper&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/race&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/character&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RaceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_race_initialization&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;speed: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;size: :small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;darkvision: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/race_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Then, we need to ensure that using the race to extend a &lt;code&gt;Character&lt;/code&gt; assigns these values. We can simply cannibalize 
the tests for &lt;code&gt;MountainDwarf&lt;/code&gt;; but for the sake of conciseness, we&amp;rsquo;ll squash the 3 tests into a single one with 
multiple assertions:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test_helper&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/race&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/character&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RaceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_race_initialization&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;speed: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;size: :small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;darkvision: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_extending_a_character_sets_default_for_their_traits&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;speed: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;size: :medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;darkvision: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_nil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/race_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The implementation is pretty straightforward too, except for one subtlety:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# TODO: maybe add a DSL for defining races (e.g. +Race.new { size :medium }+)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Race&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:darkvision&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;speed: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;size: :medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;darkvision: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@darkvision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;darkvision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@speed&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@darkvision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lbi/steel_vellum/race.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;#extended&lt;/code&gt; hook method must be defined in the &lt;em&gt;class&lt;/em&gt; (singleton or not) of the object on which it will be called. 
This is why, when its definition was in the &lt;code&gt;MountainDwarf&lt;/code&gt; class, it was sent to &lt;code&gt;self&lt;/code&gt;. (In other words: &lt;code&gt;.extended&lt;/code&gt; 
was defined as a &lt;em&gt;class method&lt;/em&gt; of &lt;code&gt;MountainDwarf&lt;/code&gt;). However, since we&amp;rsquo;re moving this definition up to the 
&lt;em&gt;class&lt;/em&gt; of all races modules, the &lt;code&gt;#extended&lt;/code&gt; must now be defined as an &lt;em&gt;instance&lt;/em&gt; method&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; of &lt;code&gt;Race&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(Note also that we&amp;rsquo;ve also added default values in the initializer, even though we didn&amp;rsquo;t write tests for that, and therefore 
have no idea if this is legitimate design or not – we&amp;rsquo;re freewheeling! 🤘)&lt;/p&gt;

&lt;h3 id=&quot;hidden-edge-cases&quot;&gt;Hidden edge cases&lt;/h3&gt;

&lt;p&gt;Here is a secret about BDD: since it&amp;rsquo;s about letting the &lt;em&gt;expected behavior&lt;/em&gt; drive the design, edge cases – in other 
words: &lt;em&gt;unexpected&lt;/em&gt; behavior – can slip through. Which is why it is important to consider these edge cases when working 
at the unit test level, where they are easier to think about.&lt;/p&gt;

&lt;p&gt;In our case, even though we&amp;rsquo;ve kept saying that a character&amp;rsquo;s race gives it &lt;em&gt;default&lt;/em&gt; values for some traits, we haven&amp;rsquo;t 
tested for the (unlikely) situation where some would have already been defined &lt;em&gt;before&lt;/em&gt; the race was assigned. So let&amp;rsquo;s 
add that. And while we&amp;rsquo;re at it, let&amp;rsquo;s cover another edge case: using a race module to extend an object which is not 
an instance of the &lt;code&gt;Character&lt;/code&gt; class.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_extending_a_character_doesnt_change_existing_traits&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;speed: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# hasn&#39;t changed to 25&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_extending_an_irrelevant_class_does_nothing&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# should not raise nor do anything&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/race_test.rb (excerpt)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The final implementation is quite easy:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# TODO: maybe add a DSL for defining races (e.g. +Race.new { size :medium }+)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Race&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:darkvision&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;speed: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;size: :medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;darkvision: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@darkvision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;darkvision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assign_traits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kind_of?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assign_traits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@speed&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@darkvision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/race.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;final-cleanup&quot;&gt;Final cleanup&lt;/h3&gt;

&lt;p&gt;Now that the logic for assigning default values to a character&amp;rsquo;s racial traits is moved up to the &lt;code&gt;Race&lt;/code&gt; class from 
which &lt;code&gt;MountainDwarf&lt;/code&gt; inherits, we can clean up our previous work, by deleting the now redundant unit tests in 
&lt;code&gt;MountainDwarfTest&lt;/code&gt;, and the logic from &lt;code&gt;MountainDwarf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../race&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Races&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;size: :medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;speed: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;darkvision: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/races/mountain_dwarf.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And this is it (for now)! We&amp;rsquo;ve successfully implemented the first actual piece of logic in our library, which is 
actually quite a lot:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can define a character race, or at least 3 of its traits for now.&lt;/li&gt;
  &lt;li&gt;These traits are automatically assigned to a character when their race is chosen during character creation.&lt;/li&gt;
  &lt;li&gt;For developers who&amp;rsquo;ll eventually use our library, assigning a &lt;code&gt;Race&lt;/code&gt; to a &lt;code&gt;Character&lt;/code&gt; object gives it some kind 
of “type”, which is probably a false good idea, but fun nonetheless.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can now return to our big loop, once again, and see what the DM of BDDing has for us in the next installment of 
this series!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Roughly speaking.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Feel free to try this out in an IRB console: create 2 instances of &lt;code&gt;Character&lt;/code&gt;, create a new &lt;code&gt;Race&lt;/code&gt;, include it 
  in &lt;code&gt;Character&lt;/code&gt; with &lt;code&gt;Character.include the_new_race&lt;/code&gt; and see that both the instances now “are” also of this race.&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Don&amp;rsquo;t be mistaken, this class has nothing to do with the &lt;a href=&quot;https://archive.org/details/designpatternsel00gamm/page/126/mode/2up&quot;&gt;singleton design pattern&lt;/a&gt;, or the &lt;a href=&quot;https://docs.ruby-lang.org/en/3.2/Singleton.html&quot;&gt;Singleton&lt;/a&gt; module!&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Technically, even if store in an instance variable, the value will be returned by a method (namely, a reader accessor), but hopefully you see what I mean.&amp;nbsp;&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;As an exercice, can you guess what would happen, and why, if within the &lt;code&gt;Race&lt;/code&gt; class we&amp;rsquo;d write &lt;code&gt;def self.extended&lt;/code&gt;?&amp;nbsp;&lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/articles/z80asm/2023/08/31/jurassic-stack.html</id>
      <title>Jurassic Stack</title>
      <updated>2023-08-31T14:02:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/articles/z80asm/2023/08/31/jurassic-stack.html" />

      <published>2023-08-31T14:02:00+02:00</published>
      <content type="html">&lt;h3 id=&quot;coding-high-and-low&quot;&gt;Coding high and low&lt;/h3&gt;

&lt;p&gt;Ruby is a great language. It is my favorite. It is also considered a &lt;em&gt;high-level&lt;/em&gt; language which, if you&amp;rsquo;re curious, 
may beg the question: what is a &lt;em&gt;low-level&lt;/em&gt; language? How different would it be to code in such a thing?&lt;/p&gt;

&lt;p&gt;To compare Ruby with a low-level language, we first need to pick one. This is not as easy as it sounds, because programming 
languages are not like, say, &lt;a href=&quot;&quot;&gt;cliffs from which Norwegian singers can jump&lt;/a&gt;: their elevation is not absolute, but relative. 
The debate as to wether C is a high- or low-level language is &lt;a href=&quot;&quot;&gt;still occasionally reignited&lt;/a&gt;. Yet, one thing is certain: you 
cannot go lower than machine language. Here is an extract of a program in machine code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3E 48 CD 5A BB 3E 65 CD 5A BB 3E 6C CD 5A BB 3E 6C CD 5A BB 3E 6F CD 5A BB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though people did write programs like this, this is a bit too low-level for me (and my sanity). One level of abstraction 
above is the &lt;strong&gt;assembly&lt;/strong&gt; (and &lt;em&gt;abstraction&lt;/em&gt; is a big word here). Here is the same piece of program, in assembly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LD    A,&amp;amp;48
CALL  &amp;amp;BB5A
LD    A,&amp;amp;65
CALL  &amp;amp;BB5A
LD    A,&amp;amp;6C
CALL  &amp;amp;BB5A
LD    A,&amp;amp;6C
CALL  &amp;amp;BB5A
LD    A,&amp;amp;6F
CALL  &amp;amp;BB5A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With a bit of formatting, you can see how similar to the machine language it is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3E    48
CD    5A BB
3E    65
CD    5A BB
3E    6C
CD    5A BB
3E    6C
CD    5A BB
3E    6F
CD    5A BB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sure, the &lt;code&gt;&amp;amp;&lt;/code&gt;&amp;rsquo;s have been removed, and some character pairs have been switched, but you can see how the word-like stuff 
in the assembly version maps to specific numbers in the machine language version. That&amp;rsquo;s because assembly is basically 
the transposition of the machine code &lt;em&gt;instructions&lt;/em&gt; in character sequences (called &lt;em&gt;mnemonics&lt;/em&gt;). That&amp;rsquo;s indisputably 
low-level.&lt;/p&gt;

&lt;p&gt;In fact, assembly is so low-level that there is no single, uniform assembly language. Instead, each microprocessor 
architecture has its own assembly language, because each microprocessor architecture has its own set of code instructions. 
So if we are to write a program in assembly, we must first chose &amp;ldquo;an&amp;rdquo; assembly – or rather, a target microprocessor.&lt;/p&gt;

&lt;p&gt;Modern processors are insanely sophisticated, so much that I don&amp;rsquo;t even want to imagine how difficult writing assembly 
for them must be. Besides, I have a score to settle with a much older processor: the Z80.&lt;/p&gt;

&lt;p&gt;The Z80 was an 8-bit microprocessor, made by the US company Zylog and introduced in 1976. From the late 1970s 
to the mid-1980s, it was ubiquitous, powering arcade games, game consoles, calculators, and more importantly for me, 
home computers.&lt;/p&gt;

&lt;p&gt;This variety of devices is important because, even though an assembly program is technically compatible with anything 
that uses the relevant processor, in reality, it also depends on the general architecture of the system, which can 
greatly vary. For example, a Sega MasterSystem and a Pac-Man arcade have different amount of memory, with different 
layouts, etc. So for our experiment with assembly, we&amp;rsquo;ll need to target a specific machine, and it will be the 
Amstrad CPC.&lt;/p&gt;

&lt;h3 id=&quot;load-1987&quot;&gt;LOAD 1987&lt;/h3&gt;

&lt;p&gt;Amstrad was a British electronics company; its first computer, the Amstrad CPC 464, was introduced in 1984 and was a 
great success in Europe (especially in France), as was its successors, the CPC 6128&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, the later being 
released in 1985.&lt;/p&gt;

&lt;p&gt;As it happens, the Amstrad CPC 6128 was also my first computer, and the best Christmas gift of 1987, as you can see:&lt;/p&gt;

&lt;p&gt;[photo]&lt;/p&gt;

&lt;p&gt;(If you&amp;rsquo;re not too distracted by the swag of my velvet pants, you&amp;rsquo;ll notice that mother, always mindful of the important 
things in life, had sneaked in the presents an educational game for me to practice my German.)&lt;/p&gt;

&lt;p&gt;This is the computer on which I learned to program&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;; but back then, once you had mastered BASIC, assembly was the 
only next step available, and the gap between the two was too large for me – especially when there were all those 
cool games I could play instead. But nothing is ever too late!&lt;/p&gt;

&lt;p&gt;One of the things that made assembly so hard to grasp for me in 1987, I think, is how depend on the hardware it is. To 
program in assembly you need to learn how the computer works – what memory actually is, how a processor works, what 
buses and interrupts are, etc. This is probably why so many learning resources, even today, start with theoretical 
exposes on registers, binary arithmetics, or addressing techniques. In this series, I&amp;rsquo;ll try to dive into the code 
as soon as possible, and take technical detours when necessary. But I will also skip over things that were ubiquitous then 
but rarely used now, such as hex notation; hopefully they will not deter you as they deterred me when I was a kid.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I&amp;rsquo;m skipping over the CPC 664, which was only on the market for a few months.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;em&gt;Technically&lt;/em&gt;, I had previously dabbled in programming on &lt;a href=&quot;&quot;&gt;TO7&lt;/a&gt; computers at my town&amp;rsquo;s computer club, if you 
  consider Logo a real programming language.&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/articles/2023/07/25/thawing-strings.html</id>
      <title>Thawing strings</title>
      <updated>2023-07-25T10:52:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/articles/2023/07/25/thawing-strings.html" />

      <published>2023-07-25T10:52:00+02:00</published>
      <content type="html">&lt;p&gt;As a staunch atheist, I reject all cults (except maybe for Ian Astbury&amp;rsquo;s). And yet, there&amp;rsquo;s one I&amp;rsquo;m always wary of, for 
fear of inadvertently falling into: the &lt;em&gt;cargo&lt;/em&gt; cult.&lt;/p&gt;

&lt;p&gt;Cargo cult programming is one of the worst things that can happen to a software person. It&amp;rsquo;s the evil twin of experience, 
when what I&amp;rsquo;ve learned turns against you instead of helping you. Having strong opinions and hardcoded knowledge is fine, 
until said opinions and knowledge turn out to be false, or even worse, out-of-date.&lt;/p&gt;

&lt;p&gt;Case in point: the &lt;code&gt;frozen-string-literal&lt;/code&gt; feature in Ruby.&lt;/p&gt;

&lt;p&gt;Back in 2015, I learned that Ruby 3 would make &lt;code&gt;String&lt;/code&gt; objects &lt;em&gt;frozen&lt;/em&gt; by default, and as a transitional measure, 
a new magic comment had been introduced: &lt;code&gt;#frozen_string_literal: true&lt;/code&gt;. Add it to your Ruby 2.3 file, and its 
(non-interpolated) strings would be frozen, as they should eventually be in Ruby 3.&lt;/p&gt;

&lt;p&gt;As a diligent rubyist trying to stay on the edge, I started adding this magic comment scrupulously at the top of all my 
files, even though I really didn&amp;rsquo;t like it (because it&amp;rsquo;s noisy). Then Ruby 3 was relesead like a Christmas present 
(litteraly), and I thought that I could stop using this magic comment.&lt;/p&gt;

&lt;p&gt;… Except that everybody was keeping it! Why was that? I was quick to blame Rubocop, my nemesis, but honestly I was more 
confused than pissed. Still, I had other things to care about, so I forgot about this – and kept using the magic comment, 
even in my own pet projects.&lt;/p&gt;

&lt;h3 id=&quot;best-practices-as-smell-tests&quot;&gt;Best practices as smell tests&lt;/h3&gt;

&lt;p&gt;However, there is something smelly in ubiquitous “best practices”, and now that I&amp;rsquo;m back to coding (and coding for fun!), 
my nose started twitching again.&lt;/p&gt;

&lt;p&gt;I trust my tools of choice, and the people who make them. Which means that I trust Ruby to be at its best by default. 
Magic comments are file-specific configuration options; by definition, they are an exception to the defaults. So, if a 
an option like &lt;code&gt;frozen-string-literal&lt;/code&gt; is that important, why isn&amp;rsquo;t it on by default?&lt;/p&gt;

&lt;p&gt;And, by the way, wasn&amp;rsquo;t it supposed to be the case in Ruby 3 in the first place?&lt;/p&gt;

&lt;h3 id=&quot;catching-up-with-the-language&quot;&gt;Catching up with the language&lt;/h3&gt;

&lt;p&gt;So I went back to the &lt;a href=&quot;https://bugs.ruby-lang.org/projects/ruby-master&quot;&gt;Ruby bug tracker&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and read 
&lt;a href=&quot;https://bugs.ruby-lang.org/issues/11473#note-53&quot;&gt;this&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Status changed from Assigned to Closed&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;I consider this for years. I REALLY like the idea but I am sure introducing this could cause HUGE compatibility issue, 
even bigger than Ruby 1.9. So I officially abandon making frozen-string-literals default (for Ruby3).&lt;/p&gt;

  &lt;p&gt;This does not mean we are going to remove the frozen-string-literal feature that can be specified by magic comments.&lt;/p&gt;

  &lt;p&gt;Matz.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had somehow missed the announcement that Ruby 3 had dropped the idea of freezing the strings by default! And for my 
least favorite reason in computer science: retrocompatibility (the weight that drags progress down). So there was 
a reason to systematically use this ugly magic comment, after all.&lt;/p&gt;

&lt;h3 id=&quot;weighting-tradeoffs&quot;&gt;Weighting tradeoffs&lt;/h3&gt;

&lt;p&gt;Or was it? I can understand that Matz would prefer avoiding compatibility issues over performance, but performance 
was Ruby 3&amp;rsquo;s major goal with “Ruby 3x3”. So, how much of a compromise was dropping the freeze-strings-by-default?&lt;/p&gt;

&lt;p&gt;I have no idea, and no benchmark, but I stumbled upon &lt;a href=&quot;https://github.com/standardrb/standard/pull/181&quot;&gt;this interesting thread&lt;/a&gt; 
on Standard&amp;rsquo;s repo. Basically, Justin Sears was pushing back against adding a linter rule to enforce the presence 
of this magic comment (as he should, because he&amp;rsquo;s a smart and tasteful man), and asking for reasons do have it. And 
no other than &lt;a href=&quot;http://tenderlovemaking.com&quot;&gt;Tenderlove&lt;/a&gt; came to &lt;a href=&quot;https://github.com/standardrb/standard/pull/181#issuecomment-635722698&quot;&gt;defend this practice&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t have any good benchmarks, but I can tell you from experience that they really helped us at GitHub.&lt;/p&gt;

  &lt;p&gt;[…]&lt;/p&gt;

  &lt;p&gt;btw I used to be in the “I’ve never seen frozen stings help anything” camp until I actually saw them help.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, yeah, the &lt;code&gt;frozen-string-litteral&lt;/code&gt; seems to have a positive effect, which would make the ridiculousness of 
adding the same magic comment to every file worth it… Except that &lt;strong&gt;I don&amp;rsquo;t work on GitHub&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is basically the conclusion that closed the PR: freezing the strings might be useful in some situations, but 
this is the exception, not the rule. So Searls doesn&amp;rsquo;t want it in Standard, and more importantly, I don&amp;rsquo;t want it 
in my code base.&lt;/p&gt;

&lt;h3 id=&quot;back-from-the-edge&quot;&gt;Back from the edge&lt;/h3&gt;

&lt;p&gt;So, I went from getting into a certain habit in preparation for a change that didn&amp;rsquo;t come, to keeping this habit for no 
good reason, even as had a (correct, if accidentally) hunch that I shouldn&amp;rsquo;t. The good thing is that now, I know 
what to do most of the time, when to do otherwise, and more importantly, why. I&amp;rsquo;m back to following anchored reason, 
and not blind faith.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Every time I go there, I feel an unconfortable mix of nostalgia and discomfort because it&amp;rsquo;s powered by Redmine…&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/articles/2023/06/24/de-vermis-mysteriis-solvuntur.html</id>
      <title>De Vermis Mysteriis — solvuntur</title>
      <updated>2023-06-24T21:42:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/articles/2023/06/24/de-vermis-mysteriis-solvuntur.html" />

      <published>2023-06-24T21:42:00+02:00</published>
      <content type="html">&lt;p&gt;I have previously &lt;a href=&quot;{% post_url 2023-05-01-markdown-the-pits-of-madness %}&quot;&gt;told of my adventures&lt;/a&gt; trying to enrich 
Jekyll&amp;rsquo;s Markdown parsing abilities to allow for the wrapping of code samples in &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element. My first attempt 
built upon &lt;a href=&quot;https://github.com/rouge-ruby/rouge&quot;&gt;Rouge&lt;/a&gt; and &lt;a href=&quot;https://kramdown.gettalong.org&quot;&gt;Kramdown&lt;/a&gt; and was going well, 
until I hit a roadblock I couldn&amp;rsquo;t figure out. Fortunately, a fresh eye was all it took to realise my mistakes and 
finish the work — as useless as it may be now.&lt;/p&gt;

&lt;h3 id=&quot;the-situation-where-i-left-it&quot;&gt;The situation where I left it&lt;/h3&gt;

&lt;p&gt;When Jekyll publishes a post, it calls upon Kramdown to &lt;em&gt;convert&lt;/em&gt; the Markdown to HTML, and Kramdown in turn calls upon 
Rouge to &lt;em&gt;highlight&lt;/em&gt; (i.e. replace with complex HTML) the code samples it encounters. Rouge offers different &lt;em&gt;formatters&lt;/em&gt; 
to be used, depending on the kind of syntax highlighting needed.&lt;/p&gt;

&lt;p&gt;The original formatter used by Kramdown is &lt;code&gt;Rouge::Formatters::HTMLLegacy&lt;/code&gt;, but actually it is more of a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Facade_pattern&quot;&gt;facade&lt;/a&gt; in front of four different formatters: &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;HTMLInline&lt;/code&gt;, 
&lt;code&gt;HTMLTable&lt;/code&gt; and &lt;code&gt;HTMLPygments&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To wrap the Rouge-generated HTML in &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; elements, I had decided to write a custom &lt;em&gt;formatter&lt;/em&gt; for Rouge. My 
formatter inherited from &lt;code&gt;HTML&lt;/code&gt;, ignoring the other three:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rouge&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rouge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Formatters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLWithFigure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;figure&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;figcaption&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;escape_special_html_chars&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/figcaption&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/figure&amp;gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, this formatter didn&amp;rsquo;t render the HTML code I was expecting: the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; elements 
were there, as was the highlighted code, but the later was not wrapped in &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; elements, as it should 
have.&lt;/p&gt;

&lt;p&gt;This issue didn&amp;rsquo;t happen with the &lt;code&gt;HTMLLegacy&lt;/code&gt; formatter, so I took a quick look at its code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rouge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Formatters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLLegacy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formatter&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# @option opts [String] :css_class (&#39;highlight&#39;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# @option opts [true/false] :line_numbers (false)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# @option opts [Rouge::CSSTheme] :inline_theme (nil)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# @option opts [true/false] :wrap (true)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Initialize with options.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# If `:inline_theme` is given, then instead of rendering the&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# tokens as &amp;lt;span&amp;gt; tags with CSS classes, the styles according to&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# the given theme will be inlined in &quot;style&quot; attributes.  This is&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# useful for formats in which stylesheets are not available.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Content will be wrapped in a tag (`div` if tableized, `pre` if&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# not) with the given `:css_class` unless `:wrap` is set to `false`.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:inline_theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTMLInline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inline_theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;


        &lt;span class=&quot;vi&quot;&gt;@formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTMLTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:line_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTMLPygments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:css_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;codehilite&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;rouge/lib/rouge/formatters/html_legacy.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;My first mistake was to skip over the comments (rookie mistake) and focus on the first line of the initializer, 
leading me to believe that, indeed, &lt;code&gt;HTML&lt;/code&gt; would be the formatter used in normal cases. Looking at their names, 
&lt;code&gt;HTMLInline&lt;/code&gt; was obviously for inline code samples, &lt;code&gt;HTMLTable&lt;/code&gt; for the complex rendering with line numbers (as 
hinted at by the conditional &lt;code&gt;if opts[:line_numbers]&lt;/code&gt;), while &lt;code&gt;HTMLPygments&lt;/code&gt; probably had something to do with a 
legacy fallback for users of &lt;a href=&quot;https://github.com/pygments/pygments.rb&quot;&gt;Pygments&lt;/a&gt;, the precursor to Rouge.&lt;/p&gt;

&lt;p&gt;I then tried to add the missing elements to my custom formatter, even though I couldn&amp;rsquo;t quite understand why they 
were missing in the first place. In retrospect, was my second mistake — I was trying to stumble my way to a solution 
without taking the time to figure out the problem first.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rouge&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rouge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Formatters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLWithFigure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;figure&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%Q{&amp;lt;pre class=&quot;highlight&quot;&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;figcaption&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;escape_special_html_chars&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/figcaption&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/figure&amp;gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Unsurprisingly, this didn&amp;rsquo;t work. Yes, the code was preformatted thanks to the extra HTML elements, but so were simple 
code spans – and those should &lt;em&gt;not&lt;/em&gt; be wrapped in a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; element, only a &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; one.&lt;/p&gt;

&lt;p&gt;Faced with this problem, I made yet a third mistake: I concluded that, since the &lt;code&gt;HTML&lt;/code&gt; formatter was not adding the 
&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; elements, they were under the responsibility of the Markdown converter (i.e. Kramdown), and not 
the syntax highlighter. So I went looking for their handling in Kramdown&amp;rsquo;s code, a code spelunking session that led 
me nowhere; in part because Kramdown&amp;rsquo;s source was only part of the actual code involved, especially when it comes to 
code blocks (Jekyll also loads up &lt;a href=&quot;https://github.com/kramdown/parser-gfm&quot;&gt;kramwdown-parser-gfm&lt;/a&gt;), but mostly because 
there is no such code in the first place!&lt;/p&gt;

&lt;h3 id=&quot;solving-the-mystery&quot;&gt;Solving the mystery&lt;/h3&gt;

&lt;p&gt;Lost in a dead end, I gave up and tried a different approach, with a different Markdown converter. But what had I missed 
back then?&lt;/p&gt;

&lt;p&gt;Contrary to my initial, half-backed conclusion, Kramdown &lt;em&gt;does&lt;/em&gt; rely on Rouge to wrap the syntax-highlighted code in a 
&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; and, if needed, a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; elements. Outputting the options passed from Kramdown to the formatter gave me a clue:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLWithFigure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jekyll build &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;{:formatter=&amp;gt;&quot;HTMLWithFigure&quot;, :default_lang=&amp;gt;&quot;plaintext&quot;, :guess_lang=&amp;gt;true, :wrap=&amp;gt;false, :caption=&amp;gt;nil, :css_class=&amp;gt;&quot;highlight&quot;}
{:formatter=&amp;gt;&quot;HTMLWithFigure&quot;, :default_lang=&amp;gt;&quot;plaintext&quot;, :guess_lang=&amp;gt;true, :caption=&amp;gt;nil, :css_class=&amp;gt;&quot;highlight&quot;}
{:formatter=&amp;gt;&quot;HTMLWithFigure&quot;, :default_lang=&amp;gt;&quot;plaintext&quot;, :guess_lang=&amp;gt;true, :wrap=&amp;gt;false, :caption=&amp;gt;&quot;lorem ipsum dolor&quot;, :css_class=&amp;gt;&quot;highlight&quot;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Along the expected options — including the caption — is one named &lt;code&gt;:wrap&lt;/code&gt;. I remembered having seen it in the &lt;code&gt;HTMLLegacy&lt;/code&gt; 
initializer:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:inline_theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTMLInline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:inline_theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTMLPygments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:css_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;codehilite&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Could it be that this &lt;code&gt;HTMLPygments&lt;/code&gt; was not just a legacy formatter for obscure backward-compatiblity edge cases? I had 
a look:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rouge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Formatters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLPygments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formatter&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;css_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;codehilite&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@css_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;css_class&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%(&amp;lt;div class=&quot;highlight&quot;&amp;gt;&amp;lt;pre class=&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@css_class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;&quot;&amp;gt;&amp;lt;code&amp;gt;)&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;So there it was. In spite of its name, &lt;code&gt;HTMLPygments&lt;/code&gt; is the real deal. (Interestingly, this piece of code shows a 
different pattern than subclassing &lt;code&gt;Rouge::Formatters::HTML&lt;/code&gt;, as &lt;a href=&quot;https://github.com/rouge-ruby/rouge#writing-your-own-html-formatter&quot;&gt;the README suggests&lt;/a&gt;; 
instead, &lt;code&gt;HTMLPygments&lt;/code&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator&lt;/a&gt; of the selected base formatter.)&lt;/p&gt;

&lt;h3 id=&quot;searching-for-a-proper-solution&quot;&gt;Searching for a proper solution&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s recap. Kramdown&amp;rsquo;s converter calls up Rouge to turn a code block into a collection of specifically-crafted &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 
elements. Because the expected result can vary, Rouge offers several formatters to craft these elements, and optionnally 
wrap them in containing HTML elements such as &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;. However, Kramdown&amp;rsquo;s converter doesn&amp;rsquo;t really care 
about chosing the right formatter; instead, it defers to a special one, &lt;code&gt;HTMLLegacy&lt;/code&gt;, which does the selection for it, 
based on a few options, such as &lt;code&gt;:wrap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We want to use a custom formatter, but &lt;em&gt;only when expecting certain results&lt;/em&gt; (namely: the rendering of a code &lt;em&gt;block&lt;/em&gt;). 
Ideally, we would like to keep Kramdown&amp;rsquo;s normal behavior untouched, except for this addition of a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element when 
rendering a code block. So what is Kramdown&amp;rsquo;s normal behavior?&lt;/p&gt;

&lt;p&gt;It is hidden behind quite a bit of indirection, but basically, all options defined in Kramdown&amp;rsquo;s configuration for 
Rouge are passed down to the &lt;code&gt;HTMLLegacy&lt;/code&gt; initializer. Furthermore, these options can be specified twice: once for the 
rendering of a code &lt;code&gt;block&lt;/code&gt; and once for the rendering of a code &lt;code&gt;span&lt;/code&gt;. This is a lot of behavior to preserve.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We could move the facade logic of &lt;code&gt;HTMLLegacy&lt;/code&gt; to the converter, and have it chose the right formater (including our 
custom one) based on the options passed, while respecting the configuration syntax (i.e. the differents options for 
&lt;code&gt;span&lt;/code&gt; and &lt;code&gt;block&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;We could copy-paste this facade logic from &lt;code&gt;HTMLLegacy&lt;/code&gt; to our custom formatter. That would leave it behind should 
&lt;code&gt;HTMLLegacy&lt;/code&gt; evolve in a future Rouge upgrade, but this eventuality seems unlikely.&lt;/li&gt;
  &lt;li&gt;We could re-open or extend &lt;code&gt;HTMLLegacy&lt;/code&gt; so that an extra decorator was added to the formatter used when a caption 
is present (or, alternatively, every time a &lt;em&gt;block&lt;/em&gt; is renderer).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last option would be the least intrusive, and also the most acrobatic, since it would involve monkey-patching Rouge. 
It could look like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rouge&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cgi&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rouge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Formatters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLWithFigure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formatter&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;figure&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;figcaption&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CGI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;escape_html&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/figcaption&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/figure&amp;gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Rouge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Formatters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTMLLegacy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rouge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Formatters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTMLWithFigure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;I admit, I like this approach — but this is mostly my ego speaking. I don&amp;rsquo;t get to use &lt;code&gt;Module#prepend&lt;/code&gt; and anynomous module 
that often, and monkey-patching is a bit exhilarating. Plus, it is indeed the least intrusive approach – it leaves the 
inner workings of Rouge as they are, and the custom Kramdown syntax highlighter required is mostly a carbon copy of the 
original (including the use of &lt;code&gt;HTMLLegacy&lt;/code&gt;). However, monkey-patching is always risky, and more importantly, it 
doesn&amp;rsquo;t fix the underlying issue: &lt;code&gt;HTMLLegacy&lt;/code&gt;, as its name implies, is a &lt;em&gt;legacy&lt;/em&gt; formatter, introduced for 
backward-compatibility with Rouge 1.x. It would be better if Kramdown wasn&amp;rsquo;t using it in the first place.&lt;/p&gt;

&lt;p&gt;(Note that Jekyll, for its &lt;code&gt;highlight&lt;/code&gt; Liquid tag, does the right thing and instantiates the right formatter directly, 
instead of relying on this transitional prop.)&lt;/p&gt;

&lt;h3 id=&quot;the-subtleties-of-software-design&quot;&gt;The subtleties of software design&lt;/h3&gt;

&lt;p&gt;Instead, let&amp;rsquo;s consider the other two options. The first one makes the Markdown converter responsible for adding the 
&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tags, while the second keeps this responsibility at the syntax highlighter level. As it happens, 
the Markdown specification is quite explicit as to how code blocks should be &lt;em&gt;converted&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rather than forming normal paragraphs, the lines of a code block are interpreted literally. 
Markdown wraps a code block in both &amp;lt;pre&amp;gt; and &lt;code&gt; tags.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, relying on the syntax highlighter do the wrapping seems like a mistake in the first place. Put differently, when 
converting a Markdown code block to HTML, the code should always end up wrapped in a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; elements, 
even if there is no code highlighting being done.&lt;/p&gt;

&lt;p&gt;In fact, this is exactly was Kramdown does &lt;em&gt;when there is no highlighting&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert_codeblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;highlighted_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highlight_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hl_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highlighted_code&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_syntax_highlighter_to_class_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hl_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default_lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlighted_code&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}#{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;escape_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;pre&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;code&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;kramdown/lib/kramdown/converter/html.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;If the code has been highlighted, it is wrapped in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;; if not, it is wrapped in the mandatory &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; 
elements.&lt;/p&gt;

&lt;p&gt;I can only speculate as to why Kramdown behaves so — my guess is that Rouge initially took upon itself to do the wrapping 
in &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; elements, and Kramdown then had to take this over-zealous behaviour into account, and stay like 
this even after Rouge fixed its rendering, probably because other systems now depend on it.&lt;/p&gt;

&lt;p&gt;In any case, we could either use a custom converter for Kramdown (one that would &lt;em&gt;not&lt;/em&gt; rely on Rouge for the wrapping), 
or change the way its &lt;code&gt;Converter::HMTL&lt;/code&gt; converter works. Both options seem daunting.&lt;/p&gt;

&lt;p&gt;Kramdown is very modular and configurable, but has no mechanism to allow the swapping of converters – Kramdown relies 
on metaprogramming to require the relevant converter based on the name of the method called for the conversion, so that 
&lt;code&gt;#to_html&lt;/code&gt; instantiates a &lt;code&gt;Converter::Html&lt;/code&gt; converter, and so on. To use a different HTML converter, we would have to 
either pretend that it converts to a different format (and somehome have Jekyll call &lt;code&gt;#to_custom_html&lt;/code&gt; instead…) or 
hijack Kramdown&amp;rsquo;s converter-instantiating logic. Both options are way more intrusive than monkey-patching Rouge&amp;rsquo;s 
&lt;code&gt;HTMLLegacy&lt;/code&gt; formatter.&lt;/p&gt;

&lt;h3 id=&quot;the-intricacy-of-open-source&quot;&gt;The intricacy of open source&lt;/h3&gt;

&lt;p&gt;But if relying on the syntax highlight to add the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;elements is a mistake in the first place, why not 
contribute to Kramdown and submit a fix? In short: because I&amp;rsquo;m not too fond of Kramdown as a project.&lt;/p&gt;

&lt;p&gt;I love contributing to open source – in fact, I consider that is it a privilege to be able to do so, and a duty to 
actually contribute if you can. However, I also consider that any contribution, even the smallest, is a form of commitment 
to the project.&lt;/p&gt;

&lt;p&gt;Open source maintainers deserve respect; they (usually) welcome contributions, but in my opinion, the least one can 
do when contributing is to have regard for the the maintainers&amp;rsquo; leadership, opinions, choices, and the overall direction 
they want to give their project. In other words: when contributing to Rome, do as the Roman senators do.&lt;/p&gt;

&lt;p&gt;I may be overly cautious, but I&amp;rsquo;m not too fond of opening a PR without being confident that it would be useful to the 
project, and not only to me, and that it would be in line with whatever the project maintainers have in mind. In other 
words, projects have a vibe, and I want to be in sync with it.&lt;/p&gt;

&lt;p&gt;This probably sounds like a lot of overthinking, or possibly an excuse not to contribute, but it&amp;rsquo;s not. It&amp;rsquo;s basically 
a complicated way to say that I don&amp;rsquo;t want to contribute to projects whose philosophy or leadership I don&amp;rsquo;t feel good 
about, and that is exactly the case here.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve complained about the complexity of Kramdown&amp;rsquo;s code base (and yes, I know how easy it is to criticise), but in itself 
this would not be enough to keep me from opening a small PR. However, to get a feel of the project, I took a look at 
the other PRs and the conversations around them, and didn&amp;rsquo;t really like what I saw. No major red flag, just a tone 
not to my liking.&lt;/p&gt;

&lt;p&gt;And so, since neither the technical nor human aspects of this project vibe with me, I&amp;rsquo;d rather not get involved. It&amp;rsquo;s 
as simple as that.&lt;/p&gt;

&lt;h3 id=&quot;done-beats-perfect&quot;&gt;Done beats perfect&lt;/h3&gt;

&lt;p&gt;I enjoy pursuing the best solution to a given problem – within reason. From my perspective – and I may well be wrong! – 
the &lt;em&gt;best&lt;/em&gt; solution would be to move the responsibility of wrapping code blocks in &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; elements 
from the syntax highligher (Rouge) to the converter (Kramdown), and while we&amp;rsquo;re at it to &lt;em&gt;also&lt;/em&gt; make the converter 
be responsible for adding the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; elements around the converted code block. However, this would require working 
on Kramdown, which is something I don&amp;rsquo;t want to do.&lt;/p&gt;

&lt;p&gt;And so, the second-best approach is the one I&amp;rsquo;ll go with – keep the wrapping of the highlighted code in &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;, 
&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; elements under the responsibility of Rouge, implemented through a small monkey-patch. It may not 
be ideal or perfect, but it will work, for a reasonable cost.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/articles/2023/05/01/markdown-the-pits-of-madness.html</id>
      <title>Markdown the pits of madness</title>
      <updated>2023-05-01T18:21:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/articles/2023/05/01/markdown-the-pits-of-madness.html" />

      <published>2023-05-01T18:21:00+02:00</published>
      <content type="html">&lt;p&gt;&lt;em&gt;In the annals of human history, there are tales of journeys that have driven men to the brink 
of madness, and beyond. Such is the one that I am about to recount, a voyage that took me to the 
furthest corners of &lt;code&gt;bundle open&lt;/code&gt;, and &lt;code&gt;binding.break&lt;/code&gt;. It is a journey that defies explanation, 
and yet I cannot deny its reality. The metaprogamming that I witnessed, the unspeakable layers of 
abstraction that I encountered, have left me forever scarred, and driven me to the very brink of sanity. 
And yet, I must tell this story, for the world must know of the darkness that lies beyond the veil of 
our static site generators, waiting to consume us all.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-nice-little-coding-project&quot;&gt;A nice little coding project&lt;/h3&gt;

&lt;p&gt;So, here&amp;rsquo;s the thing. I am currently writing a series of tutorials with a lot of code excerpts, taken 
from several different files. To make the context of each code sample obvious, I&amp;rsquo;ve been starting each 
code block with a comment indicating the name of the relevant file, like so:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# locations/innsmouth.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Locations&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Innsmouth&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Don&#39;t!&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;This works well, but frustrates my obsession with semantic HTML. The name of the file is not &lt;em&gt;really&lt;/em&gt; 
part of the code sample; it is rather its &lt;em&gt;caption&lt;/em&gt;. And there are HTML elements for such things: &lt;code&gt;&amp;lt;caption&amp;gt;&lt;/code&gt; 
for adding captions to tables, and &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; to add them to, well, any other content.&lt;/p&gt;

&lt;p&gt;By default, Jekyll renders &lt;a href=&quot;https://www.markdownguide.org/extended-syntax#fenced-code-blocks&quot;&gt;fenced code blocks&lt;/a&gt; with 
a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and a &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; elements, wrapped in two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&amp;rsquo;s:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;language-ruby highlighter-rouge&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;highlight&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;highlight&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;
        …
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;’s are a bit redundant, but fine; what I wanted was for either them or the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; element to be wrapped in a 
&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;, alongside a &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;. For example, having Jekyll generate this would have been great:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;language-ruby highlighter-rouge&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;highlight&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;
          …
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;locations/innsmouth.rb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Jekyll is said to be easy to extend, so what could be hard in writing some kind of plugin to enhance the rendering of 
fenced code blocks? On a fateful whim, I decided to embark on this journey…&lt;/p&gt;

&lt;h3 id=&quot;preparations&quot;&gt;Preparations&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I gathered my supplies and made the necessary arrangements, all the while feeling an ominous dread lurking within my very soul.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We experienced developers know better than to rush into a coding project without making sure that it has a valid goal, 
and that this goal can only be reached by coding (more on that later). So, before anything, I used Safari&amp;rsquo;s web inspector to 
try out the HTML above, ensuring that it would be valid, and that it would look good with some CSS. I was pleased with 
the results:&lt;br /&gt;
&lt;img src=&quot;/assets/markdown-the-pits-of-madness/preparations.png&quot; alt=&quot;Successful rendering using the web inspector to tinker with the HTML and CSS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, not being a n00b, I made sure the markup I had set upon could not be obtained by simply adding the extra HTML tags 
to the Markdown content. Unfortunately, the &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax#html&quot;&gt;Markdown specification&lt;/a&gt; 
is quite clear:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that Markdown formatting syntax is not processed within block-level HTML tags. 
E.g., you can’t use Markdown-style &lt;em&gt;emphasis&lt;/em&gt; inside an HTML block.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To be sure, I tried it anyway:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
  ```ruby
  module Locations
    class Innsmouth
      def self.visit
        raise &quot;Don&#39;t!&quot;
      end
    end
  end
  ```
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;locations/innsmouth.rb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And indeed, the resulting HTML was not what I wanted (and rendered poorly):&lt;br /&gt;
&lt;img src=&quot;/assets/markdown-the-pits-of-madness/preparations-2.png&quot; alt=&quot;Unsuccessful rendering mixing Markdown within an HTML block element&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Confident that &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;‘s and &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;‘s would indeed look good, but could not be generated without some 
tinkering, I set sails to the high seas of Jekyll plugins, Markdown converters, and syntax highlighters.&lt;/p&gt;

&lt;h3 id=&quot;syntax-highlighting-for-code-blocks-in-jekyll&quot;&gt;Syntax highlighting for code blocks in Jekyll&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The world of programming had long been my refuge from the terrors that lurked within the shadows. But as I delved 
deeper into the secrets of my static site generator, I realized that the very laws of OOP were nothing but a fragile 
veil, concealing horrors beyond human comprehension.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Having &lt;a href=&quot;https://github.com/rouge-ruby/rouge/pull/1943&quot;&gt;nitpicked on it&lt;/a&gt; recently, I knew that 
&lt;a href=&quot;https://rubygems.org/gems/rouge&quot;&gt;Rouge&lt;/a&gt; is what Jekyll uses to render syntax-highlighted code snippets. So I dived 
straight into its source and quickly found out that, in Rouge, the rendering is handled by 
&lt;a href=&quot;https://github.com/rouge-ruby/rouge#formatters&quot;&gt;&lt;em&gt;formatters&lt;/em&gt;&lt;/a&gt;. Creating a custom formatter seemed easy enough, but 
I had to make it available to Jekyll, which meant pluging it to the inner workings of Jekyll, by configuration if 
possible, by hack otherwise.&lt;/p&gt;

&lt;p&gt;Out of the box, Jekyll has two ways to render a code block with syntax highlighting, both ending up calling up on Rouge. 
The first one is through a &lt;a href=&quot;https://jekyllrb.com/docs/liquid/tags/#code-snippet-highlighting&quot;&gt;Jekyll-specific Liquid tag&lt;/a&gt;. 
With this approach, &lt;a href=&quot;https://github.com/jekyll/jekyll/blob/bb954ff16e380d233821f57fde44fcbb8ae599ca/lib/jekyll/tags/highlight.rb#L83&quot;&gt;Jekyll delegates to Rouge&lt;/a&gt; 
(that is, if you&amp;rsquo;ve kept the &lt;a href=&quot;https://github.com/jekyll/jekyll/blob/bb954ff16e380d233821f57fde44fcbb8ae599ca/lib/jekyll/configuration.rb#L40&quot;&gt;default configuration&lt;/a&gt;), 
using the either the &lt;code&gt;Rouge::Formatters::HTML&lt;/code&gt; or &lt;code&gt;Rouge::Formatters::HTMLTable&lt;/code&gt; formatters. Unfortunately, both classes 
are hardcoded in Jekyll; however, I did not really care about this approach, because I don&amp;rsquo;t use Liquid in my Markdown posts. 
(Among other reasons, I love Markdown for its portability; mixing a templating language to Markdown documents makes them 
dependent on yet another processor.)&lt;/p&gt;

&lt;p&gt;Instead, for code blocks I use the aforementioned fenced code blocks. In this case, the syntax higlighting is 
not handled by the Liquid converter, but by the Markdown converter. By default it is Kramdown, which happens 
to &lt;em&gt;also&lt;/em&gt; delegates to Rouge for the syntax highlighting. (But note that, like Jekyll, Kramdown allows the swapping of the 
syntax highlighter for another.)&lt;/p&gt;

&lt;p&gt;Kramdown wraps Rouge in its &lt;code&gt;Kramdown::Converter::SyntaxHighlighter::Rouge&lt;/code&gt; module. &lt;a href=&quot;https://github.com/gettalong/kramdown/blob/bd678ecb59f70778fdb3b08bdcd39e2ab7379b45/lib/kramdown/converter/syntax_highlighter/rouge.rb#L68&quot;&gt;Here&lt;/a&gt;, 
the default formatter is &lt;code&gt;Rouge::Formatters::HTMLLegacy&lt;/code&gt;, but it too can be swapped for something else, as long as 
the class or the name of this &amp;ldquo;something else&amp;rdquo; is passed as a converter option. This is in fact 
&lt;a href=&quot;https://kramdown.gettalong.org/syntax_highlighter/rouge.html&quot;&gt;pretty well documented&lt;/a&gt;, but of course I went through 
the code before RTFMing, because why think when you can act?&lt;/p&gt;

&lt;p&gt;So, after some partially needless code spelunking, I figured out that I could write a custom formatter for Rouge, 
and tell Kramdown to use it, so that Jekyll&amp;rsquo;s conversion from Markdown would generate the HTML I was looking for. The 
only missing ring in this chain of delegations was configuring Kramdown, but Jekyll makes this 
&lt;a href=&quot;https://jekyllrb.com/docs/configuration/markdown/#kramdown-processor&quot;&gt;rather trivial&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-dive-starts&quot;&gt;The dive starts&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;With trepidation, I began my experiments, seeking to unlock the mysteries of this nerdy CMS and uncover the dark truths that lay hidden within&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To put this plan to the test, I started with a dummy formatter:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rouge&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rouge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Formatters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NamelessCodex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;_plugins/nameless_codex_formatter.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;I then adjusted the configuration so that this dummy formatter would be used:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;kramdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;syntax_highlighter_opts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NamelessCodex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;_config.yml
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And, sure enough, everything seemed to work fine:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jekyll build &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.
Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.
Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.
Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.
Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Gaining confidence, I went to add extra markup to the formatted output – and then realized that I 
hadn&amp;rsquo;t thought about &lt;em&gt;how to pass the caption to the formatter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Well, it&amp;rsquo;s not entirely true. From a writer&amp;rsquo;s perspective, I had decided to use what GitHub calls 
the &lt;a href=&quot;https://github.github.com/gfm/#info-string&quot;&gt;info string&lt;/a&gt; – the part after the triple backtick 
where the language is specified. I had seen it being used to pass extra options to some Rouge lexers 
&lt;a href=&quot;https://github.com/rouge-ruby/rouge/blob/aa1a1240e1dfcad633cb80c8ef67fba68c35ef87/lib/rouge/lexers/console.rb#L26&quot;&gt;such as the console lexer&lt;/a&gt;. 
My plan was to use the same trick, with a &lt;code&gt;caption&lt;/code&gt; option:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;sb&quot;&gt;```ruby?caption=locations/innsmouth.rb
module Locations
 # …
end
```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;However, only then did I realise that the info string was indeed passed to the lexers, but not to 
the renderer! And yet, the base class for formatters &lt;em&gt;does&lt;/em&gt; &lt;a href=&quot;https://github.com/rouge-ruby/rouge/blob/aa1a1240e1dfcad633cb80c8ef67fba68c35ef87/lib/rouge/formatter.rb#L49&quot;&gt;accept options&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rouge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Formatter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initiatize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# pass&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;rouge/formatter.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And, indeed, Kramdown &lt;em&gt;does&lt;/em&gt; pass options to the formatter, but unfortunately, they don&amp;rsquo;t include 
the target language, as I gathered by the arguments in this method:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Kramdown::Converter::SyntaxHighlighter&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rouge&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;kramdown/converter/syntax_highlighter/rouge.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the &lt;code&gt;opts&lt;/code&gt; object is derived from the &lt;code&gt;converter&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; arguments, but not &lt;code&gt;lang&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Through deeper explorations of Kramdown&amp;rsquo;s code, I understood what the &lt;code&gt;converter&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and 
other arguments passed to &lt;code&gt;.call&lt;/code&gt; were, and confirmed my suspicions: the info string was indeed 
fully available as the &lt;code&gt;lang&lt;/code&gt; argument – but had to be passed along the other options to 
the formatter. Which meant using a custom Kramdown syntax highlighter, on top of a custom Rouge 
formatter.&lt;/p&gt;

&lt;h3 id=&quot;going-further-down-one-layer-at-a-time&quot;&gt;Going further down, one layer at a time&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Despite the warnings of my runtime, I pressed on, driven by a maddening curiosity to control what lay beyond the threshold of Markdown parsing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Like with the Rouge formatter, I wanted to start with a dummy syntax highlighter, which would basically do everything 
the basic highlighter does. Unfortunately, Kramdown highlighters are modules, not classes, so they cannot be inherited 
from, but I could still limit my own module to the bare minimum.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;kramdown/converter/syntax_highlighter/rouge&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RougeOutOfSpace&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Iä! Iä! Cthulhu fhtagn!&quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Kramdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SyntaxHighlighter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rouge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;_plugins/rouge_out_of_space.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Before I could try this out, though, I had to tell Jekyll to tell Kramdown to use this syntax highlighter instead of 
Rouge (or rather, instead of Kramdown&amp;rsquo;s wrapper around Rouge…) Unfortunately, even though Kramdown does have a 
configuration option to swap the syntax highlighter, it wasn&amp;rsquo;t enough to simply set it:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;kramdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;syntax_highligher&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RougeOutOfSpace&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;syntax_highlighter_opts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NamelessCodex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;_config.yml
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;That is because, unlike for the Rouge formatter, Kramdown doesn&amp;rsquo;t look for the relevant object 
by searching for a constant within a given module (for example, &lt;code&gt;Kramdown::Converter::SyntaxHighlighter&lt;/code&gt;). 
Instead, it keeps its own registry of &amp;ldquo;configurable stuff&amp;rdquo;, including a list of syntax highlighters, and &amp;ldquo;new 
stuff&amp;rdquo;&amp;rdquo; has to be added to this registry to be available later on. Understanding all this took me some time and 
meanderings in the seaweeds of Kramdown&amp;rsquo;s metaprogramming, but I eventually came up with something that worked:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;kramdown/converter/syntax_highlighter/rouge&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RougeOutOfSpace&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.&quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Kramdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SyntaxHighlighter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rouge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Kramdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_syntax_highlighter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rouge_out_of_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RougeOutOfSpace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;_plugins/rouge_out_of_space.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;kramdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;syntax_highligher&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rouge_out_of_space&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;syntax_highlighter_opts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NamelessCodex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;_config.yml
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jekyll build &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Iä! Iä! Cthulhu fhtagn!
Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.
Iä! Iä! Cthulhu fhtagn!
Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.
Iä! Iä! Cthulhu fhtagn!
Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.
Iä! Iä! Cthulhu fhtagn!
Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.
Iä! Iä! Cthulhu fhtagn!
Ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah-nagl fhtagn.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Finally, I could implement a syntax highlighter that would extract the caption from the info string, and pass it to the 
formatter. Which, for the former, unfortunately meant some copy-pasting from the original module – but I was still pleased 
with the end result.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NamelessCodex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;figure&amp;gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;figcaption&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;escape_special_html_chars&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/figcaption&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/figure&amp;gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;_plugins/nameless_codex_formatter.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;kramdown/converter/syntax_highlighter/rouge&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RougeOutOfSpace&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kramdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SyntaxHighlighter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rouge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# extracting the :caption option from the &quot;lang&quot; (actually the fence string) for the formatter&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/caption=([^&amp;amp;]*)/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;captures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;call_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default_lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default_lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default_lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:guess_lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;lexer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rouge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Lexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_fancy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default_lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:disable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;plaintext&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:guess_lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:css_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;highlight&#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# For backward compatibility when using Rouge 2.0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kramdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SyntaxHighlighter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rouge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;formatter_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;_plugins/rouge_out_of_space.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Now everything was in place – after hours of sorting through arcane code, I had a custom Rouge formatter, used by 
a custom Kramdown syntax highlighter, both made available as Jekyll plugins. I only had to check the results:&lt;br /&gt;
&lt;img src=&quot;/assets/markdown-the-pits-of-madness/going-further-down-one-layer-at-a-time.png&quot; alt=&quot;Unsuccessful rendering using a custom Rouge formatter along a custom Kramdown syntax highlighter&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dispair-madness-and-losing-ones-way&quot;&gt;Dispair, madness and losing one&amp;rsquo;s way&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;As I gazed upon the accursed web page, its blasphemously unformatted code sections seemed to writhe and twist before my eyes, 
revealing truths that my mortal mind could never comprehend, and in that moment, my sanity was forever lost to the abyss…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It didn&amp;rsquo;t work! Though the caption was there, the code was not highlighted – it wasn&amp;rsquo;t even formatted. Looking at the 
source, I realized that some elements, most significantly the &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;, were missing:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;language-ruby highlighter-rouge_out_of_space&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;module&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Locations&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;class&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nc&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Innsmouth&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;def&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nc&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;self&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nf&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;visit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;raise&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;s2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&quot;Don&#39;t!&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;end&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;end&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;k&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;end&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;locations/innsmouth.rb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And this is where, I confess, I lost my way. Re-reading Rouge&amp;rsquo;s source code, and especially the &lt;code&gt;Formatters::HTML&lt;/code&gt; class&lt;br /&gt;
which as far as I understood was the formatter normally used by Kramdown, and from which my custom formatter inherited, I 
saw not mention of these missing &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements. So I came to the conclusion that these were actually 
added &lt;em&gt;by the Kramdown converter&lt;/em&gt;, one level of delegation beyond (or is it before?) the syntax highlighter! This 
meant that I also had to write a custom HTML converter for Kramdown; one which would correctly wrap the syntax highligher code 
blocks in &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;To understand how to write such a converter, I dove deeper into Kramdown – and lost even more time and sanity 
figuring out how the Markdown-to-HTML works there, and especially the treatment of code blocks. It was a 
tortuous expedition, in part because Kramdown is not really meant for converting &lt;em&gt;Markdown&lt;/em&gt; – it&amp;rsquo;s originally built to 
convert a Markdown-inspired format (also called Kramdown!), which uses a different marker for fenced code blocks (&lt;code&gt;~~~&lt;/code&gt;). 
But Jekyll adds a plug-in to Kramdown, so that it understands &lt;em&gt;another&lt;/em&gt; Markdown variant, GFM, which is where the 
fenced-code-blocks-with-backticks come from.&lt;/p&gt;

&lt;p&gt;At that point, I stopped and reconsidered my plan. From a custom Rouge formatter, I had come to coding said formatter, plus a 
Kramdown syntax highlighter, had read through more metaprogramming-rich code that I could stay sane with, and was about to 
code a third custom component, this time a custom GFM-to-HTML converter for Kramdown. Was it really necessary? Worth it?&lt;/p&gt;

&lt;h3 id=&quot;back-on-the-bridge&quot;&gt;Back on the bridge&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;As I delved deeper into the ancient tome, my eyes fell upon a cursed passage, that would lead me to a fate worse than death&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In my initial preparations, I had tried simply mixing HTML code with Markdown (or, rather, GFM) markup, to no avail. But 
could it still be done? A bit of research on dubious websites led me to the conclusion that, yes, such mixing was allowed 
&lt;em&gt;in CommonMark&lt;/em&gt; – yet another Markdown variant, upon which GFM is based. But to use CommonMark, I would have to replace 
Kramdown with another processor, &lt;a href=&quot;https://github.com/jekyll/jekyll-commonmark&quot;&gt;&lt;code&gt;jekyll-commonmark&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once again, this is &lt;a href=&quot;https://jekyllrb.com/docs/configuration/markdown/#commonmark&quot;&gt;documented&lt;/a&gt; and easy to do. 
Unfortunately, a first try with my sample didn&amp;rsquo;t seem to work:&lt;br /&gt;
&lt;img src=&quot;/assets/markdown-the-pits-of-madness/back-on-the-bridge.png&quot; alt=&quot;Unsuccessful rendering using CommonMark without a blank line after the HTML tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I understood why after reading closely the &lt;a href=&quot;https://spec.commonmark.org/0.30/&quot;&gt;CommonMark spec&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Start condition: line begins [with] the string [&amp;lt;figure].&lt;/li&gt;
    &lt;li&gt;End condition: line is followed by a blank line.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;For my HTML/CommonMark mix to be properly converted to HTML, I needed to add a blank line at the end of the HTML part, like 
so:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;

```ruby
module Locations
  …
end
```
&lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;locations/innsmouth.rb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;(notice the blank line)
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-call-of-the-depths&quot;&gt;The call of the depths&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Blinded by my own hubris, I ignored the signs of impending doom and continued my quest for forbidden rendering.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This simple change was enough to make the content generation go perfectly, but it left me unsatisfied. I didn&amp;rsquo;t like 
this extra blank line that I was forced to add - it was unpleasant to my reddened but still delicate eye. And I resented 
CommonMark for making this requirement so difficult to figure out. So, in my folly, I decided to go back to writing a custom 
component that would leverage my previous work on Rouge and Kramdown. This time, it would have to be a &lt;em&gt;renderer&lt;/em&gt;, 
in the jargon of jekyll-commonmark.&lt;/p&gt;

&lt;p&gt;So I dove once again in a new code base and a new plugin, reading through the &lt;a href=&quot;&quot;&gt;HTML renderer&lt;/a&gt; to better build upon 
it. I put my sanity at risk by trying to come up with clever regexes, only to realize that I would also need to build 
a custom &lt;em&gt;converter&lt;/em&gt;, which would make use of my custom renderer. I felt caught in a time loop. Still, I persevered 
and came up with something that worked:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;commonmarker&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jekyll::Converters::Markdown::Necronomicon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Converters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Markdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CommonMark&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;CursedHtmlRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;options: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@render_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;extensions: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;CommonMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render_doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@parse_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CursedHtmlRenderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Converters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Markdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CommonMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HtmlRenderer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fence_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/(?:(\A\w+)\??)|(?:(\w+)=([^&amp;amp;]+)&amp;amp;?)/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compact&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;div class=&quot;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;language-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;highlighter-rouge&quot;&amp;gt;&amp;lt;div class=&quot;highlight&quot;&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;figure&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;pre&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcepos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39; class=&quot;highlight&quot;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option_enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:GITHUB_PRE_LANG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;out_data_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;code&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;out_data_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render_with_rouge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;figcaption&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;caption&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/figcaption&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has_key?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;caption&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/figure&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;_plugins/necronomicon.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The custom converter (&lt;code&gt;Necronomicon&lt;/code&gt;) is only there to ensure that the custom renderer (&lt;code&gt;Necronomicon::CursedHtmlRenderer&lt;/code&gt;) 
is used; it has to be placed in the &lt;code&gt;Jekyll::Converters::Markdown&lt;/code&gt; namespace because 
&lt;a href=&quot;https://github.com/jekyll/jekyll/blob/bb954ff16e380d233821f57fde44fcbb8ae599ca/lib/jekyll/converters/markdown.rb#L98&quot;&gt;that is where Jekyll looks for it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And so, in exchange for a little more of my sanity, I now had a second way to render code blocks in an elegant and 
semantically correct fashion:&lt;br /&gt;
&lt;img src=&quot;/assets/markdown-the-pits-of-madness/call-of-the-depths.png&quot; alt=&quot;Successful rendering using customized renderer and converter for jekyll-commonmark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the cosmic forces that govern us are nothing but cruel masters, and on their whim I decided to look again, 
more closely, at Kramdown&amp;rsquo;s documentation.&lt;/p&gt;

&lt;h3 id=&quot;back-home-forever-changed&quot;&gt;Back home, forever changed&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;As I gazed upon the tangled mess of code before me, I realized with a sinking feeling that I had come full circle, 
my cursed journey through the labyrinthine world of cyclopean programming having led me back to the very beginning.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is what the Kramdown (the format, not the gem) documentation says about &lt;a href=&quot;https://kramdown.gettalong.org/syntax.html#html-blocks&quot;&gt;HTML blocks&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Difference to Standard Markdown
[…] the original syntax does not allow you to use Markdown syntax in HTML blocks which is allowed with kramdown&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, just like CommonMark, Kramdown allows the mixing of raw HTML and Markdown. But did my initial test fail? Is 
a blank line necessary in Kramdow, too? I found the answer further down the documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If an HTML tag has an attribute markdown=&amp;rdquo;1&amp;rdquo;, then the default mechanism for parsing syntax in this tag is used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wasn&amp;rsquo;t sure what “the default mechanism” was, but I gave it a try:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;markdown=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ```ruby
  module Locations
    class Innsmouth
      def self.visit
        raise &quot;Don&#39;t!&quot;
      end
    end
  end
  ```
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;locations/innsmouth.rb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And, to my relief and despair, it worked perfectly:&lt;br /&gt;
&lt;img src=&quot;/assets/markdown-the-pits-of-madness/back-home-forever-changed.png&quot; alt=&quot;Success renderering using Kramdown&#39;s syntax for HTML blocks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now I could get rid of all my work – the custom Rouge formatter, Kramdown syntax highlighter, and jekyll-commonmark 
converter and renderer. All these were useless, since what I wanted had been available from the start – all was needed was 
an extra HTML attribute. As the documentation explained.&lt;/p&gt;

&lt;h3 id=&quot;unspeakable-learnings&quot;&gt;Unspeakable learnings&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Through my journey into the abyss of four different gems, I learned that the arcane secrets of the universe are not 
meant for mortal minds, and that the price of forbidden knowledge is a terrible and eternal damnation, not to mention 
an ironic waste of time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This “nice little coding project” turned out to be more eventful than I was expecting – but I did gain some rolls for 
skill increases in exchange for my SAN points.&lt;/p&gt;

&lt;p&gt;First, I came to realize &lt;strong&gt;how much of a mess the Markdown situation&lt;/strong&gt; is. I knew about variants like Github 
Flavored Markdown, CommonMark and a few others such as MultiMarkDown, but I naively thought that GFM had become a 
de-facto standard, of which CommonMark was only the official spec, like ECMAScript is to JavaScript (it is not). More 
importantly, I underestimated how much they differ, from the original Markdown and from one another. This led me to wrong 
assumptions when I went looking for a codeless way to reach my goal.&lt;/p&gt;

&lt;p&gt;Second, I got to know the inner workings of &lt;strong&gt;Jekyll&lt;/strong&gt;. I may disagree with some of its design choices, like using Liquid 
or the way &lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;collections&lt;/a&gt; work, but going through the code was a nice experience. 
Everything is well-architectured, and easy to understand.&lt;/p&gt;

&lt;p&gt;On the contrary, I wasn&amp;rsquo;t conviced by &lt;strong&gt;Kramdown, the gem&lt;/strong&gt;. It is a big piece of software, it does a lot of things, 
and it does them well. And I appreciate its overall architecture and care for extensibility (like Jekyll, and like Rouge for 
that matter). However, I found the code itself tortuous, overly generous in metaprogramming and Ruby acrobatics, while 
the test suite documents little (it&amp;rsquo;s mostly a suite of abstracted integration tests.) The code reads like the solo project 
of a clever programmer who&amp;rsquo;s having fun pushing himself; I would have enjoyed writing it, but I disliked reading it. Somehow, 
it fits with &lt;strong&gt;Kramdown, the format&lt;/strong&gt;. It is very complete, well thought-out, and it answers actual needs, but I 
simply don&amp;rsquo;t enjoy it. It is too close to an actual templating language – I was half-expecting to see syntax elements 
for loops and conditionals. (To be honest, the same could be said of CommonMark.)&lt;/p&gt;

&lt;p&gt;However, I have to admit that, as overly rich as Kramdown is, it is well documented. And this is probably the main 
lesson of this adventure: &lt;a href=&quot;http://www.catb.org/jargon/html/R/RTFM.html&quot;&gt;&lt;strong&gt;read the fucking manual&lt;/strong&gt;&lt;/a&gt;. All the pieces 
I needed were documented: the Jekyll docs says that Kramdown is used (with a GFM variant), and the Kramdoc documentation 
says how HTML blocks and Markdown can be mixed. Yes, everything is not &lt;em&gt;super&lt;/em&gt; clear, but still: I could have saved 
myself the whole trip down the code of 4 different gems if I had taken the time to read the docs first.&lt;/p&gt;

&lt;p&gt;But, on the other hand, it was a funny trip, and I brought back interesting souvenirs.&lt;/p&gt;

&lt;h3 id=&quot;artefacts-on-the-librarys-shelves&quot;&gt;Artefacts on the library&amp;rsquo;s shelves&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The eldritch relics I brought back from my journey now sit locked away, their very presence a reminder of the horrors that lie beyond the veil of our reality.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I now have 4 different ways to wrap my code samples in a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element, with an associated &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mixing HTML and Markdown, following Kramdown&amp;rsquo;s syntax (a &lt;code&gt;markdown&lt;/code&gt; attribute added to the wrapping HTML element).&lt;/li&gt;
  &lt;li&gt;Mixing HTML and Markdown, following CommonMark&amp;rsquo;s syntax (blank lines after the HTML elements).&lt;/li&gt;
  &lt;li&gt;Using the &lt;em&gt;info string&lt;/em&gt;, thanks to a custom Rouge formatter and a custom Kramdown syntax highlighter. (After a good night sleep, I understood my 
mistake and fixed this first attempt.)&lt;/li&gt;
  &lt;li&gt;Using the &lt;em&gt;info string&lt;/em&gt;, thanks to a custom Markdown processor (derived from jekyll-commonmark).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the time being, I&amp;rsquo;ve decided to go with the first one, as I&amp;rsquo;ve narrated above. However, I&amp;rsquo;m not &lt;em&gt;entirely&lt;/em&gt; happy 
with this solution. I like to stick to the defaults as much as possible, whether it&amp;rsquo;s for my computer setup, my test 
runner in Ruby, or my Markdown texts. I prefer to use the original Markdown as much as I can; I can go with GFM 
because it&amp;rsquo;s so ubiquituous in the programming world (and I like most of its additions to Markdown, to be honest). So using 
the info string would make sense, but it confuses my text editor – so even if the final result looks fine, &lt;em&gt;using&lt;/em&gt; 
this syntax is unconfortable. On the contrary, the extra HTML markup doesn&amp;rsquo;t look too bad, especially without 
the extra blank line that CommonMark requires.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s my trade-off for now: going with Kramdown&amp;rsquo;s syntax instead of the simplest Markdown, in order to have 
the benefits of a good rendering and a good writing experience. But the more I think about it, the more I&amp;rsquo;d like 
try moving the syntax-highlighting to the client side, so that I could get rid of the code fences altogether:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Lorem ipsum dolor sit amet.

&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;code&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
class Consectetur
  def adipisicing(elit)
  end
end
&lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;sed do eiusmod tempor incididunt&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;m still on the (code) fence as to wether it makes the text less legible or not. We&amp;rsquo;ll see.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/articles/steel_vellum/2023/04/26/meet-bruenor.html</id>
      <title>Meet Bruenor</title>
      <updated>2023-04-26T14:45:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/articles/steel_vellum/2023/04/26/meet-bruenor.html" />

      <published>2023-04-26T14:45:00+02:00</published>
      <content type="html">&lt;p&gt;We now have a project, a structure for its code, and a configured test runner. It&amp;rsquo;s time to start coding, which means 
that it&amp;rsquo;s time to start writing actual tests!&lt;/p&gt;

&lt;h3 id=&quot;first-test-big-loop&quot;&gt;First test, big loop&lt;/h3&gt;

&lt;p&gt;Following the principle of the &lt;strong&gt;double loop&lt;/strong&gt;, we want to start with some kind of outside-in, 
behaviour-describing test. For a proper application, this would be a use case of interacting with the UI; 
but since we&amp;rsquo;re building a library, our &amp;ldquo;integration&amp;rdquo; test will consist of actually using the library to fully create a 
character.&lt;/p&gt;

&lt;p&gt;As it happens, the Player&amp;rsquo;s Handbook gives an example of a complete character creation. If 
our library is to be both comprehensive and easy to use (almost like a DSL), we should aim 
for code that reads a bit like the English sentences in this example. And we can follow the structure of the 
example for our tests as well.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the first part in the character creation. It reads:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;1. Choose a Race&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;[…]&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Building Bruenor, Step 1&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;Bob is sitting down to create his character. He decides that a gruff mountain dwarf fits the 
character he wants to play. He notes all the racial traits of dwarves on his character sheet, 
including his speed of 25 feet and the languages he knows: Common and Dwarvish.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quite frankly, there is not a lot in here, but we can still extract some expected behaviour: 
it must be possible to choose a race, and said race should provide certain traits, such 
as speed and languages (which, in turn, means that a character should store and return these traits).&lt;/p&gt;

&lt;p&gt;Converted to a test, this section could thus look like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest/autorun&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;steel_vellum&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreatingBruenorTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_1_choose_a_race&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CharacterCreation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Races&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;character&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_includes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:common&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_includes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dwarvish&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/creating_bruenor_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-goldilocks-of-api-design&quot;&gt;The Goldilocks of API design&lt;/h3&gt;

&lt;p&gt;A few things are interesting here. First of all, unsurprisingly, we are writing tests for things that don&amp;rsquo;t exist yet: 
there is no &lt;code&gt;CharacterCreation&lt;/code&gt; class, no &lt;code&gt;#choose_race&lt;/code&gt; method, etc. We are writing the code we wish we had, not the 
code we have (obviously, since we have none).&lt;/p&gt;

&lt;p&gt;Second, note that we could have gone with another API. For example, with a block:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;CharacterCreation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Races&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;… or, for even more English-sounding code, something like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;choose_race&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mountain_dwarf&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Ruby makes it easy to hide implementation details – the objects we create and manipulate – behind a friendly DSL, but I 
think that it would be unwise to go this far, at least for now. Yes, we&amp;rsquo;re aiming for a great API, just like we&amp;rsquo;d be 
aiming for a great UI if we were building an app, but we should try to start with simple things. The block form would 
only be an extra indirection around the creation and subsequent use of a &lt;code&gt;CharacterCreation&lt;/code&gt; object; the argument-less 
block form would only hide said object behind &lt;code&gt;instance_eval&lt;/code&gt;‘s, etc. These layers of syntactic sugar would surely taste 
good, but let&amp;rsquo;s focus on the cake before considering the frosting.&lt;/p&gt;

&lt;p&gt;Finally, it&amp;rsquo;s interesting to see that our (upcoming) API is used in the &lt;a href=&quot;https://www.codewithjason.com/the-four-phases-of-a-test/&quot;&gt;&lt;em&gt;assertion&lt;/em&gt; phase&lt;/a&gt; 
of the test as much as the &lt;a href=&quot;https://thoughtbot.com/blog/four-phase-test&quot;&gt;&lt;em&gt;exercise&lt;/em&gt; phase&lt;/a&gt;. This is a bit unusual, 
but works well here, since our test is also meant to try out the API we&amp;rsquo;re designing.&lt;/p&gt;

&lt;h3 id=&quot;more-assertions-more-discoveries&quot;&gt;More assertions, more discoveries&lt;/h3&gt;

&lt;p&gt;When the example says “all the racial traits of dwarves”, it skips over the details. If we were to copy all the relevant 
traits on our character sheet, we&amp;rsquo;d see that there are quite a few of them. Interestingly, one of these traits requires 
the player to make a choice among a list of options, which reveals another requirement of our library, as can be seen 
in the full test, with all the traits asserted for:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest/autorun&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;steel_vellum&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreatingBruenorTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_1_choose_a_race&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CharacterCreation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Races&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pick_proficiency&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:smiths_tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from: :artisans_tools&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;character&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speed&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;darkvision&lt;/span&gt;
  
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ability_score_increases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:constitution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ability_score_increases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:strength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# from the subrace&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has_advantage_on_saving_throws_against?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:poison&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has_resistance_against?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:poison&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proficient_with?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:battleaxe&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proficient_with?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:handaxe&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proficient_with?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:throwing_hammer&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proficient_with?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:warhammer&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proficient_with?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:smiths_tools&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proficient_with?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:light_armor&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proficient_with?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:medium_armor&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;assert_includes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:common&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_includes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dwarvish&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert_includes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bruenor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;special_traits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stonecunning&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/creating_bruenor_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Now we have a complete test of all the things that happen when you choose your character&amp;rsquo;s race, and what objects 
and methods could allow us to either make or check these things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The character creation is an object in itself, of class &lt;code&gt;CharacterCreation&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The actual choosing of the race is made possible through the method &lt;code&gt;CharacterCreation#choose_race&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Races will be represented by classes (or maybe modules?), in their own namespace, such as &lt;code&gt;Races::MountainDwarf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The character itself can be obtained by calling &lt;code&gt;CharacterCreation#character&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We don&amp;rsquo;t know what kind of object the character will be, but we know that it will respond to several calls: 
&lt;code&gt;#size&lt;/code&gt;, &lt;code&gt;#speed&lt;/code&gt;, &lt;code&gt;#darkvision&lt;/code&gt;, &lt;code&gt;#ability_score_increases[]&lt;/code&gt;, &lt;code&gt;#has_advantage_on_saving_throws_against?&lt;/code&gt;, 
&lt;code&gt;#has_resistance_against?&lt;/code&gt;, &lt;code&gt;#proficient_with?&lt;/code&gt;, &lt;code&gt;#languages&lt;/code&gt; and &lt;code&gt;#special_traits&lt;/code&gt;; we also know the expected responses
for these calls.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;from-the-outside-to-the-inside&quot;&gt;From the outside to the inside&lt;/h3&gt;

&lt;p&gt;With our outer loop now ready, when can start the inner loops – which is to say adding unit tests for each relevant 
error message that we encounter while running the outer loop, then adding the code to make the unit test pass, 
and so on until there are no more errors in the outer loop. Let&amp;rsquo;s start:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/creating_bruenor_test.rb
&lt;span class=&quot;go&quot;&gt;Run options: --seed 20874

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
E

Finished in 0.000915s, 1092.8962 runs/s, 0.0000 assertions/s.

1) Error:
SteelVellum::CreatingBruenorTest#test_1_choose_a_race:
NameError: uninitialized constant SteelVellum::CreatingBruenorTest::CharacterCreation
test/creating_bruenor_test.rb:7:in `test_1_choose_a_race&#39;

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;This is perfectly normal – our test uses objects that don&amp;rsquo;t exist yet. So let&amp;rsquo;s add them; in order to keep our momentum, 
we won&amp;rsquo;t bother with a decent file organisation for now, and simply add the missing class declaration to the 
&lt;code&gt;lib/steel_vellum.rb&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharacterCreation&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;It is enough to let us move on to a different (albeit similar) error:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/creating_bruenor_test.rb
&lt;span class=&quot;go&quot;&gt;Run options: --seed 39286

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
E

Finished in 0.000638s, 1567.3982 runs/s, 0.0000 assertions/s.

1) Error:
SteelVellum::CreatingBruenorTest#test_1_choose_a_race:
NameError: uninitialized constant SteelVellum::CreatingBruenorTest::Races
test/creating_bruenor_test.rb:9:in `test_1_choose_a_race&#39;

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;ll keep adding the very minimal code needed to go through these &lt;code&gt;uninitialized constant&lt;/code&gt; errors until we reach 
something new:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/creating_bruenor_test.rb
&lt;span class=&quot;go&quot;&gt;Run options: --seed 28958

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
E

Finished in 0.000647s, 1545.5955 runs/s, 0.0000 assertions/s.

1) Error:
SteelVellum::CreatingBruenorTest#test_1_choose_a_race:
NoMethodError: undefined method `choose_race&#39; for #&amp;lt;SteelVellum::CharacterCreation:0x000000010705ca00&amp;gt;
test/creating_bruenor_test.rb:9:in `test_1_choose_a_race&#39;

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Now, that&amp;rsquo;s an error which will require more than an empty class declaration to fix! Let&amp;rsquo;s add a new test suite for 
the &lt;code&gt;CharacterCreation&lt;/code&gt; class, with a first test for the &lt;code&gt;#choose_race&lt;/code&gt; method – or at least a placeholder for it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest/autorun&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest/reporters&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Reporters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use!&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Reporters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DefaultReporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;steel_vellum/character_creation&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharacterCreationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_choosing_a_race&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# what now?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/character_creation_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Why put a placeholder and stop now? Because, before writing the test, I&amp;rsquo;d like us to take a short break and clean up the 
code organization. Our new test suite is about the &lt;code&gt;CharacterCreation&lt;/code&gt; class, and ideally, we shouldn&amp;rsquo;t need any other 
class to run it. By specifically requiring a &lt;code&gt;steel_vellum/character_creation&lt;/code&gt; file, instead of loading the whole library 
or relying on an autoloader, we ensure that dependencies will be obvious, should they arise – because we would then 
need to add new &lt;code&gt;require&lt;/code&gt; directives. But for this to work, we need to actually move the &lt;code&gt;CharacterCreation&lt;/code&gt; class 
definition to its own file.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharacterCreation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/character_creation.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;steel_vellum/character_creation&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;steel_vellum/version&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Races&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MountainDwarf&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;semantic-pedantry-and-api-whims&quot;&gt;Semantic pedantry and API whims&lt;/h3&gt;

&lt;p&gt;Now that this is done, we can think about what we want from the &lt;code&gt;#choose_race&lt;/code&gt; method. Since there is no game logic yet, 
“choosing the character&amp;rsquo;s race” could be nothing more than writing a simple value to a variable instance – just like 
writing down “Mountain Dwarf” on a character sheet. And instead of a class or module, we could use a simpler object, 
for example a symbol. Our test would then look like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_choosing_a_race&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CharacterCreation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mountain_dwarf&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mountain_dwarf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;race&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;This would probably work, but here&amp;rsquo;s the thing: I would love to be able to say that my character &lt;em&gt;is&lt;/em&gt; a Mountain Dwarf, 
not that it &lt;em&gt;has&lt;/em&gt; a race, which happens to be “Mountain Dwarf”. In other words, I&amp;rsquo;d love to be able to write this 
test instead:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_choosing_a_race&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CharacterCreation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Races&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_kind_of&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Races&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MountainDwarf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;character&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Is this excessive and capricious? Certainly. Does it have significant repercussion on our overall architecture? Definitely&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. 
Will we still do it, because it&amp;rsquo;s more fun? You bet.&lt;/p&gt;

&lt;p&gt;However, as written above, our unit test would still be a little too much coupled to implementation details – or, rather, 
to the details of the library&amp;rsquo;s ”business logic”.&lt;/p&gt;

&lt;p&gt;As much as I like my integration tests to be as realistic as possible, with plausible or even actual data, rules, classes, 
etc., I like my unit tests to be as abstract as possible – only caring about the bare minimum, and using as little of 
the actual application (or, in this case, library) as possible.&lt;/p&gt;

&lt;p&gt;Concretely, in this example, using a specific race class (&lt;code&gt;Races::MountainDwarf&lt;/code&gt;) seems a little &lt;em&gt;too&lt;/em&gt; specific. We want 
our character creation object to be able to handle anything that represents a character race, so the more generic, the 
better. Let&amp;rsquo;s see how the test could look like with a generic &lt;code&gt;Race&lt;/code&gt; class instead of a specific one.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test_helper&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/character_creation&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./lib/steel_vellum/race&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharacterCreationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_choosing_a_race&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CharacterCreation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;choose_race&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;assert_kind_of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;race&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;character&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/character_creation_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Now, we could go even further and use a &lt;em&gt;stub&lt;/em&gt; instead of a &lt;code&gt;Race&lt;/code&gt; instance – something like &lt;code&gt;Object.new&lt;/code&gt; instead of 
&lt;code&gt;Race.new&lt;/code&gt; for example&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. This would be closer to the ”London school” of testing, but honestly, in such as situation, 
I would find stubbing overkill. It&amp;rsquo;s a matter of balance: using a stub would reduce the coupling (as hinted by the 
necessary of adding a &lt;code&gt;require&lt;/code&gt; at the top of the file), but also add an extra layer of abstraction between the test and 
the implementation.&lt;/p&gt;

&lt;p&gt;And if for some reason we&amp;rsquo;d eventually add constraints to the argument expected by the &lt;code&gt;Race#choose_race&lt;/code&gt; method, then 
our stub would have to respect them – in other words, it would have to &lt;a href=&quot;http://wiki.c2.com/?DuckTyping&quot;&gt;quack like a duck&lt;/a&gt;. 
Given how central to the library I expect the &lt;code&gt;Race&lt;/code&gt; class to be, I anticipate a lot of quacking and a lot of stubbing, 
if we were to go this route. So, instead, let&amp;rsquo;s use the actual class – even if it doesn&amp;rsquo;t exist yet and would have 
to be &lt;em&gt;slimed&lt;/em&gt;&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up&lt;/h3&gt;

&lt;p&gt;The real value of BDD and TDD is not the tests, it&amp;rsquo;s the &lt;em&gt;driving of the design by the tests&lt;/em&gt;. So far, we have written 
two tests: an integration test for the ”big loop”, which drove the design of the library&amp;rsquo;s API, and a unit test for 
the first ”small loop”, which drove the design of a specific part of the library&amp;rsquo;s architecture (namely, the relationship 
between character objects and race objects). Let&amp;rsquo;s end this part here, and move on the part 4 for the first actual 
business code of this project!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;If you know your OOP, you&amp;rsquo;ll recognize a case of favoring inheritance over composition, which is often a mistake.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Vigilant readers would spot a problem with using &lt;code&gt;Object.new&lt;/code&gt; here – but let&amp;rsquo;s ignore it for now, we&amp;rsquo;ll come back 
  to this in the next part…&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;em&gt;Sliming&lt;/em&gt; is a term I&amp;rsquo;ve borrowed from &lt;a href=&quot;https://www.destroyallsoftware.com&quot;&gt;Gary Bernhardt&lt;/a&gt;, and basically means 
  ”cheating temporarily by writing whatever implementation makes the test pass”.&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/articles/steel_vellum/2023/04/22/arranging-atoms-by-hand.html</id>
      <title>Arranging atoms by hand</title>
      <updated>2023-04-22T14:45:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/articles/steel_vellum/2023/04/22/arranging-atoms-by-hand.html" />

      <published>2023-04-22T14:45:00+02:00</published>
      <content type="html">&lt;p&gt;Gems are cool. They are shiny, colorful, and worth up to 5000 gold pieces each, according to the Game Master&amp;rsquo;s Guide. 
In the Ruby world, though, gems are sometimes a bit mysterious – they are magical pieces of software 
that do stuff for you once you&amp;rsquo;ve invoked them. To make things even more complicated, nowadays we 
don&amp;rsquo;t even handle gems directly – most of the time, we let another tool, &lt;a href=&quot;https://bundler.io&quot;&gt;Bundler&lt;/a&gt;, 
do it for us. It&amp;rsquo;s a shame, because understanding Ruby gems is also worth a lot. So, before we go on our journey, 
let&amp;rsquo;s take a detour to see how gems work and how to build one ourselves.&lt;/p&gt;

&lt;h3 id=&quot;how-gems-work&quot;&gt;How gems work&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RubyGems&lt;/code&gt;, first released in 2004, is &amp;ldquo;just&amp;rdquo; a Ruby library. But it is such an important one that it has been bundled 
with Ruby since 2007 (and Ruby 1.9) When you install Ruby on a computer, RubyGems is installed, too; and when you run a 
run a Ruby script or a REPL, RubyGems is automatically required for you.&lt;/p&gt;

&lt;p&gt;And when it is required, RubyGems &amp;ldquo;hijacks&amp;rdquo; the native &lt;code&gt;Kernel#require&lt;/code&gt; method so that files are looked for in more places 
than normal – including certain directories that RubyGems knows about, and where it can install specifically packaged 
Ruby libraries, called &lt;em&gt;gems&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;RubyGems also comes with an executable, &lt;code&gt;gem&lt;/code&gt;, that can (among other things) fetch, unpack, and install gems in those 
directories. Gems installed by the &lt;code&gt;gem&lt;/code&gt; command will be found by the hijacked &lt;code&gt;require&lt;/code&gt; method, and &lt;em&gt;voilà&lt;/em&gt;: Ruby 
programmers can enjoy a very easy way to distribute and integrate libraries in their Ruby programs.&lt;/p&gt;

&lt;p&gt;In order for RubyGems to be able to install it, a gem must follow certain specifications. They are rather light, and 
well documented &lt;a href=&quot;https://guides.rubygems.org/what-is-a-gem/&quot;&gt;in the RubyGems guides&lt;/a&gt;. The minimal setup for a gem is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code&gt;lib/&lt;/code&gt; directory, which will contain the gem&amp;rsquo;s code – at the very least, in a single file, which by convention is named after the gem.&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;gemspec&lt;/em&gt; file, also named after the gem (but with the &lt;code&gt;.gemspec&lt;/code&gt; extension)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, two files and one directory are enough for RubyGems to package everything into a single archive, or more importantly, 
to unpack said archive and install the library&amp;rsquo;s code in the right place.&lt;/p&gt;

&lt;h3 id=&quot;creating-our-gem&quot;&gt;Creating our gem&lt;/h3&gt;
&lt;p&gt;Several tools can generate a scaffolding for a new gem (such as &lt;a href=&quot;bundler.io&quot;&gt;Bundler&lt;/a&gt; or &lt;a href=&quot;https://alchemists.io/projects/gemsmith&quot;&gt;Gemsmith&lt;/a&gt;), 
but we&amp;rsquo;ll do it from scratch, both as a learning exercice and to keep things minimal. And the first step in creating our 
gem is to name it.&lt;/p&gt;

&lt;p&gt;Finding a good name is hard. The RubyGems guides provide &lt;a href=&quot;https://guides.rubygems.org/name-your-gem/&quot;&gt;great advice on naming a gem&lt;/a&gt;, 
but they are more about conventions to follow (which we will!) than naming ideas. I like whimsical and colorful names, 
so something boring like &lt;code&gt;dnd_character_creator&lt;/code&gt; is out of the question. Instead, let&amp;rsquo;s use our imagination. What 
&amp;ldquo;builds character&amp;rdquo;, in a fantasy world? Conan would probably say that it&amp;rsquo;s action and combat - or more poetically, 
&lt;a href=&quot;https://youtu.be/MKMG-FdCGtM&quot;&gt;steel&lt;/a&gt;. And we&amp;rsquo;ll eventually write our character down on a character sheet – a piece of 
paper, or in a fantasy world, vellum. So let&amp;rsquo;s name our gem &lt;em&gt;Steel Vellum&lt;/em&gt; – or rather, &lt;code&gt;steel_vellum&lt;/code&gt;. It sounds D&amp;amp;D-y 
enough for me.&lt;/p&gt;

&lt;p&gt;Now that we have a name, we can create the files and folder that we need:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; steel_vellum/lib
&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;steel_vellum/lib/steel_vellum.rb
&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;steel_vellum/steel_vellum.gemspec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;According to &lt;a href=&quot;https://guides.rubygems.org/specification-reference/&quot;&gt;the documentation&lt;/a&gt;, the gemspec file must contain 
the gem&amp;rsquo;s specifications – a lot of them can be defined, but only 5 are required: a name, a version number, the list 
of files that constitute the library, a short description and a list of authors. So let&amp;rsquo;s add these to the 
&lt;code&gt;steel_vellum.gemspec&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;steel_vellum&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib/steel_vellum.rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A D&amp;amp;D 5e character creation library&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ronan Limon Duparcmeur&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;steel_vellum.gemspec
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;As for the code of the libary itself, let&amp;rsquo;s do the very bare minimum for now, and only provide a module. We could leave 
it empty, but let&amp;rsquo;s also add a version number in the form of a constant – just to have something to try out the gem with:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;It is enough? Will it work? Let&amp;rsquo;s see if we can build the gem – i.e. package it into a &lt;code&gt;.gem&lt;/code&gt; file – and install it.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;steel_vellum
&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gem build
&lt;span class=&quot;go&quot;&gt;
WARNING:  licenses is empty, but is recommended.  Use a license identifier from
http://spdx.org/licenses or &#39;Nonstandard&#39; for a nonstandard license.
WARNING:  no homepage specified
WARNING:  See https://guides.rubygems.org/specification-reference/ for help
  Successfully built RubyGem
  Name: steel_vellum
  Version: 0.1.0
  File: steel_vellum-0.1.0.gem

$ gem install steel_vellum-0.1.0.gem

Successfully installed steel_vellum-0.1.0
1 gem installed
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;RubyGems gave us a few warnings when it built the gem (and we&amp;rsquo;ll address them later), but so far, everything seems fine. 
Let&amp;rsquo;s check it out in a Ruby console:&lt;/p&gt;

&lt;div class=&quot;language-irb highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;steel_vellum&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SteelVellum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;It works! And we can see that the metadata we&amp;rsquo;ve added to our gem is indeed used:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gem info steel_vellum
&lt;span class=&quot;go&quot;&gt;
*** LOCAL GEMS ***

steel_vellum (0.1.0)
    Author: Ronan Limon Duparcmeur
    Installed at: /Users/ronan/.gem/ruby/3.2.2

    A D&amp;amp;D 5e character creation library
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;(Note that the actual installation path will vary according to your Ruby installation.)&lt;/p&gt;

&lt;h3 id=&quot;test-setup&quot;&gt;Test setup&lt;/h3&gt;
&lt;p&gt;We now have the right foundations for our gem, and we could start adding code to the &lt;code&gt;lib/steel_vellum.rb&lt;/code&gt; file. But we&amp;rsquo;ve 
decided to go tests-first as much as possible, so let&amp;rsquo;s setup our project so that we can indeed write and run tests.&lt;/p&gt;

&lt;p&gt;RSpec is a popular and extremely complete testing framework, but I prefer &lt;a href=&quot;https://rubygems.org/gems/minitest&quot;&gt;Minitest&lt;/a&gt; 
– it&amp;rsquo;s lean and fast, and does everything you need but nothing more, which means that it&amp;rsquo;s hard to shoot yourself in 
the foot (by abusing mocks or &lt;a href=&quot;https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction&quot;&gt;over-DRYing&lt;/a&gt;, for example), 
even if you can miss the syntactic sugar, sometimes. Plus, like RubyGems, Minitest comes bundled with Ruby.&lt;/p&gt;

&lt;p&gt;However, even though Minitest doesn&amp;rsquo;t need to be &lt;em&gt;installed&lt;/em&gt; (normally), it still needs to be declared as a &lt;em&gt;dependency&lt;/em&gt; of 
our gem. This is done through the gemspec file:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;steel_vellum&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib/steel_vellum.rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A D&amp;amp;D 5e character creation library&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ronan Limon Duparcmeur&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;steel_vellum.gemspec
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir test&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch test&lt;/span&gt;/steel_vellum_test.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The file itself only needs to require Minitest, but we&amp;rsquo;ll add a placeholder test to ensure that everything works well:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest/autorun&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;steel_vellum&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SteelVellumTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_it_works&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SteelVellum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/steel_vellum_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;To run the test, when only need to run this file – but we need to make sure that the &lt;code&gt;lib/&lt;/code&gt; directory will be included 
in &lt;a href=&quot;https://docs.ruby-lang.org/en/master/Kernel.html#method-i-load&quot;&gt;Ruby&amp;rsquo;s &lt;code&gt;$LOAD_PATH&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;-Ilib&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/steel_vellum_test.rb
&lt;span class=&quot;go&quot;&gt;Run options: --seed 11645

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;.
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
Finished in 0.001717s, 582.4112 runs/s, 582.4112 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Our test suite – with its single test – runs fine. But typing the name of every single test file to run will eventually 
become tedious, so (&lt;a href=&quot;http://docs.seattlerb.org/minitest/README_rdoc.html#label-Running+Your+Tests&quot;&gt;as suggested in the documentation&lt;/a&gt;), 
let&amp;rsquo;s add a Rake task to run the whole suite for us. This is very easy, since Minitest provides one for us – we only need 
to set it as the default Rake task for our project. And because we&amp;rsquo;ve stuck to the conventions when namimg files and 
directories, we need almost nothing:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest/test_task&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;Rakefile
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;rsquo;s it! Now, executing &lt;code&gt;rake&lt;/code&gt; without specifying a Rake task will run the whole test suite:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;𝄢&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rake
&lt;span class=&quot;go&quot;&gt;Run options: --seed 36531

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Running:
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;.
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;
Finished in 0.000540s, 1851.8521 runs/s, 1851.8521 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;final-touches&quot;&gt;Final touches&lt;/h3&gt;
&lt;p&gt;And so, we have the basis for our Steel Vellum library, written with its tests and distributable as a gem. Let&amp;rsquo;s wrap 
things up by smoothing the rough edges of this scaffold. We have a few warnings to fix, and our test runner could 
benefit from a more colorful output. More importantly, the gem&amp;rsquo;s version number is currently written twice, which 
means extra maintenance – or potential inconsitencies. Let&amp;rsquo;s fix all that by removing the &lt;code&gt;VERSION&lt;/code&gt; declaration from 
the main library file……&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;… and placing it in its own file…&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SteelVellum&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;lib/steel_vellum/version.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;… which can then be required directly in the gemspec file:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lib/steel_vellum/version&quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;steel_vellum&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SteelVellum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A D&amp;amp;D 5e character creation library&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authors&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ronan Limon Duparcmeur&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib/**/*.rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;license&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;homepage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/r3trofitted/steel_vellum&quot;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest-reporters&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;steel_vellum.gemspec
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Note that said gemspec file features new declarations, including a 
&lt;a href=&quot;https://ruby-doc.org/3.2.2/Dir.html#method-c-glob&quot;&gt;globbing approach&lt;/a&gt; to list files, and a development dependency on 
&lt;a href=&quot;https://github.com/minitest-reporters/minitest-reporters&quot;&gt;minitest-reporters&lt;/a&gt;, a Minitest plugin that improves the 
tests output, even when sticking to the defaults, like so:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge_with_caption&quot;&gt;&lt;figure&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest/autorun&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minitest/reporters&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Reporters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use!&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Reporters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DefaultReporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SteelVellumTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Let&#39;s add some!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figcaption&gt;test/steel_vellum_test.rb
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And &lt;em&gt;now&lt;/em&gt;, we&amp;rsquo;re &lt;a href=&quot;https://music.apple.com/fr/album/good-to-go/520098624&quot;&gt;good to go&lt;/a&gt;! Our detour is over and we&amp;rsquo;re 
back on the road – see you in part 3!&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <id>https://2-45.pm/articles/articles/steel_vellum/2023/04/15/the-worst-way-to-build-software.html</id>
      <title>The worst way to build software</title>
      <updated>2023-04-15T14:45:00+02:00</updated>

      <link rel="alternate" href="https://2-45.pm/articles/articles/steel_vellum/2023/04/15/the-worst-way-to-build-software.html" />

      <published>2023-04-15T14:45:00+02:00</published>
      <content type="html">&lt;p&gt;Sometimes, I just want to code something – anything. Like many (if not all) developpers, I have a 
virtual drawer full of half-finished apps, repos left untouched for years whose last commit message 
is an unhelpful &amp;ldquo;WIP&amp;rdquo;, and domain names still parked long after their initial pun stopped making sense. 
Today, I&amp;rsquo;d like to pick one of those unfinished projects and revisit it.&lt;/p&gt;

&lt;p&gt;Back around 2016, I started a Rails app cryptically named &lt;em&gt;Ankran Nembo&lt;/em&gt;; it was supposedly 
a character creation app for the D&amp;amp;D campaign I had started, but more importantly, it was a toy 
project to try out the brand new version of Rails at the time – Rails 5.0. I have good memories of working 
on this application and experimenting with different techniques, but I don&amp;rsquo;t feel like salvaging 
any of it (except for one thing). So instead, let&amp;rsquo;s start over from scratch, but in the same 
spirit.&lt;/p&gt;

&lt;p&gt;However, there is one problem – if we were to build &lt;em&gt;an application&lt;/em&gt;, we wouldn&amp;rsquo;t be able to 
start coding &lt;em&gt;right now&lt;/em&gt;. Doing things properly would mean thinking about user interactions, 
UI, and probably spend some time in HTML+CSS land first. And I want to code &lt;em&gt;now&lt;/em&gt;, not later! So, 
instead of a full application, let&amp;rsquo;s focus on coding some kind of character creation engine – 
a library with which to build a full app later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A word of warning!&lt;/strong&gt; In real life, I would strongly advise against such an approach. Building the 
things you think you&amp;rsquo;ll need before even knowing what it is you actually want to do is a sure way 
to fail – or, at best, to build a working but irrelevant piece of software. I guess that there are 
situations where such a bottom-up approach makes sense, but unless you&amp;rsquo;re a very large and fragmented 
company, or work in a very constrained industry, this is the kind of things only 
&lt;a href=&quot;https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/&quot;&gt;Architecture Astronauts&lt;/a&gt; do. 
And please, don&amp;rsquo;t be an Architecture Astronaut.&lt;/p&gt;

&lt;p&gt;Still, let&amp;rsquo;s pretend that we have very good reasons for going for a library instead of an application. A &amp;ldquo;library&amp;rdquo; 
can be as simple as a &lt;code&gt;require&lt;/code&gt;’d Ruby file, but the most common way to package and distribute a librairy is by 
organizing it into a &lt;a href=&quot;https://rubygems.org&quot;&gt;gem&lt;/a&gt;. So let&amp;rsquo;s do that – let&amp;rsquo;s build a gem, which will provide 
a character creation engine for Dungeons &amp;amp; Dragons, 5th edition. It will give us Ruby classes and methods to create a 
new character, set its game characteristics (such as race, class, attributes, etc.), and maybe even handle game 
mechanics such as dice rolls or experience points.&lt;/p&gt;

&lt;p&gt;As an exercise, we&amp;rsquo;ll also try to have a radical use of &lt;a href=&quot;https://dannorth.net/introducing-bdd/&quot;&gt;BDD&lt;/a&gt; and 
&lt;a href=&quot;https://martinfowler.com/bliki/TestDrivenDevelopment.html&quot;&gt;TDD&lt;/a&gt;, in a &amp;ldquo;&lt;a href=&quot;https://blog.devgenius.io/detroit-and-london-schools-of-test-driven-development-3d2f8dca71e5&quot;&gt;London school&lt;/a&gt;&amp;rdquo; 
way – albeit with little to no mocking, if possible (because I don&amp;rsquo;t like mocks that much anymore). This is 
the part from the Ankran Nembo app that I want to cannibalize: a long &amp;ldquo;integration test&amp;rdquo; that provided a 
nice example of &lt;em&gt;the code we wish we had&lt;/em&gt;. We can use it as our &amp;ldquo;outside in&amp;rdquo; entry point, and let it 
drive the design of our library&amp;rsquo;s API.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s get to it! First, we&amp;rsquo;ll need to set up our workspace: the gem files and directories layout, and the test runner. 
Then, we&amp;rsquo;ll start BDD-ing our way to a full-fledged D&amp;amp;D5 character creation library.&lt;/p&gt;
</content>
    </entry>
  
</feed>
  </div>
</article>
  </main>
  <footer>
    <p class="h-card">
      <a href="/work-with-me.html#even-more-about-me">
        <span class="p-given-name">Ronan</span> <span class="p-family-name">Limon Duparcmeur</span>
      </a>
    </p>
    
    <ul class="footer-links">
      <li>
        <a href="https:/ruby.social/@r3trofitted">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-mastodon" viewBox="0 0 16 16">
            <path d="M11.19 12.195c2.016-.24 3.77-1.475 3.99-2.603.348-1.778.32-4.339.32-4.339 0-3.47-2.286-4.488-2.286-4.488C12.062.238 10.083.017 8.027 0h-.05C5.92.017 3.942.238 2.79.765c0 0-2.285 1.017-2.285 4.488l-.002.662c-.004.64-.007 1.35.011 2.091.083 3.394.626 6.74 3.78 7.57 1.454.383 2.703.463 3.709.408 1.823-.1 2.847-.647 2.847-.647l-.06-1.317s-1.303.41-2.767.36c-1.45-.05-2.98-.156-3.215-1.928a3.614 3.614 0 0 1-.033-.496s1.424.346 3.228.428c1.103.05 2.137-.064 3.188-.189zm1.613-2.47H11.13v-4.08c0-.859-.364-1.295-1.091-1.295-.804 0-1.207.517-1.207 1.541v2.233H7.168V5.89c0-1.024-.403-1.541-1.207-1.541-.727 0-1.091.436-1.091 1.296v4.079H3.197V5.522c0-.859.22-1.541.66-2.046.456-.505 1.052-.764 1.793-.764.856 0 1.504.328 1.933.983L8 4.39l.417-.695c.429-.655 1.077-.983 1.934-.983.74 0 1.336.259 1.791.764.442.505.661 1.187.661 2.046v4.203z"/>
          </svg>
        </a>
      </li>
      <li>
        <a href="https://github.com/r3trofitted">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-github" viewBox="0 0 16 16">
            <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z" />
          </svg>
        </a>
      </li>
      <li>
        <a href="https://www.linkedin.com/in/r3trofitted">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-linkedin" viewBox="0 0 16 16">
            <path d="M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854V1.146zm4.943 12.248V6.169H2.542v7.225h2.401zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248-.822 0-1.359.54-1.359 1.248 0 .694.521 1.248 1.327 1.248h.016zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016a5.54 5.54 0 0 1 .016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225h2.4z" />
          </svg>
        </a>
      </li>
      <li>
        <a href="/feed.xml">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-rss-fill" viewBox="0 0 16 16">
            <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm1.5 2.5c5.523 0 10 4.477 10 10a1 1 0 1 1-2 0 8 8 0 0 0-8-8 1 1 0 0 1 0-2zm0 4a6 6 0 0 1 6 6 1 1 0 1 1-2 0 4 4 0 0 0-4-4 1 1 0 0 1 0-2zm.5 7a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z" />
          </svg>
        </a>
      </li>
    </ul>
    <!-- SVG gradient for the icons -->
<svg aria-hidden="true" focusable="false" style="width:0;height:0;position:absolute;">
  <defs>
    <linearGradient x1="0.085" y1="0.085" x2="0.915" y2="0.915" id="rss-gradient">
      <stop offset="0.0" stop-color="#E3702D" />
      <stop offset="0.1071" stop-color="#EA7D31" />
      <stop offset="0.3503" stop-color="#F69537" />
      <stop offset="0.5" stop-color="#FB9E3A" />
      <stop offset="0.7016" stop-color="#EA7C31" />
      <stop offset="0.8866" stop-color="#DE642B" />
      <stop offset="1.0" stop-color="#D95B29" />
    </linearGradient>
    <linearGradient x1="0.0" y1="0" x2="0.0" y2="1.0" id="mastodon-gradient">
      <stop stop-color="#6364FF"/>
      <stop offset="1" stop-color="#563ACC"/>
    </linearGradient>
  </defs>
</svg>
  </footer>
</body>
</html>
